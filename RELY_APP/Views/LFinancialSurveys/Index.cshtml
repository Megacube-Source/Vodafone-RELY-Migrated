@model RELY_APP.ViewModel.LFinancialSurveysViewModel
<a style="cursor:pointer" onclick="fnShowPopUp();">Create</a>
<div id="jqxgrid">
</div>
<br>&ensp;<br>
@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "frm", name = "frm", @encType = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    <!-- POP up window code-->
    <div id="financialSurveyPopUp" class="modal fade" role="dialog">
        <div class="modal-dialog" style="width:50%">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title" id="popupHeaderEdit">
                        Update Financial Survey
                    </h4>
                    <h4 class="modal-title" id="popupHeaderAdd">
                        Create Financial Survey
                    </h4>
                </div>
                <div class="modal-body">
                    @Html.HiddenFor(model => model.Id)

                    <div class="row">
                        <div class="container col-md-12">
                            <div class="col-sm-12 col-md-12 col-lg-12">
                                <div class="col-sm-3 col-md-3 col-lg-3" style="padding-left:0px">
                                    @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "required" })
                                </div>

                                <div class="col-sm-9 col-md-9 col-lg-9">
                                    @Html.DropDownListFor(model => model.Name, null, "-- Please choose: --", new { @class = "form-control", @onchange = "fnGetSurveyLevelName();", @style = "text-align: left;" })
                                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-sm-12 col-md-12 col-lg-12">
                                <div class="col-sm-3 col-md-3 col-lg-3" style="padding-left:0px;margin-top:10px">
                                    @Html.LabelFor(model => model.SurveyName, htmlAttributes: new { @class = "required" })
                                </div>
                                <div class="col-sm-9 col-md-9 col-lg-9" style="margin-top:10px">
                                    @Html.EditorFor(model => model.SurveyName, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.SurveyName, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-sm-12 col-md-12 col-lg-12">
                                <div class="col-sm-3 col-md-3 col-lg-3" style="padding-left:0px;margin-top:10px">
                                    @Html.LabelFor(model => model.Description)
                                </div>
                                <div class="col-sm-9 col-md-9 col-lg-9" style="margin-top:10px">
                                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-sm-12 col-md-12 col-lg-12">
                                <div class="col-sm-3 col-md-3 col-lg-3" style="padding-left:0px;margin-top:10px">
                                    @Html.LabelFor(model => model.IsActive)
                                </div>
                                <div class="col-sm-9 col-md-9 col-lg-9" style="margin-top:10px">
                                    @Html.CheckBoxFor(model => model.IsActive, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
                                </div>
                            </div>


                            </div>
                        </div>
                </div>
                <div class="modal-footer">
                    @*button on Edit pop up*@
                    <button id="btnedit" type="submit" class="btn btn-red pull-left" data-dismiss="modal">Save</button>

                    @*button on create pop up*@
                    <button id="btncreate" type="submit" class="btn btn-red pull-left" data-dismiss="modal">Create</button>
                </div>
            </div>
        </div>
    </div>
}

@Scripts.Render("~/bundles/jqxgridbundle")
@Scripts.Render("~/bundles/jqueryval")
    <script>
    var surveylevelid;
    $(document).ready(function () {
        //save return url
        $.ajax({
            data: { path: window.location.pathname },
            url: "/Home/SaveReturnPath",
            cache:false,
            dataType: "json",
            type: "POST",
            success: function (data) {
            },
            error: function (reponse) {
                //  alert("error : " + reponse);
            }
        });
        fnGetFinancialSurvey();
        });

    //function to get the id of dropdown on change of it.
    function fnGetSurveyLevelName() {        
        surveylevelid = document.getElementById('Name').value;
    }

   //function to show data on grid (data for which isActive == true can be displayed on grid as per already implemented API method)
    function fnGetFinancialSurvey() {
        var LFinancialSurveySource = {
            dataType: "json",
            type: "GET",
            dataFields: [
                { name: 'Id', type: 'int' },
                { name: 'CompanyCode', type: 'string' },
                { name: 'SurveyLevelId', type: 'int' },
                { name: 'Name', type: 'string' },
                { name: 'SurveyName', type: 'string' },
                { name: 'Description', type: 'string' },
                { name: 'IsActive', type: 'bool' }
            ],
            id: 'Id',
            url: "/LFinancialSurveys/GetLFinancialSurvey"
        };

        var dataAdapter = new $.jqx.dataAdapter(LFinancialSurveySource)

        var cellsrenderer = function (row, columnfield, value, defaulthtml, columnproperties) {
            var rowdata = $('#jqxgrid').jqxGrid('getrowdata', row);
            if (Number(rowdata.Id) != 0 && rowdata.CompanyCode) {
                // return '&emsp;<a href="#" onclick="FnDelete(' + rowdata.Id + ')"> <i class="fa fa-times" aria-hidden="true" style="color:#e60000;font-size:20px !important;" title="Delete"></i>';
                return '&emsp;<a href="#" onclick="FnDelete(' + rowdata.Id + ')"> <i class="fa fa-times" aria-hidden="true" style="color:#e60000;font-size:20px !important;" title="Delete"></i>&emsp;<a href="#" onclick="Edit(' + rowdata.Id + ')"><i class="fa fa-pencil-square-o" style="color:red;font-size:15px !important;" aria-hidden="true"  title="Edit"></i>';
            }
            //else {
            //    isChanged = true;
            //    return '&emsp;<a href="#" onclick="FnDeleteGridRow(' + rowdata.Id + ')"> <i class="fa fa-times" aria-hidden="true" style="color:#e60000;font-size:20px !important;" title="Delete"></i> </a>';
            //}
        };
        //var validateFunc = function (datafield, value) {
        //    if (value.length == 0 || value == null || value == '') {
        //        return { message: "Field is required", result: false };
        //    }
        //    return true;
        //}
        //var cellclass = function (row, datafield, value, rowdata) {
        //    for (var i = 0; i < editedRows.length; i++) {
        //        if (editedRows[i].index == row) {
        //            return "ChangeFontColor";
        //        }
        //    }
        //}
        //Check whether the grid is already defined or not and ready for use.
        var ready = $("#jqxgrid").jqxGrid('ready');
        //if grid is alreday defined and ready for use, just update the grid. Otherwise, define the grid.
        if (typeof ready != 'undefined') {
            $("#jqxgrid").jqxGrid('updatebounddata');
        }
        else {
            $('#jqxgrid').jqxGrid({
                source: LFinancialSurveySource,
                width: "100%",
                columnsresize: true,
                pageable: true,
                pagesize: 200,
                filterable: true,
                autoshowcolumnsmenubutton: false,//down arrow always visible for filter and sorting
                sortable: true,
                //keyboardnavigation: false,
                //enablebrowserselection: true,
                //showeverpresentrow: true,
                //everpresentrowposition: "top",
                //editable: true,
                //localization: {
                //    addrowstring: "Add",
                //    udpaterowstring: "Update",
                //    deleterowstring: "Delete",
                //    resetrowstring: "Clear",
                //    everpresentrowplaceholder: "Type: "
                //},
                selectionmode: 'multiplecellsadvanced',
                pagesizeoptions: ['10', '50', '100', '200', '500', '1000'],

                columns: [
                    {
                        text: 'Survey Level', datafield: 'Name'/*, validateEverPresentRowWidgetValue: validateFunc, cellclassname: cellclass, filtertype: 'input', columntype: 'dropdownlist',*/
                        //createeditor: function (row, cellvalue, editor) {
                        //    // console.log(clientSourceDA);,displayfield:'CatName'
                        //    editor.jqxDropDownList({ displayMember: 'Name', valueMember: 'Id', source: dataAdapterSurveyLevelName });
                        //    editor.on('change', function (event)//This function will save CategoryId in Edit
                        //    {
                        //        var args = event.args;
                        //        if (args) {
                        //            // index represents the item's index.
                        //            var index = args.index;
                        //            var item = args.item;
                        //            // get item's label and value.
                        //            var label = item.label;
                        //            var value = item.value;
                        //            $("#jqxgrid").jqxGrid('setcellvalue', row, "SurveyLevelId", value);
                        //        }
                        //    });
                        //},
                        //createeverpresentrowwidget: function (datafield, htmlElement, popup, addCallback) {
                        //    var inputTag = $("<div style='border: none;'></div>").appendTo(htmlElement);
                        //    inputTag.jqxDropDownList({ source: dataAdapterSurveyLevelName, displayMember: 'Name', valueMember: 'Id', width: '100%' });
                        //    $(document).on('keydown.Id', function (event) {
                        //        if (event.keyCode == 13) {
                        //            if (event.target === inputTag[0]) {
                        //                addCallback();
                        //            }
                        //            else if ($(event.target).ischildof(inputTag)) {
                        //                addCallback();
                        //            }
                        //        }
                        //    });
                        //    return inputTag;
                        //},

                        //getEverPresentRowWidgetValue: function (datafield, htmlElement, validate) {
                        //    var selectedItem = htmlElement.jqxDropDownList('getSelectedItem');
                        //    if (!selectedItem)
                        //        return "";
                        //    var value = selectedItem.label;
                        //    //update the corresponding Id with respect to the record selected
                        //    // $("#jqxgrid").jqxGrid('setcellvalue', rowBoundIndex, "CanBeDisplayed", true);
                        //    return value;
                        //},
                        //resetEverPresentRowWidgetValue: function (datafield, htmlElement) {
                        //    htmlElement.jqxDropDownList('clearSelection');
                        //}

                    },
                    {
                        text: 'Survey Name', datafield: 'SurveyName'/*, validateEverPresentRowWidgetValue: validateFunc, cellclassname: cellclass, filtertype: 'input'*/

                    },
                    {
                        text: 'Description', datafield: 'Description'/*, cellclassname: cellclass, filtertype: 'input'*/

                    },
                    {
                        text: 'IsActive', datafield: 'IsActive'/*, cellclassname: cellclass, columntype: 'checkbox'*/

                    },
                    {
                        text: 'Actions', datafield: 'Id', cellsrenderer: cellsrenderer, width: '10%'/*, editable: false,*/
                        //initEverPresentRowWidget: function (datafield, htmlElement) {
                        //    var input = htmlElement.find('input');
                        //    input.attr('readonly', true);
                        //    input.attr('disabled', true);
                        //    htmlElement.addClass('jqx-fill-state-disabled');
                        //}
                    }
                ]
            });
        }
    }

    function fnShowPopUp() {           
        $("#btncreate").show();
        $("#btnedit").hide();
        $("#popupHeaderAdd").show();
        $("#popupHeaderEdit").hide();
       // $("input.form-control").val('');
        document.getElementById('Name').value = '';
        $('#IsActive').attr('checked', true);
        //document.getElementById('IsActive').value = false;    
        //$('.text-danger').text(""); /*to clear validation message*/
        $('#financialSurveyPopUp').modal(); //modal pop up opens
    }

     //this function is use to edit(on edit glimp)
     function Edit(id) {         
        $("#btncreate").hide();
        $("#popupHeaderAdd").hide();
        $("#popupHeaderEdit").show();
        $("#btnedit").show();
        $.ajax({
            type: "Get",
            url: '@Url.Action("Edit", "LFinancialSurveys")',
            dataType: "html",
            cache: false,
            data: { id: id },
            success: function (data) {
                var obj = JSON.parse(data);
               // console.log(obj);             
                document.getElementById('Name').value = obj.SurveyLevelId;
                surveylevelid = obj.SurveyLevelId;             
                document.getElementById('IsActive').value = obj.IsActive;
                if (obj.IsActive == true) {
                    $('#IsActive').attr('checked', true);
                }
                else
                    $('#IsActive').attr('checked', false);

                document.getElementById('SurveyName').value = obj.SurveyName;
                document.getElementById('Id').value = obj.Id;
                document.getElementById('Description').value = obj.Description;
                $("#financialSurveyPopUp").modal("show");
                $("#financialSurveyPopUp .modal-content").html(data.html);
            }
        });      
     }

    //function to create new data
    $("#btncreate").click(function (event) {
        $("#frm").validate();
        if ($('#frm').valid()) {
            $("#btncreate").show();
            $("#popupHeaderAdd").show();
            $("#popupHeaderEdit").hide();
            $("#btnedit").hide();
            $.ajax({
                type: "POST",
                cache: false,
                data: $("#frm").serialize() + "&surveylevelid=" + surveylevelid,
                url: "/LFinancialSurveys/Create",
                success: function (data) {
                    if (data.PopupMessage) {
                        if (data.PopupMessage != "") {
                            alert(data.PopupMessage);
                            $('.modal-backdrop').remove(); /*blank screen hides after modal dismiss*/
                            fnGetFinancialSurvey();
                        }
                    }
                    if (data.ErrorMessage) {
                        alert(data.ErrorMessage);
                        $("#financialSurveyPopUp").modal({ "backdrop": "static" });
                    }
                },
                error: function (reponse) {
                    console.log(reponse);
                    alert("error");
                }
            });
        }
        else {
            event.stopPropagation();
        }
    });

    //This function is use to update the data
     $("#btnedit").click(function (event) {
         $("#frm").validate();
         if ($('#frm').valid()) {
             var id = document.getElementById('Id').value;
              $.ajax({
                type: "POST",
                cache:false,
                data: $("#frm").serialize() + "&id=" + id + "&surveylevelid=" + surveylevelid,
                url: '@Url.Action("Update", "LFinancialSurveys")',
                success: function (data) {
                    //console.log(data);
                    //var obj = JSON.parse(data);     
                    document.getElementById('Name').value = data.SurveyLevelId;
                    surveylevelid = data.SurveyLevelId;    
                    if (data.PopupMessage) {
                        if (data.PopupMessage != "") {                           
                            alert(data.PopupMessage);
                            $('.modal-backdrop').remove(); /*blank screen hides after modal dismiss*/
                            fnGetFinancialSurvey();
                        }
                    }
                    if (data.ErrorMessage) {
                        alert(data.ErrorMessage);
                        $("#financialSurveyPopUp").modal({ "backdrop": "static" });
                    }
                    
                },
                error: function (reponse) {
                    console.log(reponse);
                    alert("error");
                }
             });
              fnGetFinancialSurvey();
         }
         else {
             event.stopPropagation();
         }
     });

    //This method is called when User clicks on delete glymph in grid
    function FnDelete(Id) {
        var r = confirm("Are you sure to delete the selected financial survey?");
        if (r == false) {
            return;
        }
        else {
            $.ajax({
                data: { Id: Id },
                cache: false,
                url: "/LFinancialSurveys/Delete",
                traditional: true,
                success: function (data) {
                    if (data) {
                        if (data.ErrorMessage) {
                            alert(data.ErrorMessage);
                        }
                        else {
                            alert(data.PopupMessage);
                        }
                        fnGetFinancialSurvey();
                    }
                    else {
                        //Any unhanded error has been caught
                        window.location.href = "/Home/Error";
                    }
                },
                error: function (reponse) {
                    console.log(reponse);
                    alert("error");  //  alert("error : " + reponse);
                }
            });
        }
    }

/*---------------------------------------Below method is commented by Rakhi Singh on 17th sept as per requirement--------------------------------*/
    @*<input type="button" class="btn btn-red" value="Save" onclick="FnAddLFinancialSurvey();">*@
    //var editedRows = new Array();
   // var dataAdapterSurveyLevelName = undefined;

      //Bind survey level name
        //var SurveyLevelNameSource = {
        //    dataType: "json",
        //    type: "GET",
        //    dataFields: [
        //        { name: 'Id', type: 'int' },
        //        { name: 'CompanyCode', type: 'string' },
        //        { name: 'Name', type: 'string' },
        //        { name: 'Description', type: 'string' }
        //    ],
        //    id: 'Id',
        //    url: "/LFinancialSurveys/BindSurveyLevelNameDropDown"
        //};

        //dataAdapterSurveyLevelName = new $.jqx.dataAdapter(SurveyLevelNameSource, { async: false, autoBind: true })

    ////function to delete unsaved grid row from grid
    //function FnDeleteGridRow(Id) {
    //    var commit = $("#jqxgrid").jqxGrid('deleterow', Id);
    //}

    //function FnAddLFinancialSurvey() {
    //    var arr = [];
    //    var rows = $('#jqxgrid').jqxGrid('getrows');
    //    for (var i = 0; i < rows.length; i++) {
    //        arr[i] = [];
    //        arr[i][0] = rows[i].Id;

    //        //Section to get SurveyLevelId
    //        if (rows[i].Name) {
    //            for (var j = 0; j < dataAdapterSurveyLevelName.records.length; j++) {
    //                if (dataAdapterSurveyLevelName.records[j].Name == rows[i].Name) {
    //                    arr[i][1] = dataAdapterSurveyLevelName.records[j].Id;
    //                    break;
    //                }
    //            }
    //        }

    //        arr[i][2] = rows[i].SurveyName;
    //        arr[i][3] = rows[i].Description;
    //        arr[i][4] = rows[i].IsActive;
    //    }

    //    console.log(arr)
    //    $.ajax({
    //        data: { GridData: arr },
    //        url: "/LFinancialSurveys/EditLFinancialSurvey",
    //        type: "POST",
    //        // traditional: true,
    //        success: function (data) {
    //            if (data.ErrorMessage) {
    //                alert(data.ErrorMessage);
    //            } else {
    //                alert("Data Updated successfully");
    //            }
    //            window.location.reload();
    //        },
    //        error: function (reponse) {
    //            //  alert("error : " + reponse);
    //        }
    //    });


    //}
    </script>

