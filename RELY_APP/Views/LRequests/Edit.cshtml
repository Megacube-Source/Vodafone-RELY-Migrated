@model RELY_APP.ViewModel.LRequestViewModel

@{

    var CompanySpecificData = (List<RELY_APP.ViewModel.LCompanySpecificColumnViewModel>)@ViewBag.CompanySpecificColumns;
}

<link rel="stylesheet" href="~/Content/styles/labelStyle.css" type="text/css">
<script src="~/Scripts/jqxtabs.js"></script>
<script src="~/Scripts/ProjectScripts/ProjectScript.js"></script>

<script>
   /*   $(function () {
            $("#dialog").dialog({
                modal: true,
                autoOpen: false,
                title: "FileUpload Dialog Box",
                width: 1000,
                height: 800
            });
            $("#FileUpload").click(function () {
                $('#dialog').dialog('open');
            });
        });*/


    //This variable is defined to check for the validation errors in selecting reports to for the roles in listbox
    var IsRecordValid = true;
    var ValidationErrorMessage = "";
    var RequestId = 0;
    var IsProductCreatedOnFly = false;
    var CheckBoxAttributeValues = 'AttributeB01:@Model.AttributeB01|AttributeB02:@Model.AttributeB02|AttributeB03:@Model.AttributeB03|AttributeB04:@Model.AttributeB04|AttributeB05:@Model.AttributeB05|AttributeB06:@Model.AttributeB06|AttributeB07:@Model.AttributeB07|AttributeB08:@Model.AttributeB08|AttributeB09:@Model.AttributeB09|AttributeB10:@Model.AttributeB10';
    var SelectedProductId = 0;
    var SelectedProduct = "";
    var SelecterType = "";
    var TotalProductCount = 0;
    var LProductId = ''; var LProductCode = ''; var LProductName = '';
    //This variable is defined to store value if form has any changes since it has loaded

    $(document).ready(function () {
        $('#loadertext').hide();
        $('input,select,textarea').change(function () {
            isChanged = true;
        })

     //This ajax call is being made to controller to save the current page url in session which will be the url of back button  in subsequent pages
        $.ajax({
            data: { path: window.location.href },
            cache: false,
            url: "/Home/SaveReturnPath",
            dataType: "json",
            type: "POST",
            success: function (data) {
            },
            error: function (reponse) {
                //  alert("error : " + reponse);
            }
        });
    document.getElementById('SystemId').style.pointerEvents = 'none';
    document.getElementById('SystemId').style.backgroundColor = 'lightgray';

     RequestId = '@Model.Id';
        @*var previousComments = '@Model.WFComments';*@
    document.getElementById("ContinueFlag").value = "Continue";

    var CompanySpecificArray = @Html.Raw(Json.Encode(CompanySpecificData.OrderBy(p => p.OrdinalPosition)));
    GenerateCompanySpecificForm(CompanySpecificArray, 'Requests', RequestId);//call this method placed in ProjectScript file to repaint the form with new labels order and validations

     // Method to load jqxtabs in view.
    $('#jqxTabs').jqxTabs({ position: 'top' });




     //These lines add the value to connection date and order date if present in model
        @if (Model.AttributeD01.HasValue) {
            @: var Connection = new Date('@Model.AttributeD01.Value.Year', '@Model.AttributeD01.Value.Month'-1, '@Model.AttributeD01.Value.Day')
            @: $('#AttributeD01').jqxDateTimeInput('setDate', Connection);
        }
/**/
/**/
/**/
/**/
         @if (Model.AttributeD02.HasValue) {
            @: var Connection = new Date('@Model.AttributeD02.Value.Year', '@Model.AttributeD02.Value.Month'-1, '@Model.AttributeD02.Value.Day')
            @: $('#AttributeD02').jqxDateTimeInput('setDate', Connection);
        }
/**/
/**/
/**/
/**/
        @if (Model.AttributeD03.HasValue) {
            @: var Connection = new Date('@Model.AttributeD03.Value.Year', '@Model.AttributeD03.Value.Month'-1, '@Model.AttributeD03.Value.Day')
            @: $('#AttributeD03').jqxDateTimeInput('setDate', Connection);
        }
/**/
/**/
/**/
/**/
        @if (Model.AttributeD04.HasValue) {
            @: var Connection = new Date('@Model.AttributeD04.Value.Year', '@Model.AttributeD04.Value.Month'-1, '@Model.AttributeD04.Value.Day')
            @: $('#AttributeD04').jqxDateTimeInput('setDate', Connection);
        }
/**/
/**/
/**/
/**/
         @if (Model.AttributeD05.HasValue) {
            @: var Connection = new Date('@Model.AttributeD05.Value.Year', '@Model.AttributeD05.Value.Month'-1, '@Model.AttributeD05.Value.Day')
            @: $('#AttributeD05').jqxDateTimeInput('setDate', Connection);
        }
/**/
/**/
/**/
/**/
        @if (Model.AttributeD06.HasValue) {
            @: var Connection = new Date('@Model.AttributeD06.Value.Year', '@Model.AttributeD06.Value.Month'-1, '@Model.AttributeD06.Value.Day')
            @: $('#AttributeD06').jqxDateTimeInput('setDate', Connection);
        }
/**/
/**/
/**/
/**/
         @if (Model.AttributeD07.HasValue) {
            @: var Connection = new Date('@Model.AttributeD07.Value.Year', '@Model.AttributeD07.Value.Month'-1, '@Model.AttributeD07.Value.Day')
            @: $('#AttributeD07').jqxDateTimeInput('setDate', Connection);
        }
/**/
/**/
/**/
/**/
        @if (Model.AttributeD08.HasValue) {
            @: var Connection = new Date('@Model.AttributeD08.Value.Year', '@Model.AttributeD08.Value.Month'-1, '@Model.AttributeD08.Value.Day')
            @: $('#AttributeD08').jqxDateTimeInput('setDate', Connection);
        }
/**/
/**/
/**/
/**/
        @if (Model.AttributeD09.HasValue) {
            @: var Connection = new Date('@Model.AttributeD09.Value.Year', '@Model.AttributeD09.Value.Month'-1, '@Model.AttributeD09.Value.Day')
            @: $('#AttributeD09').jqxDateTimeInput('setDate', Connection);
        }
/**/
/**/
/**/
/**/
         @if (Model.AttributeD10.HasValue) {
            @: var Connection = new Date('@Model.AttributeD10.Value.Year', '@Model.AttributeD10.Value.Month'-1, '@Model.AttributeD10.Value.Day')
            @: $('#AttributeD10').jqxDateTimeInput('setDate', Connection);
        }

            //These lines add the value to attributes columns textbox if present in Model
        @if (! (Model.AttributeC01=="" || Model.AttributeC01 == null)) {
            @: $('#AttributeC01').val('@Model.AttributeC01');
        }
/**/
/**/
        @if (! (Model.AttributeC02=="" || Model.AttributeC02 == null)) {
            @: $('#AttributeC02').val('@Model.AttributeC02');
        }
/**/
/**/
        @if (! (Model.AttributeC03=="" || Model.AttributeC03 == null)) {
            @: $('#AttributeC03').val('@Model.AttributeC03');
        }
/**/
/**/
        @if (! (Model.AttributeC04=="" || Model.AttributeC04 == null)) {
            @: $('#AttributeC04').val('@Model.AttributeC04');
        }
/**/
/**/
        @if (! (Model.AttributeC05=="" || Model.AttributeC05 == null)) {
            @: $('#AttributeC05').val('@Model.AttributeC05');
        }
        @if (! (Model.AttributeC06=="" || Model.AttributeC06 == null)) {
            @: $('#AttributeC06').val('@Model.AttributeC06');
        }
        @if (! (Model.AttributeC07=="" || Model.AttributeC07 == null)) {
            @: $('#AttributeC07').val('@Model.AttributeC07');
        }
        @if (! (Model.AttributeC08=="" || Model.AttributeC08 == null)) {
            @: $('#AttributeC08').val('@Model.AttributeC08');
        }
        @if (! (Model.AttributeC09=="" || Model.AttributeC09 == null)) {
            @: $('#AttributeC09').val('@Model.AttributeC09');
        }
        @if (! (Model.AttributeC10=="" || Model.AttributeC10 == null)) {
            @: $('#AttributeC10').val('@Model.AttributeC10');
        }
/**/
/**/
        @if (! (Model.AttributeI01 == 0 )) {
            @: $('#AttributeI01').val('@Model.AttributeI01');
        }
/**/
/**/
        @if (! (Model.AttributeI02 == 0)) {
            @: $('#AttributeI02').val('@Model.AttributeI02');
        }
/**/
/**/
        @if (! (Model.AttributeI03 == 0)) {
            @: $('#AttributeI03').val('@Model.AttributeI03');
        }
/**/
/**/
        @if (! (Model.AttributeI04 == 0)) {
            @: $('#AttributeI04').val('@Model.AttributeI04');
        }
/**/
/**/
        @if (! (Model.AttributeI05 == 0)) {
            @: $('#AttributeI05').val('@Model.AttributeI05');
        }
/**/
/**/
        @if (! (Model.AttributeN01 == 0)) {
            @: $('#AttributeN01').val('@Model.AttributeN01');
        }
/**/
/**/
        @if (! (Model.AttributeN02 == 0)) {
            @: $('#AttributeN02').val('@Model.AttributeN02');
        }
/**/
/**/
        @if (! (Model.AttributeN03 == 0)) {
            @: $('#AttributeN03').val('@Model.AttributeN03');
        }
/**/
/**/
        @if (! (Model.AttributeN04 == 0)) {
            @: $('#AttributeN04').val('@Model.AttributeN04');
        }
/**/
/**/
        @if (! (Model.AttributeN05 == 0)) {
            @: $('#AttributeN05').val('@Model.AttributeN05');
        }
/**/
        @if ( Model.AttributeB01 == true) {
            @: $('#AttributeB01').prop('checked', true);
        }
/**/
         @if ( Model.AttributeB02 == true) {
            @: $('#AttributeB02').prop('checked', true);
        }
/**/
        @if ( Model.AttributeB03 == true) {
            @: $('#AttributeB03').prop('checked', true);
        }
/**/
        @if ( Model.AttributeB04 == true) {
            @: $('#AttributeB04').prop('checked', true);
        }
/**/
        @if ( Model.AttributeB05 == true) {
            @: $('#AttributeB05').prop('checked', true);
        }
/**/
        var FormType = '@ViewBag.FormType';
         if (FormType == 'Change') {
                document.getElementById('Name').style.pointerEvents = 'none';
                document.getElementById('Name').style.background = 'lightgray';
        }
     //   if (FormType == 'Review') {
     //       $('*', 'form').prop('disabled', true);
     //       $('#BackButton').removeAttr('disabled');
     //       //SS Below classes are making Comments/History tab disabled so we are enabling them  here
     //       $('#HistoryDownload').removeAttr('disabled');
     //       $('.jqx-tabs-content-element').removeAttr('disabled');
     //       $('.jqx-widget-content').removeAttr('disabled');
     //       $('#frmhorizontal').removeAttr('disabled');
     //       $('#tabssection').removeAttr('disabled');
     //       $('#jqxgridHistory').removeAttr('disabled');
     //       $('#jqxgrid').removeAttr('disabled');
     //       $('#jqxTabs').removeAttr('disabled');
     //       $('#ASMatrix').removeAttr('disabled');
     //       $('#ReviewButton').prop('disabled',false);
     //       $('#jqxTabs').jqxTabs({ disabled:false });
     //      // $('input[type=button]').removeAttr('disabled')
     //        $('#SecondaryFormButtons :button').prop('disabled', false);
     //        document.getElementById('CreateProdLink').style.display = 'none';
     //$('#WFComments').removeAttr('disabled',false);
     //       document.getElementById('Comments').style.pointerEvents = 'none';
     //       if ($("#AttributeD01").length > 0){
     //           $("#AttributeD01").jqxDateTimeInput({ disabled: true })
     //        }
     //       if ($("#AttributeD02").length > 0){
     //         $("#AttributeD02").jqxDateTimeInput({ disabled: true })
     //       }
     //      // $('#jqxgridProduct').jqxGrid('disabled',true);
     //      // $("#Productdropdownlist").jqxDropDownList('disabled',true)
     //    }

        // handling tab click events:
        $('#jqxTabs').on('tabclick', function (event) {
            var pageIndex = event.args.item + 1;
            switch (pageIndex) {
                case 1://attributes

                    break;
                case 2://productPOB
                    FnGetProductAttached();
                    break;
                case 3://comments

                    break;
                case 4://history
                    fnAuditDetails();
                    break;
                case 5://Attached files
                    FnGetSupportingDocumentList();
                    break;
                default:

            }

        });
        //$("#jqxgridProduct").on("bindingcomplete", function (event) {
        //    $('#jqxgridProduct').jqxGrid({ disabled: false });

        //});
        $("#jqxgrid").on("bindingcomplete", function (event) {
            $('#jqxgrid').jqxGrid({ disabled: false });

        });
        $("#jqxgridHistory").on("bindingcomplete", function (event) {
            $('#jqxgridHistory').jqxGrid({ disabled: false });
        });
     //GetFileList();
    //Part of Upload Utility
    var TransactionId='@Model.Id';

    });//document.ready ends heree

    function FnGetProductAttached()
    {
        $.ajax({
            type: "GET",
            data: { RequestId: '@Model.Id' },
            cache: false,
            url: "/LProducts/GetProductCountAttachedToRequest",
            success: function (data) {
                TotalProductCount = data.ProductCount;
                if (data.ProductCount > 0 && data.SelecterType != '' && data.SelecterType!= null) {
                    FnObligationGrid(data.SelecterType);
                }
            },
            error: function (error) {

            }
        });

    }

    function FnObligationGrid(SelecterType) {
        // source for jqxgridProduct
        var datafieldsForProductGrid = [];
        var columnForProductGrid = [];
        datafieldsForProductGrid.push({ name: 'ProductCode', type: 'string' }); columnForProductGrid.push({ text: 'Product Code', datafield: 'ProductCode' });
        datafieldsForProductGrid.push({ name: 'Name', type: 'string' }); columnForProductGrid.push({ text: 'Description', datafield: 'Name' });
        datafieldsForProductGrid.push({ name: 'Id', type: 'int' });
        datafieldsForProductGrid.push({ name: 'SelecterType', type: 'string' });
        if (SelecterType != null && SelecterType != '') {
            $.ajax({
                type: "GET",
                data: { SelecterType: SelecterType },
                cache:false,
                url: "/LRequests/GetAttributesForProductGrid",
                success: function (data) {
                    for (var i = 0; i < data.length; ++i) {
                        if (data[i].DataType.toLowerCase() == "bit") {
                            datafieldsForProductGrid.push({ name: data[i].ColumnName, type: 'bool' });
                            columnForProductGrid.push({ text: data[i].Label, datafield: data[i].ColumnName, columntype: 'checkbox' });
                        }
                        else if (data[i].DataType.toLowerCase() == "datetime") {
                            datafieldsForProductGrid.push({ name: data[i].ColumnName, type: 'date' });
                            columnForProductGrid.push({ text: data[i].Label, datafield: data[i].ColumnName, cellsformat: 'dd/MM/yyyy', columntype: 'date' });
                        }
                        else {
                            datafieldsForProductGrid.push({ name: data[i].ColumnName, type: data[i].DataType });
                            columnForProductGrid.push({ text: data[i].Label, datafield: data[i].ColumnName});
                        }
                    }
                    var cellsrenderer = function (row, columnfield, value, defaulthtml, columnproperties) {
                        var FormType = '@ViewBag.FormType';
                        if (FormType == 'Review')
                                return '&emsp;<button type="button" id="ReviewButton" name="ReviewButton" onclick="FnEdit(); " class="GridButton">Zoom</button>';
                        else
                            return '&emsp;<button type="button" id="EditButton" name="EditButton" onclick="FnEdit(); " class="GridButton">Edit</button>&emsp;<button type="button" id="DeleteButton" name="DeleteButton" onclick="FnDelete(); " class="GridButton">Delete</button>';
                    };

                    columnForProductGrid.push({ text: 'Actions', datafield: 'Id', cellsrenderer: cellsrenderer });
                    var source =
                        {
                            dataType: "json",
                            cache: false,
                            //dataFields: [
                            //    { name: 'ProductCode', type: 'string' },
                            //    { name: 'Name', type: 'string' },
                            //    { name: 'Id', type: 'int' },

                            //],
                            dataFields: datafieldsForProductGrid,
                            data: { RequestId: RequestId },
                            id: "Id",
                            url: "/LProducts/GetByRequestId"
                        };
                    var dataAdapter = new $.jqx.dataAdapter(source)
                    $('#jqxgridProduct').jqxGrid({
                        source: dataAdapter,
                        width: '100%',
                        autoheight: true,
                        theme: 'bootstrap',
                        sortable: true,
                        columnsresize: true,
                        columnsreorder: false,
                        altrows: true,
                        showstatusbar: true,
                        ready: function () {
                        },
                        //columns: [
                        //    { text: 'Product Code', datafield: 'ProductCode' },
                        //    { text: 'Name', datafield: 'Name' },
                        //    { text: 'Actions', datafield: 'Id', cellsrenderer: cellsrenderer }
                        //]
                        columns: columnForProductGrid
                    });

                },
                error: function (reponse) {
                    Console.log(reponse);
                    alert("error");
                }
            })
        }

    }

    function FnGetASMatrix() {
        var TransactionId = @Model.Id;
        @*window.location.href = '/LAccountingScenarios/AccountingScenarioMatrix?EntityType=LRequests&EntityId=' + TransactionId + '&WorkFlowId=' + '@ViewBag.WorkFlowId' + '&StepId=' +'@ViewBag.StepId';*@
        window.location.href = '/LAccountingScenarios/AccountingScenarioMatrix?EntityType=LRequests&EntityId=' + TransactionId;
    }

    function FnClickBottomButtons(ActionName, StepParticipantActionId, ActionUrl)
    {
       var WorkflowId = @ViewBag.WorkflowId;
    var StepId = @ViewBag.StepId;

        var TransactionId = @Model.Id;
        var GlobalComment = document.getElementById("WFComments").value;
        FnClickSecondaryButtons(ActionName, WorkflowId, StepId, null, TransactionId, GlobalComment, StepParticipantActionId, ActionUrl);
    }

    //Calling Partial View for History Grid and Attachment File Grid
     @{
         Html.RenderPartial("_HistoryGridPartial");
         Html.RenderPartial("_AttachmentGridPartial");
      }


       //This function  detaches the Product  from the Request
      function FnDelete(){
        var r = confirm("Are you sure to delete the selected Product?");
        if (r == false) {
                return;
        }
        else {

             var selectedrowindex = $('#jqxgridProduct').jqxGrid('selectedrowindex');
             var rowdata = $('#jqxgridProduct').jqxGrid('getrowdata', selectedrowindex);
             var Id = rowdata.Id;
             if (typeof Id == 'undefined') {
                 $("#jqxgridProduct").jqxGrid('deleterow', selectedrowindex);
                 $('#jqxgridProduct').jqxGrid('refreshdata');
                 alert("Product deleted successfully.");
                 return;
             } else {

                 $.ajax({
                     type: "GET",
                     data: { Id: Id },
                     cache: false,
                     url: "/LRequests/DeleteProduct",
                     success: function (data) {
                         //alert("Product deleted successfully.\n Due to some technical issue, despite deleted, Product is being displayed here");
                         alert("Product deleted successfully");
                         $("#jqxgridProduct").jqxGrid('deleterow', selectedrowindex);
                         $('#jqxgridProduct').jqxGrid('updatebounddata');

                        // window.location.reload();
                     },
                     error: function (reponse) {
                         Console.log(reponse);
                     }
                 });
             }
        }//else ends here

      }//function ends here.

      //For getting Request Level Accounting Memo
    function FnGetAccMemo() {

          var RequestId = @Model.Id;
          // window.location.href = '/LRequests/GetRequestLevelAccMemo?RequestId=' + TransactionId;
          $.ajax({
              type: "GET",

              data: { RequestId: RequestId },
              cache: false,
              url: "/LRequests/CheckFeasibilityOfAccMemo",
              success: function (data) {

                  if (data != "Success") {
                      alert(data);
                      window.location.reload();
                  }
                  else {
                      $('#loadertext').modal();
                      window.location.href = '/LRequests/GetRequestLevelAccMemo?RequestId=' + RequestId;
                  }


              },
              error: function (reponse) {

                  Console.log(reponse);
              }
          });
      }

     function FnEdit() {
            var StepId='@ViewBag.StepId'
            var selectedrowindex = $('#jqxgridProduct').jqxGrid('selectedrowindex');
            var xx = $('#jqxgridProduct').jqxGrid("getrowid", selectedrowindex);
            var FormType = '@ViewBag.FormType';
            var WorkFlowId = document.getElementById('WorkFlowId').value;
            if (FormType == 'Change') {
                 var  url = '@Url.Action("Change", "LProducts")?Id=' + xx  + '&Source=Request' ;
                 event.preventDefault();//stop refreshing parent window
                 window.open(url,'_blank');
            }
            else if (FormType == 'Review') {
                var  url = '@Url.Action("Review", "LProducts")?Id=' + xx + '&Source=Request';
                event.preventDefault();//stop refreshing parent window
                window.open(url,'_blank');
            }
            else {
                var  url = '@Url.Action("Edit", "LProducts")?Id=' + xx + '&Source=Request';
                event.preventDefault();//stop refreshing parent window
                window.open(url,'_blank');//opening the products link in new tab
            }

        }

    function FnAttachComments(Comments) {
         GlobalComment = Comments;
         document.getElementById('Comments').value = Comments;
     }
    //function FnClose(){
    // document.getElementById('ProductsDiv').style.display = 'none';

    //}
    function FnCreateNewProduct()
    {
        var TransactionId = '@Model.Id';
        var RequestName='@Model.Name';
        OpenTabToSaveProduct(TransactionId, RequestName);//This means request is already saved
    }

    function OpenTabToSaveProduct(transactionId, RequestName)
    {
        var url = '@Url.Action("Create", "LProducts")?Source=Request&RequestId=' + transactionId + '&RequestName=' + RequestName;
       var returnValue = window.open(url,'_blank');//opening the products link in new tab
       if(returnValue !=null){
            if (typeof returnValue.attachEvent != "undefined") {
                returnValue.attachEvent("onunload", ChildTabClosed);
            } else if (typeof returnValue.addEventListener != "undefined") {
                returnValue.addEventListener("unload", ChildTabClosed, false);
            }
       }
    }


    /*Once created on the fly, product is not immediately available in dropdown in request create form*/
    function ChildTabClosed()
    {
        //Get Product on Fly
        IsProductCreatedOnFly = true;
        if (IsProductCreatedOnFly == true) {
            var ReqId = document.getElementById('Id').value;
            //ajax call to get latest product
            $.ajax({
                data: { RequestId: ReqId },
                cache: false,
                url: "/LRequests/GetLatestProductCreatedOnFly",
                dataType: "json",
                type: "POST",
                success: function (data) {
                    if (data) {
                        SelectedProductId = data.Id;
                        SelectedProduct = data.Product;
                        SelecterType = data.SelecterType;
                        FnAddProductToGrid();
                    }
                },
                error: function (reponse) {
                    //  alert("error : " + reponse);
                }
            });
        }
    }

    function FnAddProductToGrid()
    {
        if (SelectedProductId == null || SelectedProductId == 0) {
            alert("Please select Product.")
            return;
        }
        if (TotalProductCount == 0) {
            // source for jqxgridProduct
            var data = new Array();
            var source =
                {
                    dataFields: [
                        { name: 'ProductCode', type: 'string' },
                        { name: 'Name', type: 'string' },
                        { name: 'Id', type: 'int' },

                    ],
                    localdata: data,
                    cache: false,
                    datatype: "array"
                };
            var dataAdapter = new $.jqx.dataAdapter(source, {
                autoBind: true, async: false,
            })
            var cellsrenderer = function (row, columnfield, value, defaulthtml, columnproperties) {
                return '&emsp;<button type="button" id="EditButton" name="EditButton" onclick="FnEdit(); " class="GridButton">Edit</button>&emsp;<button type="button" id="DeleteButton1" name="DeleteButton1" onclick="FnDelete(); " class="GridButton">Delete</button>';
            };

            $('#jqxgridProduct').jqxGrid({
                source: dataAdapter,
                width: '100%',
                autoheight: true,
                theme: 'bootstrap',
                sortable: true,
                columnsresize: true,
                columnsreorder: false,
                altrows: true,
                showstatusbar: true,
                ready: function () {
                },
                columns: [
                    { text: 'Product Code', datafield: 'ProductCode' },
                    { text: 'Name', datafield: 'Name' },
                    { text: 'Actions', datafield: 'Id', cellsrenderer: cellsrenderer }
                ]
            });
        }
            var GridRows = $('#jqxgridProduct').jqxGrid('getrows');
            if(GridRows != null && GridRows != '')
            {
                var TotalRows = GridRows.length;
                if (GridRows.length > 0) {
                    for (var i = 0; i < GridRows.length; i++) {              //For Row
                        if(SelectedProductId == GridRows[i].Id ){
                            alert("Already added to the Grid") ;
                            // $("#Productdropdownlist").jqxDropDownList('clearSelection', true);
                            return;
                        }
                    }
                 }

            }

             var ProductCode = '';
             var name = '';
             var index = SelectedProduct.indexOf('|'); //Name|ProductCode(Sys-Cat)
             if (index == -1)
                 name = SelectedProduct;
             else
                 name = SelectedProduct.slice(0, index);

             var indexPC = SelectedProduct.indexOf('(');
             if (indexPC == -1)
                 ProductCode = ''
             else
                 ProductCode = SelectedProduct.slice(index + 1, indexPC);
             TotalProductCount++;
             $("#jqxgridProduct").jqxGrid('addrow', null, { ProductCode: ProductCode, Name: name, Id: SelectedProductId });
            //saving Request at this moment so that Added product can be displayed with the latest version.
            FnSaveData(false);
     }

    //function FnAddProduct(){
    //document.getElementById('ProductsDiv').style.display = 'block';
    //   var source = {
    //        dataType: "json",
    //        dataFields: [
    //            { name: 'ProductCode', type: 'string' },
    //            { name: 'CategoryName', type: 'string' },
    //            { name: 'SystemName', type: 'string' },
    //            { name: 'TicketNumer', type: 'string' },
    //            { name: 'AccountingScenario', type: 'string' },
    //            { name: 'Description', type: 'string' },
    //        ],
    //        id: "Id",
    //        url: "/LProducts/GetByCompanyCode"
    //    };

    // var dataAdapter = new $.jqx.dataAdapter(source);

    //            $('#jqxgrid').jqxGrid({
    //                source: dataAdapter,
    //                width: '100%',
    //                autoheight: true,
    //                theme: 'bootstrap',
    //                sortable: true,
    //                columnsresize: true,
    //                columnsreorder: true,
    //                altrows: true,
    //                pageable: true,
    //                filterable: true,
    //                autoshowcolumnsmenubutton: false,//down arrow always visible for filter and sorting
    //                selectionmode: 'checkbox',
    //                showstatusbar: false,
    //                ready: function () {
    //                },
    //                columns: [
    //                    { text: 'ProductCode', datafield: 'ProductCode' },
    //                    { text: 'CategoryName', datafield: 'CategoryName' },
    //                    { text: 'SystemName', datafield: 'SystemName' },
    //                    { text: 'TicketNumer', datafield: 'TicketNumer' },
    //                    { text: 'AccountingScenario', datafield: 'AccountingScenario' },
    //                    { text: 'Description', datafield: 'Description' },
    //                ]
    //            });
    //}
    function FnSaveData(IsClose)
    {

    if ($("#AttributeB01").length > 0){
            if(document.getElementById("AttributeB01").checked)
                   document.getElementById('AttributeB01').value =  true;
        }
        if ($("#AttributeB02").length > 0){
            if(document.getElementById('AttributeB02').checked)
                   document.getElementById('AttributeB02').value =  true;
        }
         if ($("#AttributeB03").length > 0){
             if(document.getElementById('AttributeB03').checked)
                   document.getElementById('AttributeB03').value =  true;
        }
         if ($("#AttributeB04").length > 0){
            if(document.getElementById('AttributeB04').checked)
                   document.getElementById('AttributeB04').value =  true;
        }
        if ($("#AttributeB05").length > 0){
            if(document.getElementById('AttributeB05').checked)
                   document.getElementById('AttributeB05').value =  true;
        }
    var SSPDate1 = null;
    var SSPDate2 = null;
    if ($("#AttributeD01").length > 0){
        SSPDate1 = $('#AttributeD01').jqxDateTimeInput('getText');
    }
     if ($("#AttributeD02").length > 0){
          SSPDate2 = $('#AttributeD02').jqxDateTimeInput('getText');
    }
    document.getElementById("SSPDate1").value = SSPDate1;
    document.getElementById("SSPDate2").value = SSPDate2;

    var AttributesList = '';
    $("#frm").validate();
         //store data in db
         if ($('#frm').valid()) {

             var GridArray = [];
             if (TotalProductCount != 0) {
                 var GridRows = $('#jqxgridProduct').jqxGrid('getrows');
                 var TotalRows = GridRows.length;
                 if (GridRows.length > 0) {
                     for (var i = 0; i < GridRows.length; i++) {              //For Row
                         GridArray[i] = [];
                         GridArray[i][0] = GridRows[i].Id;
                     }
                 }
             }
            var Form = $("#frm");
             $.ajax({
                 type: "POST",
                 cache: false,
                 data: Form.serialize() + "&GridArray=" + GridArray + "&CheckBoxAttributeValues=" + CheckBoxAttributeValues,
                 url: "/LRequests/SaveRequest",
                 success: function (data) {
                      if (data.ErrorMessage) {
                            if(data.ErrorMessage.substring("existing one").length > 0){
                                var r = confirm(data.ErrorMessage);
                                if (r == false) {
                                        document.getElementById("ContinueFlag").value = "";
                                        return;
                                }
                                else {
                                 document.getElementById("ContinueFlag").value = "Continue";
                                }
                            }
                            else{
                                alert(data.ErrorMessage);
                            }
                     }

                     else {
                         alert('Request updated sucessfully');
                          if (IsClose) {
                              window.location.href = "/GenericGrid/Index";
                          } else {
                              window.location.reload();
                          }
                     }
                 },
                 error: function (reponse) {
                   //  Console.log(reponse);
                     alert("error");

                 }//error block ends
             });// ajax call ends here
         }
             //if block ends here.
}
</script>



<div id="jqxLoader">
</div>
@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "frm", name = "frm", @encType = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
<div class="form-horizontal" id="frmhorizontal">
    <h4 class="text-danger">@ViewData["ErrorMessage"]</h4>
    <h4 class="text-danger" id="ErrorMessage"></h4>
    <h4 class="text-danger" id="ValidationMessage"></h4>
    @Html.Hidden("SSPDate1")
    @Html.Hidden("SSPDate2")
    @Html.Hidden("StepId")
    @Html.Hidden("Comments")
    @Html.Hidden("ContinueFlag")
    @Html.Hidden("WorkFlowId")
    @Html.Hidden("FormType")
    @Html.HiddenFor(m => m.CompanyCode)
    @Html.HiddenFor(m => m.Id)
    @Html.HiddenFor(m => m.CreatedById)
    @Html.HiddenFor(m => m.UpdatedById)
    @Html.HiddenFor(m => m.CreatedDateTime)
    @Html.HiddenFor(m => m.UpdatedDateTime)
    @Html.HiddenFor(m => m.SystemId)
    @Html.HiddenFor(m => m.Status)
    @Html.HiddenFor(m => m.WFOrdinal)
    @Html.HiddenFor(m => m.WFStatus)
    @Html.HiddenFor(m => m.WFType)
    @Html.HiddenFor(m => m.WFRequesterId)
    @Html.HiddenFor(m => m.WFRequesterRoleId)
    @Html.HiddenFor(m => m.WFAnalystId)
    @Html.HiddenFor(m => m.WFManagerId)
    @Html.HiddenFor(m => m.WFCurrentOwnerId)
    @Html.HiddenFor(m => m.WFStatusDateTime)
    <div class="col-md-10 col-lg-10">
        <div class="col-md-5 col-lg-5 " style="min-height:80px;">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "required col-md-11 col-lg-11 rely-labels", @style = "text-align: right;" })
            <div class="col-md-11 col-lg-11">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", @style = "text-align: left;" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="col-md-5 col-lg-5 " style="min-height:80px;">
            @Html.LabelFor(model => model.AuthorizationNumber, htmlAttributes: new { @class = " col-md-11 col-lg-11 rely-labels", @style = "text-align: right; " })
            <div class="col-md-11 col-lg-11">
                @Html.EditorFor(model => model.AuthorizationNumber, new { htmlAttributes = new { @class = "form-control", @style = "text-align: left;" } })
                @Html.ValidationMessageFor(model => model.AuthorizationNumber, "", new { @class = "text-danger" })
            </div>
        </div>


        @*<div class="col-md-4 col-lg-4 col-sm-12" style="min-height:80px;">
            @Html.LabelFor(model => model.SystemId, htmlAttributes: new { @class = " col-md-11 col-lg-11 rely-labels", @style = "text-align: right; " })
            <div class="col-md-11 col-lg-11">
                @Html.DropDownListFor(model => model.SystemId, null, "-- Select Here --", new { @class = "form-control", @style = "text-align: left;" })
                @Html.ValidationMessageFor(model => model.SystemId, "", new { @class = "text-danger" })
            </div>
        </div>*@

        <div class="col-md-12 col-lg-12" style="min-height:80px;">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "col-md-11 col-lg-11 rely-labels", @style = "text-align: left;" })
            <div class="col-md-11 col-lg-11">
                @Html.TextAreaFor(model => model.Description, new { @class = "form-control", @style = "min-width: 730px;min-height: 100px;" })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

    </div>

    <div class="col-md-1 col-lg-1" style="padding:0px;">
        <div>
            <button type="button" class="btn btn-borderRed-SideLayout btn-cons" id="BackButton" name="BackButton" onclick="window.location.href = '/GenericGrid/Index'">Back&nbsp;</button>
            <button type="button" class="btn btn-borderRed-SideLayout btn-cons" id="save" name="save" onclick=" FnSaveData(false);">Save</button>
            @*<button type="button" class="btn btn-borderRed-SideLayout btn-cons" id="save" name="save" onclick=" FnSaveData(true);">Save&Close</button>*@
            <label for="FileUpload" class="btn btn-borderRed-SideLayout btn-cons"> Attach</label>
            <button type="button" name="FileUpload" id="FileUpload" class="btn-red" style="display:none;"></button>
            <button type="button" name="ASMatrix" id="ASMatrix" class="btn btn-borderRed-SideLayout btn-cons" onclick="FnGetASMatrix();">Acc Scn Matrix</button>
            <button type="button" name="AccMemo" id="AccMemo" class="btn btn-borderRed-SideLayout btn-cons" onclick="FnGetAccMemo();">Acc Memo</button>
        </div>
        <div name="SecondaryFormButtons" id="SecondaryFormButtons">
            @Html.Raw(ViewBag.BottomButtons)
        </div>
    </div>

    <div class="col-md-12 col-lg-12" style="border-radius: 5px; border: 1px solid lightgrey;width:100%;margin-top:10px;" id="tabssection">
        <div id='jqxTabs' class="inner-tabs" style="margin-top:0px;">
            <ul class="nav nav-tabs tabs tabs-container-border ">
                <li style="margin-left: 30px;">Attributes</li>
                <li>Products</li>
                <li>Comments </li>
                <li>History</li>
                <li>Attached Files</li>
            </ul>
            <div class="tab-content" style="padding:10px;">
                <!--This Div is used for Attributes columns which will be populated from function GenerateCompanySpecificForm() defined in ProjectScript.cs -->
                <div id="DIVAttributeContainer" name="DIVAttributeContainer" class="col-md-12 col-lg-12">
                </div>
            </div>
            <div class="tab-content" style="padding:10px;" id="Products">
                @*<span style="font-size:smaller;color:chocolate;margin-left:33%">Clicking on Add Product button would save the request first.</span>*@
                <div class="col-md-12 col-lg-12 " style="display:flex;margin-bottom:10px;">
                    @*@Html.Label("Product : ", htmlAttributes: new { @class = "rely-labels" })*@
                    <a href="#" onclick="FnLoadProductsPopup()" style="margin-left:30px;display:none;">
                        <i class="fa fa-search" aria-hidden="true" title="zoom to select Product" style="color:#e60000;"></i>
                    </a>
                    <div class="col-md-3" style="min-height:30px;display:none;" id="DIVPayeeId">
                        <div class="col-md-11">
                            @Html.Editor("LProdId", new { htmlAttributes = new { @class = "form-control", style = "display:none;" } })
                            @Html.Editor("LProdCode", new { htmlAttributes = new { @class = "form-control", style = "pointer-Events:none;background:lightgray;", title = "this.value" } })

                        </div>
                    </div>

                    <button type="button" class="GridButton" id="savePob" name="savePob" onclick="FnLoadProductsPopup();">Attach</button>
                    &ensp;&nbsp;
                    <button type="button" class="GridButton" id="CreateProdLink" name="CreateProdLink" onclick="FnCreateNewProduct()">Create New Product and Attach&nbsp;</button>
                    @*<a href="#" id="CreateProdLink" name="CreateProdLink" style="padding-left:10px;vertical-align:top;" onclick="FnCreateNewProduct();">
            <span>
                Create New Product
            </span>
        </a>*@
                </div>

                <div id="jqxgridProduct"></div>

            </div>
            <div class="tab-content" style="padding:10px;">
                @Html.TextAreaFor(model => model.WFComments, new { @class = "form-control textarea1", @style = "min-height:120px;" })
            </div>
            <div class="tab-content" style="padding:10px;">
                @*<i class="fa fa-download" aria-hidden="true" title="Download" onclick="FnExportGrid()" id="HistoryDownload" style="cursor:pointer;font-size:15px !important;color:red"></i>*@
                <div id="jqxgridHistory"></div>
                <div class="col-lg-1 col-md-1" style="margin-top:10px;padding-left:0px;">
                    <button type="button" class="btn btn-red-SideLayout btn-cons" id="HistoryDownload" name="HistoryDownload" onclick=" FnExportGrid();">Download</button>
                </div>
            </div>
            <div class="tab-content" style="padding:10px;">
                <div id="jqxgrid"></div>
            </div>
        </div>
    </div>




    <div class="col-md-12">
        <br>


    </div>


</div>




}



@*This html code will use to apply loader in UI untill the processing will complete*@
    <div id="loadertext" class="modal fade" role="dialog">
        <div class="modal-dialog" style="width:20%;">
            <div class="modal-content">
                <div class="modal-body">
                    Processing....It may take some time to download requested file. Once downloaded, click anyware on the screen to continue.
                    @*<input type="button" class="btn btn-red" value="OK" data-dismiss="modal" />*@
                </div>

            </div>


        </div>
    </div>



@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

@*div for Upload Utility*@
<div id="dialog" style="display: none;width:100%" align="center">
    @Html.Partial("_UploadDocuments", (RELY_APP.ViewModel.FileUploaderParametersViewModel)ViewBag.FileUploaderParameters)
</div>

@*div for Survey Summary*@
<div id="dialogSurvey" style="display: none;width:100%" align="center">
    @Html.Partial("_SurveyIndex")
</div>
@Html.Partial("_ProductsListForRequest")
@*Section to display list of files which are currently uploaded in system for Upload Utility*@
<div class="col-md-8" id="FileDiv">
</div>

<script type="text/javascript" scr="~/Scripts/jquery-ui.js"></script>
<link href="~/Content/styles/jquery-ui.css" rel="stylesheet" type="text/css" />