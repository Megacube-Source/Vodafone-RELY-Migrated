
<div style="padding:10px;">
    @using (Html.BeginForm("SaveGridSelection", "LCompanySpecificColumns", FormMethod.Post, new { id = "frm", name = "frm" }))
    {
        @Html.AntiForgeryToken()
        @Html.Hidden("model")
        <div class="form-horizontal">
            <div class="col-md-5">
                @Html.Label("Select Table", new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @*@Html.DropDownList("TableName", new List<SelectListItem> { new SelectListItem { Text = "-- Select Here --", Value = null }, new SelectListItem { Text = "Requests", Value = "LRequests" }, new SelectListItem { Text = "Products", Value = "LProducts" }, new SelectListItem { Text = "ProductPobs", Value = "LProductPobs" }, new SelectListItem { Text = "ReferenceData", Value = "LReferenceData" }, new SelectListItem { Text = "LocalPOB", Value = "LLocalPobs" }, new SelectListItem { Text = "AccountingScenario", Value = "LAccountingScenarios" } }, new { @class = "form-control col-md-8", onchange = "GetSelecterType(this.value)" })*@
                    @Html.DropDownList("TableName", null, "-- Select Here --", new { @class = "form-control", @style = "text-align: left", onchange = "GetSelecterType(this.value)" })
                    @*&emsp;<input type="button" value="Go" class="btn btn-info">*@
                </div>
            </div>
            <div class="col-md-5">
                @Html.Label("Selecter Type", new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.DropDownList("SelectorType", new List<SelectListItem> { new SelectListItem { Text = "-- Select Here --", Value = null } }, new { @class = "form-control col-md-8",onchange="GetGrid()" })
                    @*&emsp;<input type="button" value="Go" class="btn btn-info">*@
                </div>
            </div>
           

        </div>
       
    }
   
        <br>&ensp;<br>
        <div id="jqxgrid">

        </div>
      
    <div class="col-md-12">
        <p style="color:red;display:none;" id="Note">
            NOTE: These Labels might have been used in structuring the extracts. Please be careful while changing them<br />
            Please see Attributes details below:
            <ul style="color:red;display:none;" id="Note1">
                <li>AttributeC -> String(max length 255)</li>
                <li>AttributeI -> Integer</li>
                <li>AttributeN -> Numeric</li>
                <li>AttributeB -> Boolean</li>
                <li>AttributeD -> Date</li>
                <li>AttributeM -> Multi-line(max length 4000)</li>
            </ul>
        </p>
    </div>
    <br>
        <button class="btn btn-red btn-cons" id="SaveButton" style="display:none;" onclick="SaveSelection()">Save &nbsp;</button>
    </div>

<div class="modal fade" id="myModal1" role="dialog">
    <div class="modal-dialog">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Select Dropdown</h4>
            </div>
            <div class="modal-body">

                @Html.DropDownList("DropdownId", null, "-- No Dropdown --", new { @class = "form-control " })
                &ensp;<br>
                <button type="button" class="btn btn-red btn-cons" data-dismiss="modal" onclick="AddColumnDetailToArray()">Save</button>
            </div>
        </div>

    </div>
</div>

@Scripts.Render("~/bundles/jqxgridbundle")
<script type="text/javascript" src="~/Scripts/jqxgrid.storage.js"></script>

<script type="text/javascript">
    $(document).ready(function () {


        if ('@TempData["Error"]') {
            alert('@TempData["Error"]')
        }

        if ('@TempData["Message"]') {
            alert('@TempData["Message"]')
        }
        // var selection=document.getElementById('')
        // GetGrid('Payee')
        if('@ViewBag.ChooseForm')
        {
            var FormValue = '@ViewBag.ChooseForm'
            GetGrid(FormValue)
        }

        $("#jqxgrid").on("bindingcomplete", function (event) {
            AddRowsToArray();
        });
    });


    //This method loads data in the Seleter type dropdown as per TableId passed as parameter
    function GetSelecterType(TableName)
    {
        $("#SelectorType").empty()
        if (TableName!='') {
            var procemessage = "<option value=null> Please wait...</option>";
            $("#SelectorType").html(procemessage).show();
            var url = "/LCompanySpecificColumns/GetSelecterTypeByTable/";

            $.ajax({
                url: url,
                data: {TableName:TableName },
                cache: false,
                type: "POST",
                success: function (data) {
                    if (data.length != 0) {
                        var markup = "<option value=null>-- Select Here --</option>";
                        for (var x = 0; x < data.length; x++) {
                            markup += "<option value=\"" + data[x]+ "\">" + data[x] + "</option>";
                        }
                        $("#SelectorType").html(markup).show();

                    } else {
                        var procemessage = "<option value=0> No Records Found..</option>";
                        $("#SelectorType").html(procemessage).show();
                    }
                },
                error: function (reponse) {
                    alert("error : " + reponse);
                }
            });
        }
    }

    function GetGrid() {
        document.getElementById('Note').style.display = 'block'
        document.getElementById('Note1').style.display = 'block'
    var TableName=document.getElementById('TableName').value;
  
    var SelectorType=document.getElementById('SelectorType').value;
        var dropdownSource = {
            dataType: "json",
            cache: false,
            dataFields: [
                { name: 'Id', type: 'string' },
                { name: 'LdName', type: 'string' }
            ],
            //id: "Id",
            url: "/LCompanySpecificColumns/GetLDropDowns/"
        };
        var dropdownlistAdapter = new $.jqx.dataAdapter(dropdownSource, { autoBind: true, async: false });
        var dropdownList = [];
        dropdownList.push({ LdName: 'No DropDown', Id:'' });
        for (var i = 0; i < dropdownlistAdapter.records.length; ++i) {
            dropdownList.push({ LdName: dropdownlistAdapter.records[i]['LdName'], Id: dropdownlistAdapter.records[i]['Id'] });
        }

        var source = {
            dataType: "json",
            cache: false,
            dataFields: [
                { name: 'Id', type: 'string' },
                { name: 'ColumnName', type: 'string' },
                 { name: 'IsNullable', type: 'string' },
                  { name: 'CanBeDisplayed', type: 'bool' },
                  { name: 'Label', type: 'string' },
                  { name: 'IsMandatory', type: 'bool' },
                  { name: 'DropDownId', type: 'int' },
                  { name: 'OrdinalPosition', type: 'int' },
                  { name: 'LdName', type: 'string' },
                 { name: 'IsReportParameter', type: 'bool' },
                { name: 'IsNullable', type: 'bool' },
                  { name: 'ReportParameterOrdinal', type: 'int' },
                { name: 'DataType', type: 'string' },
                { name: 'MaximumLength', type: 'string' },
                { name: 'DefaultValue', type: 'string' }, 
                { name: 'DisplayInGrid', type: 'bool' },
                { name: 'AuditEnabled', type: 'bool' },
            ],
            //id: "Id",
            data: { TableName: TableName,SelecterType:SelectorType },
            url: "/LCompanySpecificColumns/GetCompanySpecificColumnsGrid"
        };


        var dataAdapter = new $.jqx.dataAdapter(source);
        var cellsrenderer = function (row, columnfield, value, defaulthtml, rowdata, displayfield, columnproperties){
            console.log(displayfield)
            if (Boolean(displayfield.IsNullable) == true) {
                return 'Not Mandatory';
            } else {
                return 'Mandatory';
            }
        };

        var Actionscellsrenderer = function (row, columnfield, value, defaulthtml, columnproperties) {
            var RowData = $("#jqxgrid").jqxGrid('getrowdata', row);
            if (RowData.CanBeDisplayed == true && (RowData.ColumnName.indexOf('AttributeC')!=-1)) {
                return '&emsp;<button onclick="return FnAddDropdown()" class="GridButton">DropDown</button>';
            }
            else {
                return '&emsp;<button style="display:none;">DropDown</button>';
            }
        };

        //todisable checkbox
        var cellbeginedit = function (row, datafield, columntype, value) {
            var data = $('#jqxgrid').jqxGrid('getrowdata', row);

            if (data.IsMandatory == true) { alert("This Object is not modifiable"); return false; }

            return true;

        };

        $('#jqxgrid').bind('cellendedit', function (event) {
            // column data field.
            var dataField = event.args.datafield;
            // row's bound index.
            var rowBoundIndex = event.args.rowindex;
          //
            // alert(dataField)
            if (dataField == "CanBeDisplayed" || dataField =="IsMandatory"||dataField =="IsReportParameter") {
                // row's data.
                var rowData = args.row;
                if (rowData.IsNullable == false) {
                    //$("#jqxgrid").jqxGrid('setcellvalue', rowBoundIndex, "CanBeDisplayed", true);
                    //$("#jqxgrid").jqxGrid('setcellvalue', rowBoundIndex, "IsMandatory", true);
                   // $("#jqxgrid").jqxGrid('setcellvalue', rowBoundIndex, "IsReportParameter", true);do not default this column

                }
                else {
                    if (rowData.CanBeDisplayed == false)
                    {
                        //5) If 'Display on Form' is unchecked, then Is Mandatory should be unchecked and DropDown should be removed
                        $("#jqxgrid").jqxGrid('setcellvalue', rowBoundIndex, "IsMandatory", false);
                       $("#jqxgrid").jqxGrid('setcellvalue', rowBoundIndex, "IsReportParameter", false);
                        $("#jqxgrid").jqxGrid('setcellvalue', rowBoundIndex, "LdName", '');
                        arr[rowBoundIndex][4] = '';//removing dropdownfrom array
                    }
                }

                if (rowData.ColumnName == 'WFComments')
                {
                    $("#jqxgrid").jqxGrid('setcellvalue', rowBoundIndex, "CanBeDisplayed", true);
                    $("#jqxgrid").jqxGrid('setcellvalue', rowBoundIndex, "IsMandatory", false);
                  //As disscussed with JS these column values will always be false  for Make Manadatory and Report Parameter
                  $("#jqxgrid").jqxGrid('setcellvalue', rowBoundIndex, "IsReportParameter", false);
                }

            }

        });

        $('#jqxgrid').jqxGrid({
            source: dataAdapter,
            width: '100%',
            autoheight: false,
            height: '150%',
            theme: 'bootstrap',
            sortable: false,
            columnsresize: false,
            columnsreorder: false,
            altrows: true,
            showstatusbar: true,
            keyboardnavigation: true,
            //  selectionmode:'none',
            editable: true,
            ready: function () {

            },

            columns: [
                { text: 'Column Name', datafield: 'ColumnName', editable: false, width: '15%', pinned: true },
                { text: 'Label', columntype: 'textbox', datafield: 'Label', width: '20%'
                    , initeditor: function (row, column, editor) {
                        editor.attr('maxlength', 100);//max length of label is 100 chars
                    }
                },
                { text: 'Ordinal', datafield: 'OrdinalPosition', width: '10%' },
                { text: 'Display on Form', datafield: 'CanBeDisplayed', columntype: 'checkbox', width: '10%' },
                { text: 'Make Manadatory', datafield: 'IsMandatory', columntype: 'checkbox', width: '10%' },
                { text: 'DropDown', columntype: 'textbox', datafield: 'LdName', editable: false, width: '10%'},
                { text: 'Length', datafield: 'MaximumLength', width: '10%' },
                { text: 'Default Value', datafield: 'DefaultValue', width: '10%' },
                { text: 'DisplayInGrid', datafield: 'DisplayInGrid', columntype: 'checkbox', width: '10%' },
                //Commenting out this as Client has not demanded it yet
                //{ text: 'AuditEnabled', datafield: 'AuditEnabled', columntype: 'checkbox', width: '10%' },
                { text: 'Actions', datafield: 'Id', cellsrenderer: Actionscellsrenderer, editable: false }
            ]
        });

        //make save button visible
        document.getElementById('SaveButton').style.display = 'block'
    }

    //This function will open a popup to select dropdown
    function FnAddDropdown()
    {
        $("#myModal1").modal();
    }


    var arr = [];
    function SaveSelection() {
        var items = $('#jqxgrid').jqxGrid('getrows')
        //arr = [];
        //console.log(items)
        for (var i = 0; i < items.length; i++) {
            //arr[i] = [];
            arr[i][0] = items[i].ColumnName
            //On Submit check If Display on Form is checked then Label is manadatory.
            if ((items[i].Label == null || items[i].Label == '') && Boolean(items[i].CanBeDisplayed) == true) {
                alert('Please add Label for all selected columns')
                return;
            }
            arr[i][1] = items[i].Label == null ? '' : String(items[i].Label).split(',').join('.');//We are using comma to seperate values so cannot allow comma in label
            arr[i][2] = items[i].CanBeDisplayed
            arr[i][3] = items[i].IsMandatory
            arr[i][5] = items[i].OrdinalPosition
            arr[i][6] = items[i].IsReportParameter
            arr[i][7] = items[i].ReportParameterOrdinal
            arr[i][8] = items[i].DataType
            arr[i][9] = items[i].MaximumLength
            arr[i][10] = items[i].DefaultValue
            arr[i][11] = items[i].DisplayInGrid
            arr[i][12] = items[i].AuditEnabled
        }
        document.getElementById('model').value = arr;

        if (items.length > 0) {
            document.getElementById('frm').submit();
        }
    }

    //This function will be called onchangeevent of dropdown to save the value of dropdown selected by user
    function AddColumnDetailToArray()
    {
        var DropdownId = document.getElementById('DropdownId').value;
        var SelectedRow = $('#jqxgrid').jqxGrid('getselectedrowindex')
        //This validation is applied to prevent the dropdown id to be applied in incorrect row
        var ValueOfSelect = document.getElementById("DropdownId");
        var selectedText = ValueOfSelect.options[ValueOfSelect.selectedIndex].text;
        $("#jqxgrid").jqxGrid('setcellvalue', SelectedRow, "LdName", selectedText);
            arr[SelectedRow][4] = DropdownId;

    }

    //This function will add same no of array items as grid rows
    function AddRowsToArray() {
        var rows = $('#jqxgrid').jqxGrid('getrows');
        for (var i = 0; i < rows.length; i++) {
            arr[i] = [];
            if (rows[i].IsMandatory == true)//Make Make manadatory column true if column is manadatory in database
            {
                $("#jqxgrid").jqxGrid('setcellvalue', i, "CanBeDisplayed", true);
                arr[i][3] = true;//value for IsMandatory column
            }
            else {
                arr[i][3] = false;
            }

            if (rows[i].DropDownId) {
                arr[i][4] = rows[i].DropDownId;
            }
            else {
                arr[i][4] = '';
            }
            if (rows[i].ColumnName == 'WFComments') {
                $("#jqxgrid").jqxGrid('setcellvalue', i, "CanBeDisplayed", true);
                $("#jqxgrid").jqxGrid('setcellvalue', i, "IsMandatory", false);
       $("#jqxgrid").jqxGrid('setcellvalue', i, "IsReportParameter", false);
    //As disscussed with JS these column values will always be false  for Make Manadatory,Report Parameters
            }
        }
    }



</script>