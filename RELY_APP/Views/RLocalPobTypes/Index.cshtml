@model RELY_APP.ViewModel.RLocalPobTypeViewModel
<a style="cursor:pointer" onclick="fnShowPopUp();">Create</a>
<div id="jqxgrid">
</div>
<br>&ensp;<br>
@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "frm", name = "frm", @encType = "multipart/form-data" }))
{
    <!-- POP up window code-->
    <div id="localPOBpopup" class="modal fade" role="dialog">
        <div class="modal-dialog" style="width:90%">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <div id="ErrorMessage"></div>
                    <h4 class="modal-title" id="popupHeaderEdit">
                        Update Local POB Type
                    </h4>
                    <h4 class="modal-title" id="popupHeaderAdd">
                        Create Local POB Type
                    </h4>
                </div>
                <div class="modal-body">
                    @Html.HiddenFor(model => model.Id)
                    <div class="row">
                        <div class="container col-md-12">
                            <div class="col-sm-2 col-md-2 col-lg-2" style="padding-left:0px">
                                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "required" })
                                @*@Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "col-md-11 col-lg-11 rely-labels required", @style = "text-align: right;" })*@
                            </div>
                            <div class="col-sm-10 col-md-10 col-lg-10">
                                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control focus" } })
                                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-sm-2 col-md-2 col-lg-2" style="padding-left:0px;margin-top:10px">
                                @Html.LabelFor(model => model.Description)
                            </div>
                            <div class="col-sm-10 col-md-10 col-lg-10" style="margin-top:10px">
                                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    @*button on Edit pop up*@
                    <button id="btnedit" type="submit" class="btn btn-red pull-left" data-dismiss="modal">Save</button>

                    @*button on create pop up*@
                    <button id="btncreate" type="submit" class="btn btn-red pull-left" data-dismiss="modal">Create</button>
                </div>
            </div>
        </div>
    </div>
}
@Scripts.Render("~/bundles/jqueryval")
@Scripts.Render("~/bundles/jqxgridbundle")
    <script type="text/javascript">
    $('#localPOBpopup').on('shown.bs.modal', function () {
        $('.focus').focus();
    });
    $(document).ready(function () {
        $.ajax({
            data: { path: window.location.pathname },
            cache: false,
            url: "/Home/SaveReturnPath",
            dataType: "json",
            type: "POST",
            success: function (data) {
            },
            error: function (reponse) {
                //  alert("error : " + reponse);
            }
        });
        $("#btncreate").hide();
        $("#btnedit").hide();
        $("#popupHeaderAdd").hide();
        $("#popupHeaderEdit").hide();
        $("input.form-control").val('');  //to referesh modal pop up
        fnGetLocalPOBTypes();
    });
    function fnGetLocalPOBTypes() {
        var source = {
            dataType: "json",
            cache: false,
            dataFields: [
                { name: 'Id', type: 'int' },
                { name: 'CompanyCode', type: 'string' },
                { name: 'Name', type: 'string' },
                { name: 'Description', type: 'string' }
            ],
            id: "Id",
            url: "/RLocalPobTypes/GetRLocalPobTypes"
        };
        var dataAdapter = new $.jqx.dataAdapter(source);
        var cellsrenderer = function (row, columnfield, value, defaulthtml, columnproperties) {
            var rowdata = $('#jqxgrid').jqxGrid('getrowdata', row);
            if (Number(rowdata.Id) != 0 && rowdata.CompanyCode) {
                return '&emsp;<a href="#" onclick="FnDelete(' + rowdata.Id + ')"> <i class="fa fa-times" aria-hidden="true" style="color:#e60000;font-size:20px !important;" title="Delete"></i>&emsp;<a href="#" onclick="Edit(' + rowdata.Id +')"><i class="fa fa-pencil-square-o" style="color:red;font-size:15px !important;" aria-hidden="true"  title="Edit"></i>';
            }
        };

        $('#jqxgrid').jqxGrid({
            source: dataAdapter,
            width: "100%",
            columnsresize: true,
            altrows: true,
            pageable: true,
            pagesize: 200,
            filterable: true,
            autoshowcolumnsmenubutton: false,//down arrow always visible for filter and sorting
            sortable: true,
            altrows: true,
            selectionmode: 'multiplecellsadvanced',
            pagesizeoptions: ['10', '50', '100', '200', '500', '1000'],
            columns: [
                {
                    text: 'Name', datafield: 'Name'//, validateEverPresentRowWidgetValue: validateFunc, cellclassname: cellclass

                },
                {
                    text: 'Description', datafield: 'Description'//, filtertype: 'input', cellclassname: cellclass

                },
                {
                    text: 'Actions', datafield: 'Id', cellsrenderer: cellsrenderer, width: '10%',
                    initEverPresentRowWidget: function (datafield, htmlElement) {
                        var input = htmlElement.find('input');
                        input.attr('readonly', true);
                        input.attr('disabled', true);
                        htmlElement.addClass('jqx-fill-state-disabled');
                    }
                }
            ]

        });

    }
    function fnShowPopUp() {
        $("#btncreate").show();
        $("#btnedit").hide();
        $("#popupHeaderAdd").show();
        $("#popupHeaderEdit").hide();
        $("input.form-control").val('');
        $('.text-danger').text(""); /*to clear validation message*/
        $('#localPOBpopup').modal(); //modal pop up opens
    }
    //This method is called when User clicks on delete glymph in grid
    function FnDelete(Id)
    {
        var r = confirm("Are you sure to delete the selected LocalPOB Type?");
        if (r == false) {
            return;
        }
        else {
            $.ajax({
                data: { Id: Id },
                cache: false,
                url: "/RLocalPobTypes/Delete",
                traditional: true,
                success: function (data) {
                    if (data) {
                        if (data.ErrorMessage) {
                            alert(data.ErrorMessage);
                        }
                        else {
                            alert(data.PopupMessage);
                        }
                        fnGetLocalPOBTypes();
                    }
                    else {
                        //Any unhanded error has been caught
                        window.location.href = "/Home/Error";
                    }
                },
                error: function (reponse) {
                    console.log(reponse);
                    alert("error");  //  alert("error : " + reponse);
                }

            });
        }
    }
    //function to add new data
        $("#btncreate").click(function (event) {
        $("#frm").validate();
        if ($('#frm').valid()) {
            $("#btncreate").show();
            $("#popupHeaderAdd").show();
            $("#popupHeaderEdit").hide();
            $("#btnedit").hide();
            $.ajax({
                type: "POST",
                cache: false,
                data: $("#frm").serialize(),
                url: "/RLocalPobTypes/Create",
                success: function (data) {
                    if (data.PopupMessage) {
                        if (data.PopupMessage != "") {
                            alert(data.PopupMessage);
                            $('.modal-backdrop').remove(); /*blank screen hides after modal dismiss*/
                            fnGetLocalPOBTypes();
                        }
                    }
                    if (data.ErrorMessage) {
                        alert(data.ErrorMessage);
                        $("#localPOBpopup").modal({ "backdrop": "static" });
                    }
                },
                error: function (reponse) {
                    console.log(reponse);
                    alert("error");
                }
            });
        }
        else {
            event.stopPropagation();
        }
    });

   //this function is called on edit link click to edit the existing local pob
    function Edit(id) {
        $("#btncreate").hide();
        $("#popupHeaderAdd").hide();
        $("#popupHeaderEdit").show();
        $("#btnedit").show();
        $.ajax({
            type: "Get",
            cache:false,
            url: "/RLocalPobTypes/Edit",
            dataType: "html",
            data: { id: id },
            success: function (data) {
                var obj = JSON.parse(data);
                document.getElementById('Name').value = obj.Name;
                document.getElementById('Description').value = obj.Description;
                document.getElementById('Id').value = obj.Id;
                $("#localPOBpopup").modal("show");
                $("#localPOBpopup .modal-content").html(data.html);
            }
        });
        fnGetLocalPOBTypes();
    }

    //function to update the particular record
    $("#btnedit").click(function (event) {
         $("#frm").validate();
         if ($('#frm').valid()) {
         var id =  document.getElementById('Id').value;
            $.ajax({
                type: "POST",
                cache: false,
                data: $("#frm").serialize() + "&id=" + id ,
                url: '@Url.Action("Update", "RLocalPobTypes")',
                success: function (data) {
                    if (data.PopupMessage) {
                        if (data.PopupMessage != "") {
                            alert(data.PopupMessage);
                            $('.modal-backdrop').remove(); /*blank screen hides after modal dismiss*/
                            fnGetLocalPOBTypes();
                        }
                    }
                    if (data.ErrorMessage) {
                        alert(data.ErrorMessage);
                        $("#localPOBpopup").modal({ "backdrop": "static" });
                    }
                },
                error: function (reponse) {
                    console.log(reponse);
                    alert("error");
                }
            });
         }
         else {
             event.stopPropagation();
         }
    });

/*-------------------------Following methods are commented by Rakhi Singh on 31st july 2018-------------------------------------------------*/
    @*<input type="button" class="btn btn-red" value="Save" onclick="FnAddRLocalPobTypes();">*@
       //function Create() {
    //    $("#btncreate").show();
    //    $("#popupHeaderAdd").show();
    //    $("#popupHeaderEdit").hide();
    //    $("#btnedit").hide();
    //    $.ajax({
    //        type: "POST",
    //        data: $("#frm").serialize(),
    //        url: "/RLocalPobTypes/Create",
    //        success: function (data) {
    //            if (data.PopupMessage) {
    //                if (data.PopupMessage != "") {
    //                    alert(data.PopupMessage);
    //                    $('.modal-backdrop').remove(); /*blank screen hides after modal dismiss*/
    //                    fnGetLocalPOBTypes();
    //                }
    //            }
    //            if (data.ErrorMessage) {
    //                if (data.ErrorMessage == "Entity of type RLocalPobType in state Added has the following validation errors:- Property: Name, Error: The Name field is required.") {
    //                    alert(" The Name field is required");
    //                }
    //                else {
    //                    alert(data.ErrorMessage);
    //                }
    //                $("#localPOBpopup").modal({ "backdrop": "static" });
    //            }

    //        },
    //        error: function (reponse) {
    //            console.log(reponse);
    //            alert("error");
    //        }
    //    });

    //}

         //function Update() {
    //    var id =  document.getElementById('Id').value;
    //    $.ajax({
    //        type: "POST",
    //        data: $("#frm").serialize() + "&id=" + id ,
    //        url: "/RLocalPobTypes/Update",
    //        success: function (data) {
    //            if (data.PopupMessage) {
    //                if (data.PopupMessage != "") {
    //                    alert(data.PopupMessage);
    //                    $('.modal-backdrop').remove(); /*to clear blank screen after modal dismiss*/
    //                }
    //            }
    //            //if (data.ErrorMessage) {
    //            //    alert(data.ErrorMessage);
    //            //    $("#localPOBpopup").modal({ "backdrop": "static" });
    //            //}
    //            if (data.ErrorMessage) {
    //                if (data.ErrorMessage == "Entity of type RLocalPobType in state Added has the following validation errors:- Property: Name, Error: The Name field is required.") {
    //                    alert(" The Name field is required");
    //                }
    //                else {
    //                    alert(data.ErrorMessage);
    //                }
    //                $("#localPOBpopup").modal({ "backdrop": "static" });
    //            }
    //        },
    //        error: function (reponse) {
    //            console.log(reponse);
    //            alert("error");
    //        }
    //    });
    //    fnGetLocalPOBTypes();
    //}
        //function to delete unsaved grid row from grid
    //function FnDeleteGridRow(Id)
    //{
    //var commit = $("#jqxgrid").jqxGrid('deleterow', Id);
    //}


    // function FnAddRLocalPobTypes()
    //{
    //    var arr = [];
    //    var rows = $('#jqxgrid').jqxGrid('getrows');
    //    for (var i = 0; i < rows.length; i++)
    //    {
    //        arr[i] = [];
    //        arr[i][0] = rows[i].Id;
    //        arr[i][1] = rows[i].Name;
    //        arr[i][2] = rows[i].Description;
    //    }

    //    $.ajax({
    //        data: { GridData: arr },
    //        url: "/RLocalPobTypes/EditRLocalPobType",
    //        type: "POST",
    //        // traditional: true,
    //        success: function (data) {
    //            isChanged=false;
    //           // $('#jqxgrid').jqxGrid('updatebounddata');
    //            if (data) {
    //                if (data.ErrorMessage) {
    //                    alert(data.ErrorMessage);
    //                }
    //                else {
    //                    alert("Data Updated successfully");
    //                }
    //                window.location.reload();
    //            }
    //            else {
    //                //Any unhanded error has been caught
    //                window.location.href = "/Home/Error";
    //            }
    //        },
    //        error: function (reponse) {
    //            //  alert("error : " + reponse);
    //        }
    //    });
    // }

    @*
     <div id="GridModal" class="modal fade" role="dialog">
        <div class="modal-dialog modal-dialog-style">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title" id="PopupHeaderEDIT">
                        Update LocalPOB
                    </h4>
                    <h4 class="modal-title" id="PopupHeaderADD">
                        Add LocalPOB
                    </h4>
                </div>

                @Html.HiddenFor(model => model.Id)
                <div class="modal-body modal-body-style">
                    <div class="col-md-8 col-lg-8 col-sm-8">
                        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "labelstyle col-md-2 col-lg-2 rely-labels" })
                        <div class="col-md-8 col-lg-8">
                            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control " } })
                            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-8 col-lg-8 col-sm-8">
                        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "labelstyle col-md-2 col-lg-2 rely-labels" })
                        <div class="col-md-8 col-lg-8">
                            @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control fieldmargin" } })
                        </div>
                    </div>
                </div>

                <div class="modal-footer">
                    <button id="btnedit" type="submit" class="btn btn-red pull-left" data-dismiss="modal" onclick="Update();">Update</button>

                    <button id="btncreate" type="submit" class="btn btn-red pull-left" data-dismiss="modal" onclick="Save();">Save</button>
                </div>
            </div>
        </div>
    </div>
    *@
    </script>