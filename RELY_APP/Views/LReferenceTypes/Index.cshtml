@model RELY_APP.ViewModel.LReferenceTypesViewModel
<div id="ErrorMessage"></div>
<a style="cursor:pointer" onclick="fnShowPopUp();">Create</a>
<div id="jqxGridData"></div>
<br>&ensp;<br>
@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "frm", name = "frm", @encType = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    <!-- POP up window code-->
    <div id="refTypePopup" class="modal fade" role="dialog">
        <div class="modal-dialog" style="width:50%">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title" id="popupHeaderEdit">
                        Update Reference Type
                    </h4>
                    <h4 class="modal-title" id="popupHeaderAdd">
                        Create Reference Type
                    </h4>
                </div>
                <div class="modal-body">
                    @Html.HiddenFor(model => model.Id)
                    <div class="row">
                        <div class="container col-md-12">
                            <div class="col-sm-3 col-md-3 col-lg-3" style="padding-left:0px">
                                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "required" })
                            </div>
                            <div class="col-sm-8 col-md-8 col-lg-8">
                                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control focus" } })
                                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    @*button on Edit pop up*@
                    <button id="btnedit" type="submit" class="btn btn-red pull-left" data-dismiss="modal">Save</button>

                    @*button on create pop up*@
                    <button id="btncreate" type="submit" class="btn btn-red pull-left" data-dismiss="modal">Create</button>
                </div>
            </div>
        </div>
    </div>
}
@Scripts.Render("~/bundles/jqxgridbundle")
@Scripts.Render("~/bundles/jqueryval")
<script type="text/javascript">
    $('#refTypePopup').on('shown.bs.modal', function () {
        $('.focus').focus();
    });
     var isChanged=false;
     window.onbeforeunload = function () {
         if (isChanged) {
               // return "Are you sure you want to leave this page ? There are unsaved changes that will be lost"; @*window.location.href = '@HttpContext.Current.Session["from"]';*@
         }
     }
     $(document).ready(function () {
        $.ajax({
            data: { path: window.location.pathname },
            url: "/Home/SaveReturnPath",
            cache: false,
            dataType: "json",
            type: "POST",
            success: function (data) {
            },
            error: function (reponse) {
                //  alert("error : " + reponse);
            }
         });
        $("#btncreate").hide();
        $("#btnedit").hide();
        $("#popupHeaderAdd").hide();
        $("#popupHeaderEdit").hide();
        $("input.form-control").val('');  //to referesh modal pop up
        fnGetReferenceTypes();
     });
    //function to open the pop up
     function fnShowPopUp() {
         $("#btncreate").show();
         $("#btnedit").hide();
         $("#popupHeaderAdd").show();
         $("#popupHeaderEdit").hide();
         document.getElementById('Name').value = '';
         //$("input.form-control").val('');
         //$('.text-danger').text(""); /*to clear validation message*/
         $('#refTypePopup').modal("show"); //modal pop up opens
     }

    //function to load the data in grid and show on page
     function fnGetReferenceTypes() {
         var source = {
             dataType: "json",
             cache: false,
             dataFields: [
                 { name: 'Id', type: 'int' },
                 { name: 'Name', type: 'string' },
                 { name: 'IsEffectiveDated', type: 'bit' },
                 { name: 'CompanyCode', type: 'string' }
             ],
             id: "Id",
             url: "/LReferenceTypes/GetReferenceTypes"
         };
         var cellsrenderer = function (row, columnfield, value, defaulthtml, columnproperties) {
             var rowdata = $('#jqxGridData').jqxGrid('getrowdata', row);
             if (Number(rowdata.Id) != 0 && rowdata.CompanyCode) {
                 return '&emsp;<a href="#" onclick="FnDelete(' + rowdata.Id + ')"> <i class="fa fa-times" aria-hidden="true" style="color:#e60000;font-size:20px !important;" title="Delete"></i>&emsp;<a href="#" onclick="Edit(' + rowdata.Id + ')"><i class="fa fa-pencil-square-o" style="color:red;font-size:15px !important;" aria-hidden="true"  title="Edit"></i>';
             }
         };
         var dataAdapter = new $.jqx.dataAdapter(source);
         $('#jqxGridData').jqxGrid({
             source: dataAdapter,
             width: "100%",
             columnsresize: true,
             pageable: true,
             pagesize: 200,
             filterable: true,
             sortable: true,
             altrows: true,
             selectionmode: 'multiplecellsadvanced',
             pagesizeoptions: ['10', '50', '100', '200', '500', '1000'],
             columns: [
                 {
                     text: 'Name', datafield: 'Name'//, validateEverPresentRowWidgetValue: validateFunc, cellclassname: cellclass, width: '40%'

                 },
                 {
                     text: 'Actions', datafield: 'Id', cellsrenderer: cellsrenderer, width: '10%', editable: false, width: '40%',
                     initEverPresentRowWidget: function (datafield, htmlElement) {
                         var input = htmlElement.find('input');
                         input.attr('readonly', true);
                         input.attr('disabled', true);
                         htmlElement.addClass('jqx-fill-state-disabled');
                     }
                 }
             ]
         });

     }
     function FnDelete(Id) {
         var r = confirm("Are you sure to delete the selected Reference Type?");
         if (r == false) {
             return;
         }
         else {
             $.ajax({
                 data: { Id: Id },
                 cache: false,
                 url: "/LReferenceTypes/Delete",
                 traditional: true,
                 success: function (data) {
                     if (data) {
                         if (data.ErrorMessage) {
                             alert(data.ErrorMessage);
                         }
                         else {
                             alert(data.PopupMessage);
                         }
                         fnGetReferenceTypes();
                     }
                     else {
                         //Any unhanded error has been caught
                         window.location.href = "/Home/Error";
                     }
                 },
                 error: function (reponse) {
                     console.log(reponse);
                     alert("error");  //  alert("error : " + reponse);
                 }

             });
         }
     }

    //function to add new data
     $("#btncreate").click(function (event) {
         $("#frm").validate();
         if ($('#frm').valid()) {
             $("#btncreate").show();
             $("#popupHeaderAdd").show();
             $("#popupHeaderEdit").hide();
             $("#btnedit").hide();
             $.ajax({
                 type: "POST",
                 data: $("#frm").serialize(),
                 cache: false,
                 url: "/LReferenceTypes/Create",
                 success: function (data) {
                     if (data.PopupMessage) {
                         if (data.PopupMessage != "") {
                             alert(data.PopupMessage);
                             $('.modal-backdrop').remove(); /*blank screen hides after modal dismiss*/
                             fnGetReferenceTypes();
                         }
                     }
                     if (data.ErrorMessage) {
                         alert(data.ErrorMessage);
                         $("#refTypePopup").modal({ "backdrop": "static" });
                     }
                 },
                 error: function (reponse) {
                     console.log(reponse);
                     alert("error");
                 }
             });
         }
         else {
             event.stopPropagation();
         }
     });
    //this function is called on edit link click to edit the data
    function Edit(id) {
        $("#btncreate").hide();
        $("#popupHeaderAdd").hide();
        $("#popupHeaderEdit").show();
        $("#btnedit").show();
        $.ajax({
            type: "Get",
            cache: false,
            url: '@Url.Action("Edit", "LReferenceTypes")',
            dataType: "html",
            data: { id: id },
            success: function (data) {
                var obj = JSON.parse(data);
                document.getElementById('Name').value = obj.Name;
                document.getElementById('Id').value = obj.Id;
                $("#refTypePopup").modal("show");
                $("#refTypePopup .modal-content").html(data.html);
            }
        });
        fnGetReferenceTypes();
    }

   //this function is called on update button of modal to save the edited data
    $("#btnedit").click(function (event) {
         $("#frm").validate();
         if ($('#frm').valid()) {
         var id =  document.getElementById('Id').value;
            $.ajax({
                type: "POST",
                cache: false,
                data: $("#frm").serialize() + "&id=" + id ,
                url: '@Url.Action("Update", "LReferenceTypes")',
                success: function (data) {
                    if (data.PopupMessage) {
                        if (data.PopupMessage != "") {
                            alert(data.PopupMessage);
                            $('.modal-backdrop').remove(); /*blank screen hides after modal dismiss*/
                            fnGetReferenceTypes();
                        }
                    }
                    if (data.ErrorMessage) {
                        alert(data.ErrorMessage);
                        $("#refTypePopup").modal({ "backdrop": "static" });
                    }
                },
                error: function (reponse) {
                    console.log(reponse);
                    alert("error");
                }
            });
         }
         else {
             event.stopPropagation();
         }
    });


</script>