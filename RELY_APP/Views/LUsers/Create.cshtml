@model RELY_APP.ViewModel.LUserViewModel

<script src="~/Scripts/jqxloader.js"></script>
<script type="text/javascript" src="https://ajax.aspnetcdn.com/ajax/jquery.validate/1.7/jquery.validate.min.js"></script>
<script src="~/Scripts/ProjectScripts/ProjectScript.js"></script>@*//this script will contain methods common in different views*@
<link rel="stylesheet" href="~/Content/styles/labelStyle.css" type="text/css">
<script>
    var isChanged=false;
    $(document).ready(function () {

     //Add JqxLoader when form is submitted to disable further clicks
        $("#jqxLoader").jqxLoader({ isModal: true, width: 200, height: 150, imagePosition: 'center' });
        //The below code checks for changes in form controls and pdates the flag
        $('input,select,textarea').change(function () {
            isChanged = true;
        })
    var TransactionId='@Model.Id'
      var source = {
          dataType: "json",
          cache: false,
            dataFields: [
                { name: 'RoleName', type: 'string' },
                { name: 'Id', type: 'string' },
    { name: 'Select', type: 'bool' }
            ],

            id: "Id",
            data:{TransactionId:TransactionId},
            url: "/LUsers/GetRoles"
        };
        var dataAdapter = new $.jqx.dataAdapter(source);
        $("#jqxRoleGrid").jqxGrid({
            source: dataAdapter,
            width: '100%',
            height: 200,
            autoheight: true,
            theme: 'bootstrap',
            sortable: true,
            columnsresize: true,
            columnsreorder: true,
            altrows: true,
            pageable: false,
            filterable: true,
            showstatusbar: false,
            selectionmode: 'checkbox',
            ready: function () {
            },
            columns: [

                { text: 'Role', datafield: 'RoleName' }
            ]

        });

        $("#jqxRoleGrid").on("bindingcomplete", function (event) {
            var GridRows = $('#jqxRoleGrid').jqxGrid('getrows')

            for (var i = 0; i < GridRows.length; ++i) {
                if (GridRows[i].Select == true) {
                    // Number. The row's bound index.
                    $('#jqxRoleGrid').jqxGrid('selectrow', i);
                }
            }
        });

     // Create a jqxListBox
    //    $("#jqxListBox").jqxListBox({ width: '100%', source: dataAdapter, displayMember: "RoleName",valueMember:"Id", checkboxes: true, height: '30%' });
    //    $("#jqxListBox").on('checkChange', function (event) {
    //       var args = event.args;
    //        // get new check state.
    //      var checked = args.checked;
    //       // get the item and it's label and value fields.
    //      var item = args.item;
    //       var CheckedItems = $("#jqxListBox").jqxListBox('getCheckedItems');
    //       var CheckedList = "";
    //         $.each(CheckedItems, function (index) {
    //              if (index < CheckedItems.length - 1) {
    //                    CheckedList += this.value + ",";
    //               }
    //              else {
    //                  CheckedList += this.value;
    //               }

    //           });
    //       document.getElementById('RoleList').value = CheckedList;
    //       isChanged = true;
    //    });

    // $("#jqxListBox").on("bindingComplete", function (event) {
    //       var items = $("#jqxListBox").jqxListBox('getItems');
    //console.log(items)
    //        for (var i = 0; i < items.length; ++i) {
    //            if (items[i].originalItem.Select == true) {
    //                // Number. Index at which record is checked
    //$("#jqxListBox").jqxListBox('checkIndex', i);

    //            }
    //        }
    //    });


      var FormType = '@ViewBag.FormType';
    if (FormType == 'Review') {
           // $('#jqxListBox').jqxListBox({ disabled: true });
            $('*', 'form').prop('disabled', true);
            $('#SecondaryFormButtons :button').prop('disabled', false);
             $('#BackButton').removeAttr('disabled',false);
              $('#CommentsDIV').removeAttr('disabled',false);
            $('#WFComments').removeAttr('disabled',false);
            document.getElementById('RolesDiv').style.pointerEvents='none';
        }
        if (FormType == 'Edit' || FormType == 'Change') {
            document.getElementById('LoginEmail').style.backgroundColor = 'lightgray'
            document.getElementById('LoginEmail').style.pointerEvents = 'none';
            
        }
        if (FormType == 'Change') {
            document.getElementById('btnTerminate').style.display = 'block';
            }
    });
    
    //Code to handle click of bottom buttons
    function FnClickBottomButtons(ActionName, StepParticipantActionId, ActionUrl)
    {
     var WorkflowId = @ViewBag.WorkflowId;
     var StepId = @ViewBag.StepId;
        var TransactionId = @Model.Id;
        var GlobalComment = document.getElementById('WFComments').value;
        FnClickSecondaryButtons(ActionName, WorkflowId, StepId, null, TransactionId, GlobalComment, StepParticipantActionId, ActionUrl);

    }
    function FnTerminate() { 
        $.ajax({
                 type: "POST",
                 cache: false,
                 data: { Status: 'InActive', Id: @Model.Id },
                 url: "/LUsers/Terminate",
                 success: function (data) { 
                         window.location.href = "/GenericGrid/Index"; 
                 },
                 error: function (reponse) {
                     Console.log(reponse);
                 }
             });
    }
    function FnFinalSubmit()
    {
        var rows = $('#jqxRoleGrid').jqxGrid('selectedrowindexes');
        var RoleList = '';
        for (var i = 0; i < rows.length; i++) {
            var row = $("#jqxRoleGrid").jqxGrid('getrowdata', rows[i]);
            var RoleName = row.Id;
            RoleList += RoleName + ",";
        }
        var RoleNameList = RoleList.substring(0, RoleList.length - 1);
        document.getElementById('RoleList').value = RoleNameList;

    if(document.getElementById('RoleList').value)
    {
    $("#frm").validate({});
         if ($('#frm').valid()) {
             isChanged = false;
            //document.getElementById('frm').submit();
             $.ajax({
                 type: "POST",
                 cache: false,
                 data: $('#frm').serialize(),
                 url: "/LUsers/Create",
                 success: function (data) {

                     if (data == 'Success') {
                         alert("Data Updated successfully.")
                         window.location.href = "/GenericGrid/Index";

                     }
                     else {
                         alert(data);
                         return;
                     }
                 },
                 error: function (reponse) {
                     Console.log(reponse);
                 }
             });
    }
    }
    else
    {
    alert('Please select Role')
    }
    }
</script>

<div id="jqxLoader"></div>
@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "frm", name = "frm", @encType = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    @Html.Hidden("RoleList")
    @Html.HiddenFor(p => p.Id)
    @Html.HiddenFor(p => p.CompanyCode)
    @Html.HiddenFor(p => p.CreatedById)
    @Html.HiddenFor(p => p.CreatedDateTime)
    @Html.HiddenFor(p => p.UpdatedById)
    @Html.HiddenFor(p => p.UpdatedDateTime)
    @Html.HiddenFor(p => p.WFAnalystId)
    @Html.HiddenFor(p => p.WFManagerId)
    @Html.HiddenFor(p => p.WFCurrentOwnerId)
    @Html.HiddenFor(p => p.WFOrdinal)
    @Html.HiddenFor(p => p.WFStatus)
    @Html.HiddenFor(p => p.WFType)
    @Html.Hidden("StepId")
    @Html.Hidden("WorkFlowId")
    @*@Html.HiddenFor(p => p.WFComments)*@
    @Html.HiddenFor(p => p.Status)
    @Html.HiddenFor(p => p.WFRequesterId)
    @Html.HiddenFor(p => p.WFRequesterRoleId)
    @Html.HiddenFor(p => p.LockoutUntil)
    @Html.HiddenFor(p => p.ChangePwdAtNextLogin)
    @Html.Hidden("FormType")
<div class="form-horizontal">
    <h4 class="text-danger">@ViewData["ErrorMessage"]</h4>
    <h4 class="text-danger" id="ValidationMessage"></h4>

    @Html.HiddenFor(m => m.CompanyCode)
    <div class="col-md-11 col-lg-11">
        <div class="col-md-4 col-lg-4" style="min-height:80px;">
            @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "required col-md-10 rely-labels" })
            <div class="col-md-12 col-lg-12">
                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="col-md-4 col-lg-4" style="min-height:80px;">
            @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "col-md-10 rely-labels" })
            <div class="col-md-12 col-lg-12">
                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="col-md-4 col-lg-4" style="min-height:80px;">
            @Html.LabelFor(model => model.LoginEmail, htmlAttributes: new { @class = "col-md-10 required rely-labels" })
            <div class="col-md-12 col-lg-12">
                @Html.EditorFor(model => model.LoginEmail, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.LoginEmail, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="col-md-4 col-lg-4" style="min-height:80px;">
            @Html.LabelFor(model => model.Phone, htmlAttributes: new { @class = "col-md-10 rely-labels" })
            <div class="col-md-12 col-lg-12">
                @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="col-md-4 col-lg-4" style="min-height:80px;">
            @Html.LabelFor(model => model.BlockNotification, htmlAttributes: new { @class = "col-md-10 rely-labels" })
            <div class="col-md-12 col-lg-12">
                @Html.CheckBoxFor(model => model.BlockNotification, new { })
                @Html.ValidationMessageFor(model => model.BlockNotification, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="col-md-12 col-lg-12" style="min-height:80px;">
            @Html.Label("Roles", htmlAttributes: new { @class = "col-md-10 rely-labels required" })
            <div class="col-md-12 col-lg-12" style="min-height:80px;" id="RolesDiv">
                <div id="jqxRoleGrid"></div>
            </div>
        </div>

            <div class="col-md-12" id="CommentsDiv">
                <br>
                @Html.LabelFor(model => model.WFComments, htmlAttributes: new { @class = "col-md-10 rely-labels" })
                <textarea id="WFComments" name="WFComments" style="min-height:60px;" class=" textarea1">@Model.WFComments</textarea>

            </div>
        </div>
    <div class="col-md-1 col-lg-1" style="padding:0px;">
        <br>
        <button type="button" class="btn btn-borderRed-SideLayout btn-cons" id="BackButton" name="BackButton" onclick="window.location.href = '@HttpContext.Current.Session["from"]'">Back</button>
        <button type="button" class="btn btn-borderRed-SideLayout btn-cons" id="save" name="save" onclick=" FnFinalSubmit();">Save</button>
        <button type="button" class="btn btn-borderRed-SideLayout btn-cons" id="btnTerminate" name="btnTerminate" style="display:none;" onclick="FnTerminate();">Terminate</button>
        <div id="SecondaryFormButtons">
            @Html.Raw(ViewBag.BottomButtons)
        </div>
    </div>
    </div>
    }

    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
    }

