using RELY_API.Models;
using RELY_API.Utilities;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Validation;
using System.Data.SqlClient;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Threading.Tasks;
using System.Web;
using System.Web.Http;
using System.Web.Http.Description;

namespace RELY_API.Controllers
{
    public class RWorkFlowsController: ApiController
    {
        private RELYDevDbEntities db = new RELYDevDbEntities();

        public IHttpActionResult GetRWorkFlow(string CompanyCode)
        {
            var xx = (from aa in db.RWorkFlows.Where(p => p.CompanyCode == CompanyCode)
                      select new
                      {
                          aa.Id,
                          aa.Name,
                          aa.UILabel,aa.WFType,aa.BaseTableName,aa.CRWFName,aa.CRAllowed
                      }).OrderBy(p => p.Id);
            return Ok(xx);
        }
        public IHttpActionResult GetById(int Id)
        {
            var xx = (from aa in db.RWorkFlows.Where(p => p.Id == Id)
                      select new
                      {
                          aa.Id,
                          aa.Name,
                          aa.UILabel,
                          aa.WFType,
                          aa.BaseTableName,
                          aa.CRWFName,
                          aa.CRAllowed
                      }).FirstOrDefault();
            return Ok(xx);
        }


        public IHttpActionResult GetByName(string Name, string CompanyCode)
        {
            var xx = (from aa in db.RWorkFlows.Where(p => p.Name == Name).Where(p=>p.CompanyCode == CompanyCode)
                      select new
                      {
                          aa.Id,
                          aa.Name,
                          aa.UILabel,
                          aa.WFType,
                          aa.BaseTableName,
                          aa.CRWFName,
                          aa.CRAllowed,
                          aa.CompanyCode
                      }).FirstOrDefault();
            return Ok(xx);
        }

        public IHttpActionResult GetByWFType(string WFType, string CompanyCode)
        {
            var xx = (from aa in db.RWorkFlows.Where(p => p.WFType == WFType).Where(p => p.CompanyCode == CompanyCode)
                      select new
                      {
                          aa.Id,
                          aa.Name,
                          aa.UILabel,
                          aa.WFType,
                          aa.BaseTableName,
                          aa.CRWFName,
                          aa.CRAllowed,
                          aa.CompanyCode
                      }).FirstOrDefault();
            return Ok(xx);
        }

        [HttpPost]
        [ResponseType(typeof(RWorkFlow))]
        public async Task<IHttpActionResult> PostRWorkFlow(RWorkFlow model, string UserName, string WorkFlow)
        {
            if (!ModelState.IsValid)
            {
                throw new HttpResponseException(Request.CreateErrorResponse(HttpStatusCode.BadRequest, string.Format(Globals.BadRequestErrorMessage, "CREATE", "RWorkFlows")));
            }
            try
            {
                string BaseTableName = model.BaseTableName;
                int BaseTableCount = db.Database.SqlQuery<int>("select count(*) from INFORMATION_SCHEMA.TABLES where  TABLE_NAME={0}", BaseTableName).FirstOrDefault();
                if (BaseTableCount == 0)
                {
                    throw new HttpResponseException(Request.CreateErrorResponse((HttpStatusCode)Globals.ExceptionType.Type2, "BaseTable " + BaseTableName.ToUpper() + " does not exist in database" ));//type 2 error
                }
                if (db.RWorkFlows.Where(p => p.Id == model.Id).Count() > 0)
                {
                    db.Entry(model).State = EntityState.Modified;
                    await db.SaveChangesAsync();
                }
                else
                {
                    model.Id = 0;//To override the Id generated by grid
                    db.RWorkFlows.Add(model);
                    await db.SaveChangesAsync();
                }
            }
            catch (DbEntityValidationException dbex)
            {
                var errorMessage = Globals.GetEntityValidationErrorMessage(dbex);
                throw new HttpResponseException(Request.CreateErrorResponse((HttpStatusCode)Globals.ExceptionType.Type2, errorMessage));//type 2 error
            }
            catch (Exception ex)
            {
                if (ex.GetBaseException().GetType() == typeof(SqlException))//check for exception type
                {
                    //Throw this as HttpResponse Exception to let user know about the mistakes they made, correct them and retry.
                    throw new HttpResponseException(Request.CreateErrorResponse((HttpStatusCode)Globals.ExceptionType.Type2, GetCustomizedErrorMessage(ex)));//type 2 error
                }
                else
                {
                    throw ex;//This exception will be handled in FilterConfig's CustomHandler
                }
            }

            return Ok(model);
        }


        // PUT: api/RWorkFlows/5
        [ResponseType(typeof(void))]

        
        public async Task<IHttpActionResult> PutRWorkFlow(int id, RWorkFlow model, string UserName, string WorkFlow)
        {
            if (!ModelState.IsValid)
            {
                throw new HttpResponseException(Request.CreateErrorResponse(HttpStatusCode.BadRequest, string.Format(Globals.BadRequestErrorMessage, "UPDATE", "WORKFLOW")));
            }
            if (!RWorkFlowExists(id))
            {
                throw new HttpResponseException(Request.CreateErrorResponse(HttpStatusCode.NotFound, string.Format(Globals.NotFoundErrorMessage, "WORKFLOW")));
            }

            if (id != model.Id)
            {
                throw new HttpResponseException(Request.CreateErrorResponse(HttpStatusCode.BadRequest, string.Format(Globals.BadRequestErrorMessage, "UPDATE", "WORKFLOW")));
            }
            try
            {
                db.Entry(model).State = EntityState.Modified;
                await db.SaveChangesAsync();
            }
            catch (DbEntityValidationException dbex)
            {
                var errorMessage = Globals.GetEntityValidationErrorMessage(dbex);
                throw new HttpResponseException(Request.CreateErrorResponse((HttpStatusCode)Globals.ExceptionType.Type2, errorMessage));//type 2 error
            }
            catch (Exception ex)
            {
                if (ex.GetBaseException().GetType() == typeof(SqlException))//check for exception type
                {
                    //Throw this as HttpResponse Exception to let user know about the mistakes they made, correct them and retry.
                    throw new HttpResponseException(Request.CreateErrorResponse((HttpStatusCode)Globals.ExceptionType.Type2, GetCustomizedErrorMessage(ex)));//type 2 error
                }
                else
                {
                    throw ex;//This exception will be handled in FilterConfig's CustomHandler
                }
            }

            // return StatusCode(HttpStatusCode.NoContent);
            return Ok(model);
        }




        // DELETE: api/WSteps/5
        [ResponseType(typeof(WStep))]
        public async Task<IHttpActionResult> DeleteById(int id, string UserName, string WorkFlow)
        {
            RWorkFlow RWorkFlow = await db.RWorkFlows.FindAsync(id);
            if (RWorkFlow == null)
            {
                throw new HttpResponseException(Request.CreateErrorResponse(HttpStatusCode.NotFound, string.Format(Globals.NotFoundErrorMessage, "RWorkFlow")));
            }
            using (var transaction = db.Database.BeginTransaction())
            {
                try
                {
                    List<WStep> WSteps = db.WSteps.Where(a => a.WorkFlowId == id).ToList();
                    foreach (var step in WSteps)
                    {
                        List<WStepParticipant> wStepParticipant = db.WStepParticipants.Where(a => a.WStepId == step.Id).ToList();
                        //1. deleting all the WStepParticipantActions
                        foreach (var SP in wStepParticipant)
                        {
                            List<WStepParticipantAction> wStepParticipantAction =
                                db.WStepParticipantActions.Where(a => a.ParticipantId == SP.ParticipantId).Where(a => a.ShowInStepId == SP.WStepId).ToList();
                            db.WStepParticipantActions.RemoveRange(wStepParticipantAction);
                            await db.SaveChangesAsync();
                        }

                        //2. deleting all the WStepParticipants
                        db.WStepParticipants.RemoveRange(wStepParticipant);
                        await db.SaveChangesAsync();

                        //3. deleting all the WStepGridColumns
                        List<WStepGridColumn> wStepGridColumn = db.WStepGridColumns.Where(a => a.WStepId == step.Id).ToList();
                        db.WStepGridColumns.RemoveRange(wStepGridColumn);
                        await db.SaveChangesAsync();

                        //4. deleting the WStep
                        db.WSteps.Remove(step);
                        await db.SaveChangesAsync();
                    }
                    //5. deleting the RworkFlow
                    db.RWorkFlows.Remove(RWorkFlow);
                    await db.SaveChangesAsync();
                    transaction.Commit();
                }
                catch (Exception ex)
                {
                    transaction.Rollback();
                    if (ex.GetBaseException().GetType() == typeof(SqlException))//check for exception type
                    {
                        //Throw this as HttpResponse Exception to let user know about the mistakes they made, correct them and retry. 
                        throw new HttpResponseException(Request.CreateErrorResponse((HttpStatusCode)Globals.ExceptionType.Type2, GetCustomizedErrorMessage(ex)));//type 2 error
                    }
                    else
                    {
                        throw ex;
                    }
                }
            }
            return Ok(RWorkFlow);
        }


        //public IHttpActionResult GetCompletedItems(string sortdatafield, string sortorder, int pagesize, int pagenum, string FilterQuery)
        //{

        //    var SortQuery = "";
        //    if (!string.IsNullOrEmpty(sortdatafield))
        //    {
        //        SortQuery = " order by " + sortdatafield + " " + sortorder;
        //    }
        //    else
        //    {
        //        SortQuery = " ORDER BY CompanyCode desc";
        //    }
        //    string Qry = string.Empty;

        //    if (FilterQuery == null)
        //    {
        //        Qry = "SELECT * FROM(SELECT *, ROW_NUMBER() OVER (" + SortQuery + ") as datacount FROM(SELECT g.CompanyCode,ISNULL(a.LocalPobs, 0) as LocalPobs, ISNULL(b.Users, 0) as Users,ISNULL(c.RequestsPPM, 0) as RequestsPPM, "+
        //              "ISNULL(d.Products, 0) as Products,ISNULL(e.[References], 0) as [References],ISNULL(f.AccountingScenario, 0) as AccountingScenario "+
        //              "FROM GCompanies g left join (SELECT g.Id, count(*) as LocalPobs FROM RWorkFlows r INNER JOIN LLocalPobs llp on llp.WFType = r.WFType "+
        //              "INNER JOIN GCompanies g on g.CompanyCode = llp.CompanyCode where llp.WFStatus = 'completed' and llp.CreatedDateTime >= dateadd(dd, -90, getdate()) "+
        //              "GROUP BY g.Id)a on g.Id = a.Id left join (SELECT g.Id, count(*) as Users FROM RWorkFlows r  INNER JOIN LUsers lu on lu.WFType = r.WFType "+
        //              "INNER JOIN GCompanies g on g.CompanyCode = lu.CompanyCode where lu.WFStatus = 'completed' and lu.CreatedDateTime >= dateadd(dd, -90, getdate()) "+
        //              "GROUP BY g.Id)b on g.Id = b.Id left join (SELECT g.Id, count(*) as RequestsPPM FROM RWorkFlows r  INNER JOIN LRequests lr on lr.WFType = r.WFType "+
        //              "INNER JOIN GCompanies g on g.CompanyCode = lr.CompanyCode where lr.WFStatus = 'completed' and lr.CreatedDateTime >= dateadd(dd, -90, getdate()) "+
        //              "GROUP BY g.Id)c on g.Id = c.Id left join (SELECT g.Id, count(*) as Products FROM RWorkFlows r  INNER JOIN LProducts lp on lp.WFType = r.WFType "+
        //              "INNER JOIN GCompanies g on g.CompanyCode = lp.CompanyCode where lp.WFStatus = 'completed' and lp.CreatedDateTime >= dateadd(dd, -90, getdate()) "+
        //              "GROUP BY g.Id)d on g.Id = d.Id left join (SELECT g.Id, count(*) as [References] FROM RWorkFlows r INNER JOIN LReferences lref on lref.WFType = r.WFType "+           
        //              "INNER JOIN GCompanies g on g.CompanyCode = lref.CompanyCode where lref.WFStatus = 'completed' and lref.CreatedDateTime >= dateadd(dd, -90, getdate()) "+
        //              "GROUP BY g.Id)e on g.Id = e.Id left join (SELECT g.Id, count(*) as AccountingScenario FROM RWorkFlows r  INNER JOIN LAccountingScenarios la on la.WFType = r.WFType "+
        //              "INNER JOIN GCompanies g on g.CompanyCode = la.CompanyCode where la.WFStatus = 'completed' and la.CreatedDateTime >= dateadd(dd, -90, getdate()) "+
        //              "GROUP BY g.Id)f on g.Id = f.Id group by g.Id,g.CompanyCode, a.LocalPobs,b.Users,c.RequestsPPM,d.Products,e.[References],f.AccountingScenario)A " +
        //              ") B WHERE B.datacount > @P1 AND B.datacount <= @P2";

        //    }

        //    else
        //    {

        //        FilterQuery = "WHERE 1=1 " + FilterQuery;                

        //        Qry = "SELECT * FROM(SELECT *, ROW_NUMBER() OVER (" + SortQuery + ") as datacount FROM(SELECT g.CompanyCode,ISNULL(a.LocalPobs, 0) as LocalPobs, ISNULL(b.Users, 0) as Users,ISNULL(c.RequestsPPM, 0) as RequestsPPM, " +
        //             "ISNULL(d.Products, 0) as Products,ISNULL(e.[References], 0) as [References],ISNULL(f.AccountingScenario, 0) as AccountingScenario " +
        //             "FROM GCompanies g left join (SELECT g.Id, count(*) as LocalPobs FROM RWorkFlows r INNER JOIN LLocalPobs llp on llp.WFType = r.WFType " +
        //             "INNER JOIN GCompanies g on g.CompanyCode = llp.CompanyCode where llp.WFStatus = 'completed' and llp.CreatedDateTime >= dateadd(dd, -90, getdate()) " +
        //             "GROUP BY g.Id)a on g.Id = a.Id left join (SELECT g.Id, count(*) as Users FROM RWorkFlows r  INNER JOIN LUsers lu on lu.WFType = r.WFType " +
        //             "INNER JOIN GCompanies g on g.CompanyCode = lu.CompanyCode where lu.WFStatus = 'completed' and lu.CreatedDateTime >= dateadd(dd, -90, getdate()) " +
        //             "GROUP BY g.Id)b on g.Id = b.Id left join (SELECT g.Id, count(*) as RequestsPPM FROM RWorkFlows r  INNER JOIN LRequests lr on lr.WFType = r.WFType " +
        //             "INNER JOIN GCompanies g on g.CompanyCode = lr.CompanyCode where lr.WFStatus = 'completed' and lr.CreatedDateTime >= dateadd(dd, -90, getdate()) " +
        //             "GROUP BY g.Id)c on g.Id = c.Id left join (SELECT g.Id, count(*) as Products FROM RWorkFlows r  INNER JOIN LProducts lp on lp.WFType = r.WFType " +
        //             "INNER JOIN GCompanies g on g.CompanyCode = lp.CompanyCode where lp.WFStatus = 'completed' and lp.CreatedDateTime >= dateadd(dd, -90, getdate()) " +
        //             "GROUP BY g.Id)d on g.Id = d.Id left join (SELECT g.Id, count(*) as [References] FROM RWorkFlows r INNER JOIN LReferences lref on lref.WFType = r.WFType " +
        //             "INNER JOIN GCompanies g on g.CompanyCode = lref.CompanyCode where lref.WFStatus = 'completed' and lref.CreatedDateTime >= dateadd(dd, -90, getdate()) " +
        //             "GROUP BY g.Id)e on g.Id = e.Id left join (SELECT g.Id, count(*) as AccountingScenario FROM RWorkFlows r  INNER JOIN LAccountingScenarios la on la.WFType = r.WFType " +
        //             "INNER JOIN GCompanies g on g.CompanyCode = la.CompanyCode where la.WFStatus = 'completed' and la.CreatedDateTime >= dateadd(dd, -90, getdate()) " +
        //             "GROUP BY g.Id)f on g.Id = f.Id group by g.Id,g.CompanyCode, a.LocalPobs,b.Users,c.RequestsPPM,d.Products,e.[References],f.AccountingScenario)A " +
        //              FilterQuery + ") B WHERE B.datacount > @P1 AND B.datacount <= @P2";
        //    }

        //    List<SqlParameter> parameterList = new List<SqlParameter>();
        //    parameterList.Add(new SqlParameter("@P1", pagenum * pagesize));
        //    parameterList.Add(new SqlParameter("@P2", (pagenum + 1) * pagesize));
        //    SqlParameter[] parameters = parameterList.ToArray();
        //    var xx = db.Database.SqlQuery<RWorkFlowViewModel>(Qry, parameters).ToList();
        //    return Ok(xx);
        //}

        //public IHttpActionResult GetCountsForCompletedItems()
        //{
        //    string Qry = "SELECT g.CompanyCode,ISNULL(a.LocalPobs, 0) as LocalPobs, ISNULL(b.Users, 0) as Users,ISNULL(c.RequestsPPM, 0) as RequestsPPM, " +
        //             "ISNULL(d.Products, 0) as Products,ISNULL(e.[References], 0) as [References],ISNULL(f.AccountingScenario, 0) as AccountingScenario " +
        //             "FROM GCompanies g left join (SELECT g.Id, count(*) as LocalPobs FROM RWorkFlows r INNER JOIN LLocalPobs llp on llp.WFType = r.WFType " +
        //             "INNER JOIN GCompanies g on g.CompanyCode = llp.CompanyCode where llp.WFStatus = 'completed' and llp.CreatedDateTime >= dateadd(dd, -90, getdate()) " +
        //             "GROUP BY g.Id)a on g.Id = a.Id left join (SELECT g.Id, count(*) as Users FROM RWorkFlows r  INNER JOIN LUsers lu on lu.WFType = r.WFType " +
        //             "INNER JOIN GCompanies g on g.CompanyCode = lu.CompanyCode where lu.WFStatus = 'completed' and lu.CreatedDateTime >= dateadd(dd, -90, getdate()) " +
        //             "GROUP BY g.Id)b on g.Id = b.Id left join (SELECT g.Id, count(*) as RequestsPPM FROM RWorkFlows r  INNER JOIN LRequests lr on lr.WFType = r.WFType " +
        //             "INNER JOIN GCompanies g on g.CompanyCode = lr.CompanyCode where lr.WFStatus = 'completed' and lr.CreatedDateTime >= dateadd(dd, -90, getdate()) " +
        //             "GROUP BY g.Id)c on g.Id = c.Id left join (SELECT g.Id, count(*) as Products FROM RWorkFlows r  INNER JOIN LProducts lp on lp.WFType = r.WFType " +
        //             "INNER JOIN GCompanies g on g.CompanyCode = lp.CompanyCode where lp.WFStatus = 'completed' and lp.CreatedDateTime >= dateadd(dd, -90, getdate()) " +
        //             "GROUP BY g.Id)d on g.Id = d.Id left join (SELECT g.Id, count(*) as [References] FROM RWorkFlows r INNER JOIN LReferences lref on lref.WFType = r.WFType " +
        //             "INNER JOIN GCompanies g on g.CompanyCode = lref.CompanyCode where lref.WFStatus = 'completed' and lref.CreatedDateTime >= dateadd(dd, -90, getdate()) " +
        //             "GROUP BY g.Id)e on g.Id = e.Id left join (SELECT g.Id, count(*) as AccountingScenario FROM RWorkFlows r  INNER JOIN LAccountingScenarios la on la.WFType = r.WFType " +
        //             "INNER JOIN GCompanies g on g.CompanyCode = la.CompanyCode where la.WFStatus = 'completed' and la.CreatedDateTime >= dateadd(dd, -90, getdate()) " +
        //             "GROUP BY g.Id)f on g.Id = f.Id group by g.Id,g.CompanyCode, a.LocalPobs,b.Users,c.RequestsPPM,d.Products,e.[References],f.AccountingScenario";

        //    var xx = db.Database.SqlQuery<RWorkFlowViewModel>(Qry).Count();
        //    return Ok(xx);
        //}


        public async Task<IHttpActionResult> GetDataForCompletedItems(string sortdatafield, string sortorder, int pagesize, int pagenum, string FilterQuery)
        {
            var Query = "Exec [spGetCompletedItems] @pagesize,@pagenum,@sortdatafield,@sortorder,@FilterQuery";
            SqlCommand cmd = new SqlCommand(Query);
            cmd.Parameters.AddWithValue("@pagesize", pagesize);
            cmd.Parameters.AddWithValue("@pagenum", pagenum);
            cmd.Parameters.AddWithValue("@sortdatafield", string.IsNullOrEmpty(sortdatafield) ? (object)System.DBNull.Value : sortdatafield);
            cmd.Parameters.AddWithValue("@sortorder", string.IsNullOrEmpty(sortorder) ? (object)System.DBNull.Value : sortorder);
            cmd.Parameters.AddWithValue("@FilterQuery", string.IsNullOrEmpty(FilterQuery) ? (object)System.DBNull.Value : FilterQuery);
            
            var dt = Globals.GetDataTableUsingADO(cmd);
            dt.Columns.Remove("datacount");
            return Ok(dt);
        }

        public async Task<IHttpActionResult> GetCountsForCompletedItems()
        {
            var Query = "Exec [spGetCompletedItemsCounts]";
            SqlCommand cmd = new SqlCommand(Query);
            var dt = Globals.GetDataTableUsingADO(cmd);
            //dt.Columns.Remove("datacount");
            var count = dt.Rows.Count;           
            return Ok(count);
        }

        [HttpGet]
        public async Task<IHttpActionResult> GetCompletedListcolumnlist(string sortdatafield, string sortorder, int pagesize, int pagenum, string FilterQuery)
        {
            var Query = "Exec [spGetCompletedItems] @pagesize,@pagenum,@sortdatafield,@sortorder,@FilterQuery";
            SqlCommand cmd = new SqlCommand(Query);
            cmd.Parameters.AddWithValue("@pagesize", pagesize);
            cmd.Parameters.AddWithValue("@pagenum", pagenum);
            cmd.Parameters.AddWithValue("@sortdatafield", string.IsNullOrEmpty(sortdatafield) ? (object)System.DBNull.Value : sortdatafield);
            cmd.Parameters.AddWithValue("@sortorder", string.IsNullOrEmpty(sortorder) ? (object)System.DBNull.Value : sortorder);
            cmd.Parameters.AddWithValue("@FilterQuery", string.IsNullOrEmpty(FilterQuery) ? (object)System.DBNull.Value : FilterQuery);
            
            var dt = Globals.GetDataTableUsingADO(cmd);
            dt.Columns.Remove("datacount");
            string[] columnNames = dt.Columns.Cast<DataColumn>()
                                 .Select(x => x.ColumnName)
                                 .ToArray();
            
            return Ok(columnNames);
        }

        private bool RWorkFlowExists(int id)
        {
            return db.RWorkFlows.Count(e => e.Id == id) > 0;
        }


        private string GetCustomizedErrorMessage(Exception ex)
        {
            //Convert the exception to SqlException to get the error message returned by database.
            var SqEx = ex.GetBaseException() as SqlException;
            if (SqEx.Message.IndexOf("UQ_RWorkFlows_Name", StringComparison.OrdinalIgnoreCase) >= 0)
                return (string.Format(Globals.CannotInsertDuplicateErrorMessage, "WorkFlows"));
            else
            {
                //Something else failed return original error message as retrieved from database
                //Add complete Url in description
                var UserName = "";//System.Web.HttpContext.Current.Session["UserName"] as string;
                string UrlString = Convert.ToString(Request.RequestUri.AbsolutePath);
                var ErrorDesc = "";
                var Desc = Request.GetQueryNameValuePairs().ToDictionary(x => x.Key, x => x.Value);
                if (Desc.Count() > 0)
                    ErrorDesc = string.Join(",", Desc);
                string[] s = Request.RequestUri.AbsolutePath.Split('/');//This array will provide controller name at 2nd and action name at 3 rd index position
                //db.SpLogError("RELY-API", s[2], s[3], SqEx.Message, UserName, "Type2", ErrorDesc, "resolution", "L2Admin", "field", 0, "New");
                //return Globals.SomethingElseFailedInDBErrorMessage;
             ObjectParameter Result = new ObjectParameter("Result", typeof(int)); //return parameter is declared
                db.SpLogError("RELY-API", s[2], s[3], SqEx.Message, UserName, "Type2", ErrorDesc, "resolution", "L2Admin", "field", 0, "New", Result).FirstOrDefault();
                int errorid = (int)Result.Value; //getting value of output parameter
                //return Globals.SomethingElseFailedInDBErrorMessage;
                return (string.Format(Globals.SomethingElseFailedInDBErrorMessage, errorid));
            }
        }

    }
}