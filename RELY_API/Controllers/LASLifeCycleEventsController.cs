using RELY_API.Models;
using RELY_API.Utilities;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data.Entity;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Validation;
using System.Data.SqlClient;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Threading.Tasks;
using System.Web.Http;

namespace RELY_API.Controllers
{

    [CustomExceptionFilter]
    public class LASLifeCycleEventsController : ApiController
    {
        private RELYDevDbEntities db = new RELYDevDbEntities();

        public IHttpActionResult GetByASId(int ASId)
        {
            var yy = (from le in db.LASLifecycleEvents.Where(aa => aa.AccountingScenarioId == ASId)
                      join lv in db.LDropDownValues on le.EventId equals lv.Id
                      join lv1 in db.LDropDownValues on le.NatureId equals lv1.Id
                      select new
                      {
                           le.Id,le.NatureId,le.EventId,le.Notes,le.Ordinal,EventValue = lv.Value,
                           NatureValue = lv1.Value
                      });

            //var xx = db.LASLifecycleEvents.Where(p => p.AccountingScenarioId == ASId).ToList();
            return Ok(yy);
        }

        /// <summary>
        /// Method to get the names of Nature and Event to show in download file. 
        /// </summary>
        /// <param name="ASId"></param>
        /// <returns></returns>
        public IHttpActionResult GetNamesByASId(int ASId)
        {
            var yy = (from le in db.LASLifecycleEvents.Where(aa => aa.AccountingScenarioId == ASId)
                      join lv in db.LDropDownValues on le.EventId equals lv.Id
                      join lv1 in db.LDropDownValues on le.NatureId equals lv1.Id
                      select new
                      {
                        le.Ordinal,
                        EventValue = lv.Value,
                        NatureValue = lv1.Value,
                        le.Notes
                      });

            //var xx = db.LASLifecycleEvents.Where(p => p.AccountingScenarioId == ASId).ToList();
            return Ok(yy);
        }
        public async Task<IHttpActionResult> PostLASLifecycleEvent(List<LASLifecycleEvent> LASLifecycleEvent, string UserName, string WorkFlow)
        {
            if (!ModelState.IsValid)
            {
                throw new HttpResponseException(Request.CreateErrorResponse(HttpStatusCode.BadRequest, string.Format(Globals.BadRequestErrorMessage, "CREATE", "LifeCycleEvent")));
            }

            using (var transaction = db.Database.BeginTransaction())
            {
                try
                {
                    foreach (var model in LASLifecycleEvent)
                    {

                        if (db.LASLifecycleEvents.Where(p => p.Id == model.Id).Where(p => p.AccountingScenarioId == model.AccountingScenarioId).Count() > 0)
                        {
                            db.Entry(model).State = EntityState.Modified;
                            await db.SaveChangesAsync();
                        }
                        else
                        {
                            model.Id = 0;//To override the Id generated by grid
                            db.LASLifecycleEvents.Add(model);
                            await db.SaveChangesAsync();
                        }
                        
                    }
                    db.SaveChanges();

                }
                catch (DbEntityValidationException dbex)
                {
                    transaction.Rollback();
                    var errorMessage = Globals.GetEntityValidationErrorMessage(dbex);
                    throw new HttpResponseException(Request.CreateErrorResponse((HttpStatusCode)Globals.ExceptionType.Type2, errorMessage));//type 2 error
                }
                catch (Exception ex)
                {
                    transaction.Rollback();
                    if (ex.GetBaseException().GetType() == typeof(SqlException))//check for exception type
                    {
                        //Throw this as HttpResponse Exception to let user know about the mistakes they made, correct them and retry.
                        throw new HttpResponseException(Request.CreateErrorResponse((HttpStatusCode)Globals.ExceptionType.Type2, GetCustomizedErrorMessage(ex)));//type 2 error
                    }
                    else
                    {
                        throw ex;//This exception will be handled in FilterConfig's CustomHandler
                    }
                }

                transaction.Commit();
            }

            // return CreatedAtRoute("DefaultApi", new { id = LASLifecycleEvent.Id }, LASLifecycleEvent);
            return Ok();
        }


        private string GetCustomizedErrorMessage(Exception ex)
        {
            //Convert the exception to SqlException to get the error message returned by database.
            var SqEx = ex.GetBaseException() as SqlException;
            //Depending upon the constraint failed return appropriate error message
            if (SqEx.Message.IndexOf("[UQ_LAccountingScenario_Reference]", StringComparison.OrdinalIgnoreCase) >= 0)
                return (string.Format(Globals.CannotInsertDuplicateErrorMessage, "ACCOUNTING SCENARIO"));
            else
            {
                //Something else failed return original error message as retrieved from database
                //Add complete Url in description
                var UserName = "";//System.Web.HttpContext.Current.Session["UserName"] as string;
                string UrlString = Convert.ToString(Request.RequestUri.AbsolutePath);
                var ErrorDesc = "";
                var Desc = Request.GetQueryNameValuePairs().ToDictionary(x => x.Key, x => x.Value);
                if (Desc.Count() > 0)
                    ErrorDesc = string.Join(",", Desc);
                string[] s = Request.RequestUri.AbsolutePath.Split('/');//This array will provide controller name at 2nd and action name at 3rd index position
                //db.SpLogError("RELY-API", s[2], s[3], SqEx.Message, UserName, "Type2", ErrorDesc, "resolution", "L2Admin", "field", 0, "New");
                //return Globals.SomethingElseFailedInDBErrorMessage;

             ObjectParameter Result = new ObjectParameter("Result", typeof(int)); //return parameter is declared
                db.SpLogError("RELY-API", s[2], s[3], SqEx.Message, UserName, "Type2", ErrorDesc, "resolution", "L2Admin", "field", 0, "New", Result).FirstOrDefault();
                int errorid = (int)Result.Value; //getting value of output parameter
                //return Globals.SomethingElseFailedInDBErrorMessage;
                return (string.Format(Globals.SomethingElseFailedInDBErrorMessage, errorid));
            }
        }

    }
}