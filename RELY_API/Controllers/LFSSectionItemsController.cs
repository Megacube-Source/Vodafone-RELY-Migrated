using RELY_API.Models;
using RELY_API.Utilities;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.Entity;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Validation;
using System.Data.SqlClient;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Threading.Tasks;
using System.Web.Http;
using System.Web.Http.Description;

namespace RELY_API.Controllers
{
    [CustomExceptionFilter]
    public class LFSSectionItemsController : ApiController
    {
        private RELYDevDbEntities db = new RELYDevDbEntities();

        public IHttpActionResult GetTableItemsCountForSection(string SectionCode, string ChapterCode,int SurveyId, string UserName, string WorkFlow)
        {
            var qry = "select count(*) from LFSSectionItems si left outer join LFSItemTypes it on si.ItemTypeId = it.Id where it.Name='TABLE' and  SectionCode={0} and ChapterCode={1} and si.SurveyId={2} ";
            int Count = db.Database.SqlQuery<int>(qry,SectionCode,ChapterCode, SurveyId).FirstOrDefault();
            return Ok(Count);
        }
        public IHttpActionResult GetItemsCountExcludingTable(string SectionCode, string ChapterCode, int SurveyId, string UserName, string WorkFlow)
        {
            var qry = "select count(*) from LFSSectionItems si left outer join LFSItemTypes it on si.ItemTypeId = it.Id where it.Name Not in('TABLE','CONCLUSION','L1_TITLE','L2_TITLE','L3_TITLE','TEXT_HEADING','TEXT') and  SectionCode={0} and ChapterCode={1} and si.SurveyId={2} ";
            var Count = db.Database.SqlQuery<int>(qry, SectionCode, ChapterCode, SurveyId).FirstOrDefault();
            return Ok(Count);
        }

        // GET: api/LFSSectionItems? Id
        //Method to Get Data in Grid

        public IHttpActionResult GetLFSSectionItemsById(int Id, string UserName, string WorkFlow)
        {
            var xx = (from aa in db.LFSSectionItems.Where(p => p.Id == Id)
                      select new
                      {
                          aa.Id,
                          aa.SurveyId,
                          aa.ChapterCode,
                          aa.SectionCode,
                          aa.QuestionCode,
                          aa.ItemTypeId,
                          aa.ItemText,
                          aa.Ordinal,
                          aa.NestingLevel,
                          aa.IsResponseMandatory,
                          aa.IsReponseAutoGenerated,
                          aa.ShowOnQuestionCode,
                          aa.ShowOnAnswerOption,
                          aa.SumOfQuestions,
                          aa.Operator,
                          aa.SumValue,
                          aa.AutomatedResponseTrueValue,
                          aa.AutomatedResponseFalseValue,
                          aa.RelatedQuestionCode,
                          aa.ShowOnAccountingMemo,
                          aa.CreatedById,
                          aa.CreatedDateTime,
                          aa.UpdatedById,
                          aa.UpdatedDateTime
                      }).OrderBy(p => p.Id);
            return Ok(xx);
        }

        public IHttpActionResult GetLFSSectionItem()
        {
            var xx = (from aa in db.LFSSectionItems
                      join Item in db.LFSItemTypes on aa.ItemTypeId equals Item.Id
                      join LF in db.LFinancialSurveys on aa.SurveyId equals LF.Id
                        select new
                      {
                          aa.Id,
                          aa.SurveyId,
                          aa.ChapterCode,
                          aa.SectionCode,
                          aa.QuestionCode,
                          aa.ItemTypeId,
                          aa.TableCode,
                          ItemTypeName=Item.Name,
                          aa.ItemText,
                          aa.Ordinal,
                          Survey = LF.SurveyName,
                          aa.NestingLevel,
                          aa.IsResponseMandatory,
                          aa.IsReponseAutoGenerated,
                          aa.ShowOnQuestionCode,
                          aa.ShowOnAnswerOption,
                          aa.SumOfQuestions,
                          aa.Operator,
                          aa.SumValue,
                          aa.AutomatedResponseTrueValue,
                          aa.AutomatedResponseFalseValue,
                          aa.RelatedQuestionCode,
                          aa.ShowOnAccountingMemo,
                          aa.InternalNotes,
                          aa.CreatedById,
                          aa.CreatedDateTime,
                          aa.UpdatedById,
                          aa.UpdatedDateTime
                         

                        }).OrderBy(p => p.Id);
            return Ok(xx);
        }

        // GET: api/LFinancialSurveys? CompanyCode
        //Method to Get Surveys
        public IHttpActionResult GetSurveyName(string CompanyCode)
        {

            var xx = (from aa in db.LFinancialSurveys.Where(p => p.CompanyCode == CompanyCode)
                      select new
                      {
                          aa.Id,
                          aa.SurveyName,
                      }).OrderBy(p => p.SurveyName);
            return Ok(xx);
            //db.Database.ExecuteSqlCommand("select Id,SurveyName from LFinancialSurveys where CompanyCode={0}",CompanyCode);
            ////var SurveyName = db.Database.SqlQuery<LFinancialSurvey>(query, CompanyCode).ToList();
            //return Ok();
        }

        // GET: api/LFSSectionItems? SectionId
        //Method to Get Data in Grid

        public IHttpActionResult GetLFSSectionItemsBySectionCode(string SectionCode, string ChapterCode,int EntityId,string EntityType, int SurveyId, string CompanyCode,string UserName, string WorkFlow)
        {

            string strQuery = "exec dbo.[SpGenerateSectionData] @SurveyId,@EntityId,@EntityType,@CompanyCode,@ChapterCode,@SectionCode";
            SqlCommand cmd = new SqlCommand(strQuery);
            cmd.Parameters.AddWithValue("@SurveyId", SurveyId);
            cmd.Parameters.AddWithValue("@EntityId", EntityId);
            cmd.Parameters.AddWithValue("@EntityType", EntityType);
            cmd.Parameters.AddWithValue("@CompanyCode", CompanyCode);
            cmd.Parameters.AddWithValue("@ChapterCode", ChapterCode);
            cmd.Parameters.AddWithValue("@SectionCode", SectionCode);
            var dt = new DataTable();
            // dt.Load(dataReader);
            dt = Globals.GetDataTableUsingADO(cmd);
            //return Ok(dt);

          //  var ApiData =  db.SpGenerateSectionData(SurveyId, EntityId, EntityType, CompanyCode, ChapterCode, SectionCode);

            /*  var strQRy = "SELECT res.Response,bb.IsQuestion,aa.Id,aa.SurveyId,aa.SectionCode,aa.ChapterCode, aa.QuestionCode,aa.ItemTypeId,ItemText = ISNULL(qb.QuestionText,aa.ItemText),aa.Ordinal,aa.NestingLevel,"
                            + "qb.ToolTip,aa.IsResponseMandatory,aa.IsReponseAutoGenerated,aa.ShowOnQuestionCode,aa.ShowOnAnswerOption,aa.SumOfQuestions,aa.Operator,aa.SumValue,"
                            + "aa.AutomatedResponseValue,aa.RelatedQuestionCode,aa.ShowOnAccountingMemo,aa.CreatedById,aa.CreatedDateTime,aa.UpdatedById,aa.UpdatedDateTime,"
                             + "ItemTypeName = bb.Name,SectionName = cc.SectionName,SectionNumber = cc.SectionCode from LFSSectionItems aa inner join LFSItemTypes  bb on aa.ItemTypeId = bb.Id "
                             + " inner join LFSSections cc on aa.SectionCode = cc.SectionCode left outer join LFSQuestionBank qb on qb.QuestionCode = aa.QuestionCode "
                             + "  left outer join LFSResponses res on res.QuestionCode = qb.QuestionCode and res.EntityId={2} and res.EntityType={3}"
                             + " Where aa.SectionCode = {0} and aa.ChapterCode={1} order by aa.Ordinal";

              var xx = db.Database.SqlQuery<LFSSectionItemsViewModel>(strQRy, SectionCode, ChapterCode, EntityId, EntityType).ToList();
              return Ok(xx);*/
            return Ok(dt);
        }
        // POST: api/LFSSectionItems
        //Method to Post Data from app to db

        [ResponseType(typeof(LFSSectionItem))]
        public async Task<IHttpActionResult> PostLFSSectionItems(LFSSectionItem LFSSectionItem,string UserName,string WorkFlow)
        {
            if (!ModelState.IsValid)
            {
                throw new HttpResponseException(Request.CreateErrorResponse(HttpStatusCode.BadRequest, string.Format(Globals.BadRequestErrorMessage, "CREATE", "SectionItem")));
            }

            try
            {
                if(db.LFSSectionItems.Where(p=>p.Id==LFSSectionItem.Id).Count() > 0)
                {
                    db.Entry(LFSSectionItem).State = EntityState.Modified;
                    await db.SaveChangesAsync();
                }
                else
                {
                    LFSSectionItem.Id = 0;
                    db.LFSSectionItems.Add(LFSSectionItem);
                    await db.SaveChangesAsync();
                }
            }
            catch(DbEntityValidationException dbex)
            {
                var errorMessage = Globals.GetEntityValidationErrorMessage(dbex);
                throw new HttpResponseException(Request.CreateErrorResponse((HttpStatusCode)Globals.ExceptionType.Type2, errorMessage));//type 2 error
            }
            catch(Exception ex)
            {
                if (ex.GetBaseException().GetType() == typeof(SqlException))//check for exception type
                {
                    //Throw this as HttpResponse Exception to let user know about the mistakes they made, correct them and retry.
                    throw new HttpResponseException(Request.CreateErrorResponse((HttpStatusCode)Globals.ExceptionType.Type2, GetCustomizedErrorMessage(ex)));//type 2 error
                }
                else
                {
                    throw ex;//This exception will be handled in FilterConfig's CustomHandler
                }
            }

            return CreatedAtRoute("DefaultApi", new { id = LFSSectionItem.Id }, LFSSectionItem);
        }
        [HttpPost]
        [ResponseType(typeof(LFSSectionItem))]
        public async Task<IHttpActionResult> PostLFSSectionItem(List<LFSSectionItem> LFSSectionItem, string UserName, string WorkFlow)
        {
            if (!ModelState.IsValid)
            {
                throw new HttpResponseException(Request.CreateErrorResponse(HttpStatusCode.BadRequest, string.Format(Globals.BadRequestErrorMessage, "CREATE", "LFSSectionItems")));
            }
            using (var transaction = db.Database.BeginTransaction())
            {
                try
                {
                    int LoggedInUserId = 0;
                    foreach (var model in LFSSectionItem)
                    {
                        if (model.Id == 0)//add only when new record is there to insert.
                            db.LFSSectionItems.Add(model);
                        LoggedInUserId = model.UpdatedById;
                        await db.SaveChangesAsync();
                    }

                }
                catch (DbEntityValidationException dbex)
                {
                    transaction.Rollback();
                    var errorMessage = Globals.GetEntityValidationErrorMessage(dbex);
                    throw new HttpResponseException(Request.CreateErrorResponse((HttpStatusCode)Globals.ExceptionType.Type2, errorMessage));//type 2 error
                }
                catch (Exception ex)
                {
                    transaction.Rollback();
                    if (ex.GetBaseException().GetType() == typeof(SqlException))//check for exception type
                    {
                        //Throw this as HttpResponse Exception to let user know about the mistakes they made, correct them and retry.
                        throw new HttpResponseException(Request.CreateErrorResponse((HttpStatusCode)Globals.ExceptionType.Type2, GetCustomizedErrorMessage(ex)));//type 2 error
                    }
                    else
                    {
                        throw ex;//This exception will be handled in FilterConfig's CustomHandler
                    }
                }

                transaction.Commit();
            }

            return Ok();
        }

        
        // PUT: api/LFSSectionItems?Id
        //Method to update Requested Data by User in db
        [ResponseType(typeof(void))]
        public async Task<IHttpActionResult> PutLFSSectionItems(int Id,LFSSectionItem LFSSectionItem, string UserName, string WorkFlow)
        {
            if (!ModelState.IsValid)
            {
                throw new HttpResponseException(Request.CreateErrorResponse(HttpStatusCode.BadRequest, string.Format(Globals.BadRequestErrorMessage, "UPDATE", "SECTIONITEM")));
            }

            if(!LFSSectionItemsExists(Id))
            {
                throw new HttpResponseException(Request.CreateErrorResponse(HttpStatusCode.NotFound, string.Format(Globals.NotFoundErrorMessage, "SECTIONITEM")));
            }

            if(Id!=LFSSectionItem.Id)
            {
                throw new HttpResponseException(Request.CreateErrorResponse(HttpStatusCode.BadRequest, string.Format(Globals.BadRequestErrorMessage, "UPDATE", "SECTIONITEM")));
            }

            try
            {
                db.Entry(LFSSectionItem).State = EntityState.Modified;
                await db.SaveChangesAsync();
            }
            catch(DbEntityValidationException dbex)
            {
                var errorMessage = Globals.GetEntityValidationErrorMessage(dbex);
                throw new HttpResponseException(Request.CreateErrorResponse((HttpStatusCode)Globals.ExceptionType.Type2, errorMessage));//type 2 error
            }
            catch(Exception ex)
            {
                if (ex.GetBaseException().GetType() == typeof(SqlException))//check for exception type
                {
                    //Throw this as HttpResponse Exception to let user know about the mistakes they made, correct them and retry.
                    throw new HttpResponseException(Request.CreateErrorResponse((HttpStatusCode)Globals.ExceptionType.Type2, GetCustomizedErrorMessage(ex)));//type 2 error
                }
                else
                {
                    throw ex;//This exception will be handled in FilterConfig's CustomHandler
                }
            }

            return Ok(LFSSectionItem);

        }

        // Delete: api/LFSSectionItems?id
        [ResponseType(typeof(LFSSectionItem))]
        public async Task<IHttpActionResult> DeleteLFSSectionItems(int id, string UserName, string WorkFlow)
        {
            LFSSectionItem LFSSectionItem = await db.LFSSectionItems.FindAsync(id);
            if (LFSSectionItem == null)
            {
                throw new HttpResponseException(Request.CreateErrorResponse(HttpStatusCode.NotFound, string.Format(Globals.NotFoundErrorMessage, "Section Item")));
            }

            try
            {
                db.LFSSectionItems.Remove(LFSSectionItem);
                await db.SaveChangesAsync();

            }
            catch (Exception ex)
            {
                if (ex.GetBaseException().GetType() == typeof(SqlException))//check for exception type
                {
                    //Throw this as HttpResponse Exception to let user know about the mistakes they made, correct them and retry. 
                    throw new HttpResponseException(Request.CreateErrorResponse((HttpStatusCode)Globals.ExceptionType.Type2, GetCustomizedErrorMessage(ex)));//type 2 error
                }
                else
                {
                    throw ex;
                }
            }
            return Ok(LFSSectionItem);
        }

        private bool LFSSectionItemsExists(int Id)
        {
            return db.LFSSectionItems.Count(e => e.Id == Id) > 0;
        }

        private string GetCustomizedErrorMessage(Exception ex)
        {
            //Convert the exception to SqlException to get the error message returned by database.
            var SqEx = ex.GetBaseException() as SqlException;
            //Depending upon the constraint failed return appropriate error message
            if (SqEx.Message.IndexOf("FK_LFSSectionItems_LFSResponses_SectionItemId", StringComparison.OrdinalIgnoreCase) >= 0)
                return (string.Format(Globals.CanNotUpdateDeleteErrorMessage, "SECTION ITEMS", "RESPONSE"));
            //else if
            //    (SqEx.Message.IndexOf("UQ_LFSAnswerBank_QuestionId_AnswerOption", StringComparison.OrdinalIgnoreCase) >= 0)
            //    return (string.Format(Globals.CannotInsertDuplicateErrorMessage, "ANSWER BANK"));
            else
            {
                //Something else failed return original error message as retrieved from database
                //Add complete Url in description
                var UserName = "";//System.Web.HttpContext.Current.Session["UserName"] as string;
                string UrlString = Convert.ToString(Request.RequestUri.AbsolutePath);
                var ErrorDesc = "";
                var Desc = Request.GetQueryNameValuePairs().ToDictionary(x => x.Key, x => x.Value);
                if (Desc.Count() > 0)
                    ErrorDesc = string.Join(",", Desc);
                string[] s = Request.RequestUri.AbsolutePath.Split('/');//This array will provide controller name at 2nd and action name at 3 rd index position
                //db.SpLogError("RELY-API", s[2], s[3], SqEx.Message, UserName, "Type2", ErrorDesc, "resolution", "L2Admin", "field", 0, "New");
                //return Globals.SomethingElseFailedInDBErrorMessage;

             ObjectParameter Result = new ObjectParameter("Result", typeof(int)); //return parameter is declared
                db.SpLogError("RELY-API", s[2], s[3], SqEx.Message, UserName, "Type2", ErrorDesc, "resolution", "L2Admin", "field", 0, "New", Result).FirstOrDefault();
                int errorid = (int)Result.Value; //getting value of output parameter
                //return Globals.SomethingElseFailedInDBErrorMessage;
                return (string.Format(Globals.SomethingElseFailedInDBErrorMessage, errorid));
            }
        }

        public IHttpActionResult GetQuestionCodeCountForSurvey(string QuestionCode,int SurveyId)
        {
            var qry = "select count(*) from LFSSectionItems where SurveyId={0} and QuestionCode={1}";
            int Count = db.Database.SqlQuery<int>(qry,SurveyId,QuestionCode).FirstOrDefault();
            return Ok(Count);
        }

    }
}
