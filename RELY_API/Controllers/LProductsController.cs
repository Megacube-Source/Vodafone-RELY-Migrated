using RELY_API.Models;
using RELY_API.Utilities;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.Entity;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Validation;
using System.Data.SqlClient;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Threading.Tasks;
using System.Web.Http;
using System.Web.Http.Description;

namespace RELY_API.Controllers
{
    [CustomExceptionFilter]
    public class LProductsController : ApiController
    {
        private RELYDevDbEntities db = new RELYDevDbEntities();

        [HttpGet]
        public async Task<IHttpActionResult> UpdateSurveyNew(int TargetEntityId, int SurveyId, bool IsCopySurvey, int SourceProductId, int LoggedInUserId, string CompanyCode)
        {

            string EntityType = "LProducts";
            var ExistingProduct = db.LProducts.Where(a => a.Id == TargetEntityId).FirstOrDefault();
            using (var transaction = db.Database.BeginTransaction())
            {
                try
                {
                    // String strConnString = System.Configuration.ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
                    //  SqlConnection con = new SqlConnection(strConnString);
                    //a) delete next step actions for that entityid   
                    // string NextStepActionsQry = "delete from LFSNextStepActions where ResponseId in (select id from LFSResponses where EntityId={0} and EntityType={1} )";
                    try
                    {
                        /* con.Open();
                         using (SqlCommand command = new SqlCommand("DELETE FROM LFSNextStepActions WHERE ResponseId in (select id from LFSResponses where EntityId=@TargetEntityId and EntityType=@EntityType )", con))
                         {
                             command.Parameters.AddWithValue("@TargetEntityId", TargetEntityId);
                             command.Parameters.AddWithValue("@EntityType", EntityType);
                             command.ExecuteNonQuery();
                         }*/

                        var Qry = "DELETE FROM LFSNextStepActions WHERE ResponseId in (select id from LFSResponses where EntityId = {0} and EntityType = {1})";
                        db.Database.ExecuteSqlCommand(Qry, TargetEntityId, EntityType);
                        db.SaveChanges();

                        //b) delete responses for that entity
                        /* using (SqlCommand command = new SqlCommand("delete from LFSResponses where EntityId=@TargetEntityId and EntityType=@EntityType", con))
                         {
                             command.Parameters.AddWithValue("@TargetEntityId", TargetEntityId);
                             command.Parameters.AddWithValue("@EntityType", EntityType);
                             command.ExecuteNonQuery();
                         }*/
                        string Query = "delete from LFSResponses where EntityId={0} and EntityType={1}";
                        db.Database.ExecuteSqlCommand(Query, TargetEntityId, EntityType);
                        db.SaveChanges();
                    }
                    finally
                    {
                        //con.Close();
                        //con.Dispose();
                    }
                    //Copy Survey Link, Survey id will be the Survey Id of SourceProduct
                    if (SourceProductId != 0 && IsCopySurvey)
                    {
                        var SourceProduct = db.LProducts.Find(SourceProductId);
                        SurveyId = (int)SourceProduct.SurveyId;

                    }
                    //update the survey Id of the Entity(current Product) with new SurveyId
                    ExistingProduct.SurveyId = SurveyId;
                    db.Entry(ExistingProduct).State = EntityState.Modified;
                    await db.SaveChangesAsync();

                    //checking if source is Copy SUrvey Link
                    if (IsCopySurvey)
                    {
                        //c) insert responses for that entity copied from source entity
                        var SourceProductResponsesList = db.LFSResponses.Where(a => a.EntityId == SourceProductId).Where(a => a.EntityType == "LProducts").ToList();
                        foreach (var res in SourceProductResponsesList)
                        {
                            var newResponse = new LFSRespons
                            {
                                EntityId = TargetEntityId,
                                EntityType = "LProducts",
                                Response = res.Response,
                                IsReponseAutoGenerated = res.IsReponseAutoGenerated,
                                QuestionCode = res.QuestionCode,
                                ConclusionText = res.ConclusionText,
                                Comments = res.Comments,
                                UpdatedById = LoggedInUserId,
                                CreatedById = LoggedInUserId,
                                UpdatedDateTime = DateTime.UtcNow,
                                CreatedDateTime = DateTime.UtcNow,
                            };
                            db.LFSResponses.Add(newResponse);
                            db.SaveChanges();
                            var NextSteps = db.LFSNextSteps.Where(a => a.QuestionCode == newResponse.QuestionCode).Where(a => a.AnswerOption.Trim() == newResponse.Response.Trim()).Where(a => a.CompanyCode == CompanyCode).ToList();
                            foreach (var NS in NextSteps)
                            {
                                // d)Insert Into LFSNextStepsActions(Next Steps form LFSNextSteps where CompanyCode, QuestionCode, AnswerOption match)-- Note there could be multiple next steps
                                LFSNextStepAction NextStepAction = new LFSNextStepAction
                                {
                                    ResponseId = newResponse.Id,
                                    NextStepId = NS.Id,
                                    IsDone = false,
                                    ActionTaken = null,
                                    CreatedById = newResponse.CreatedById,
                                    CreatedDateTime = DateTime.Now,
                                    UpdatedById = newResponse.UpdatedById,
                                    UpdatedDateTime = DateTime.Now
                                };
                                db.LFSNextStepActions.Add(NextStepAction);
                                await db.SaveChangesAsync();
                            }

                        }
                    }
                    //CR1.5 - no versioning in Product
                    ////Update the survey Id for all the previous versions of Target Product as well
                    //var ProductListToUpdate = db.LProducts.Where(a => a.SourceProductId == ExistingProduct.SourceProductId).ToList();
                    //foreach(var Product in ProductListToUpdate)
                    //{
                    //    Product.SurveyId = ExistingProduct.SurveyId;
                    //    db.Entry(Product).State = EntityState.Modified;
                    //    db.SaveChanges();
                    //}
                }
                catch (DbEntityValidationException dbex)
                {
                    transaction.Rollback();
                    var errorMessage = Globals.GetEntityValidationErrorMessage(dbex);
                    throw new HttpResponseException(Request.CreateErrorResponse((HttpStatusCode)Globals.ExceptionType.Type2, errorMessage));//type 2 error
                }
                catch (Exception ex)
                {
                    transaction.Rollback();
                    if (ex.GetBaseException().GetType() == typeof(SqlException))//check for exception type
                    {
                        //Throw this as HttpResponse Exception to let user know about the mistakes they made, correct them and retry.
                        throw new HttpResponseException(Request.CreateErrorResponse((HttpStatusCode)Globals.ExceptionType.Type2, GetCustomizedErrorMessage(ex)));//type 2 error
                    }
                    else
                    {
                        throw ex;//This exception will be handled in FilterConfig's CustomHandler
                    }
                }
                transaction.Commit();
            }
            return Ok(ExistingProduct);
        }



        [HttpGet]
        public async Task<IHttpActionResult> UpdateSurvey(int EntityId, int SurveyId, bool IsCopySurvey, int SourceProductId, int LoggedInUserId, string CompanyCode)
        {
            var ExistingProduct = db.LProducts.Where(a => a.Id == EntityId).FirstOrDefault();
            using (var transaction = db.Database.BeginTransaction())
            {
                try
                {
                    //Copy Survey Link, Survey id will be the Survey Id of SourceProduct
                    if (SourceProductId != 0 && IsCopySurvey) {
                        var SourceProduct = db.LProducts.Find(SourceProductId);
                        SurveyId = (int)SourceProduct.SurveyId;

                    }
                    //update the survey Id of the Entity(current Product) with new SurveyId
                    ExistingProduct.SurveyId = SurveyId;
                    db.Entry(ExistingProduct).State = EntityState.Modified;
                    await db.SaveChangesAsync();
                    //a) delete next step actions for that entityid   
                    //insted of looping use RemoveRange for delete
                    var ResponseIdList = db.LFSResponses.Where(p => p.EntityId == EntityId).Where(p => p.EntityType == "LProducts").Select(a => a.Id).ToList();
                    var NextStepActions = from aa in db.LFSNextStepActions where ResponseIdList.Contains(aa.ResponseId) select aa;
                    db.LFSNextStepActions.RemoveRange(NextStepActions);
                    await db.SaveChangesAsync();



                    /* var NextStepActions = db.Database.SqlQuery<LFSNextStepAction>("Select *  from LFSNextStepActions where ResponseId in(select Id from LFSResponses where EntityId={0} and EntityType={1}) ", EntityId, "LProducts").ToList();
                     if (NextStepActions != null && NextStepActions.Count > 0)
                         foreach (var NSAction in NextStepActions)
                         {
                             db.Entry(NSAction).State = EntityState.Deleted;
                             await db.SaveChangesAsync();
                         }*/
                    //b) delete responses for that entity
                    //delete all the responses for EntityId from LFSResponses (where ENtityId = is productid and ENtityType = LProducts)
                    //where clause should be repalced with ResponseIdList as we have retrieved same list above
                    var ResponseList = db.LFSResponses.Where(p => p.EntityId == EntityId).Where(p => p.EntityType == "LProducts").Select(aa => aa).ToList();
                    db.LFSResponses.RemoveRange(ResponseList);
                    //  db.Database.SqlQuery<int>("Delete")

                    await db.SaveChangesAsync();
                    /*var responses = db.Database.SqlQuery<LFSRespons>("SELECT * from LFSResponses where EntityId={0} and EntityType={1} ", EntityId, "LProducts").ToList();
                        foreach (var res in responses)
                        {
                            db.Entry(res).State = EntityState.Deleted;
                            await db.SaveChangesAsync();
                        }*/
                    //checking if source is Copy SUrvey Link
                    if (IsCopySurvey)
                    {
                        //c) insert responses for that entity copied from source entity
                        var SourceProductResponsesList = db.LFSResponses.Where(a => a.EntityId == SourceProductId).Where(a => a.EntityType == "LProducts").ToList();
                        foreach (var res in SourceProductResponsesList)
                        {
                            var newResponse = new LFSRespons {
                                EntityId = EntityId,
                                EntityType = "LProducts",
                                Response = res.Response,
                                IsReponseAutoGenerated = res.IsReponseAutoGenerated,
                                QuestionCode = res.QuestionCode,
                                ConclusionText = res.ConclusionText,
                                Comments = res.Comments,
                                UpdatedById = LoggedInUserId,
                                CreatedById = LoggedInUserId,
                                UpdatedDateTime = DateTime.UtcNow,
                                CreatedDateTime = DateTime.UtcNow,
                            };
                            db.LFSResponses.Add(newResponse);

                            db.SaveChanges();
                            //insert nextstepactions here only instaed of another loop
                        }
                        //d) insert next stepactions for that entity copied just copy responseId(newly added), nextstepid(retrieve NS on Response text)
                        //find out NextSteps for Question,Answer,CompanyCode
                        var newResponseList = db.LFSResponses.Where(a => a.EntityId == EntityId).Where(a => a.EntityType == "LProducts").ToList();
                        foreach (var LFSRespons in newResponseList)
                        {
                            var NextSteps = db.LFSNextSteps.Where(a => a.QuestionCode == LFSRespons.QuestionCode).Where(a => a.AnswerOption.Trim() == LFSRespons.Response.Trim()).Where(a => a.CompanyCode == CompanyCode).ToList();
                            foreach (var NS in NextSteps)
                            {
                                // Insert Into LFSNextStepsActions(Next Steps form LFSNextSteps where CompanyCode, QuestionCode, AnswerOption match)-- Note there could be multiple next steps
                                LFSNextStepAction NextStepAction = new LFSNextStepAction
                                {
                                    ResponseId = LFSRespons.Id,
                                    NextStepId = NS.Id,
                                    IsDone = false,
                                    ActionTaken = null,
                                    CreatedById = LFSRespons.CreatedById,
                                    CreatedDateTime = DateTime.Now,
                                    UpdatedById = LFSRespons.UpdatedById,
                                    UpdatedDateTime = DateTime.Now
                                };
                                db.LFSNextStepActions.Add(NextStepAction);
                                await db.SaveChangesAsync();
                            }
                        }

                    }
                }
                catch (DbEntityValidationException dbex)
                {
                    transaction.Rollback();
                    var errorMessage = Globals.GetEntityValidationErrorMessage(dbex);
                    throw new HttpResponseException(Request.CreateErrorResponse((HttpStatusCode)Globals.ExceptionType.Type2, errorMessage));//type 2 error
                }
                catch (Exception ex)
                {
                    transaction.Rollback();
                    if (ex.GetBaseException().GetType() == typeof(SqlException))//check for exception type
                    {
                        //Throw this as HttpResponse Exception to let user know about the mistakes they made, correct them and retry.
                        throw new HttpResponseException(Request.CreateErrorResponse((HttpStatusCode)Globals.ExceptionType.Type2, GetCustomizedErrorMessage(ex)));//type 2 error
                    }
                    else
                    {
                        throw ex;//This exception will be handled in FilterConfig's CustomHandler
                    }
                }
                transaction.Commit();
            }
            return Ok(ExistingProduct);
        }


        [HttpGet]
        public IHttpActionResult CloneProduct(int ProductId, int loggedInUserId, int LoggedInUserRoleId, string CompanyCode, string Source, string RequestId)
        {
            db.SPCloneProduct(ProductId, loggedInUserId, LoggedInUserRoleId, CompanyCode, Source, RequestId);
            //string qry = "select top(1) * from LProducts  where SourceProductId = (select SourceProductId from LProducts where Id = {0}) order by id desc";
            string qry = "select top(1) * from LProducts  where ClonedFromId = {0} order by id desc";
            var ClonedProduct = db.Database.SqlQuery<LProductViewModel>(qry, ProductId).FirstOrDefault();
            return Ok(ClonedProduct);
        }

        //Add by Ankit
        //Method for getting Product History Of Requests
        [ResponseType(typeof(LProductRequestHistoryViewModel))]
        public async Task<IHttpActionResult> GetProductRequestHistory(int ProductId)
        {
            //var LProduct = (from aa in db.LProducts.Where(r => r.Id == ProductId) select new { aa.Id,aa.Name, aa.SysCatId,aa.SourceProductId }).FirstOrDefault();

            var LProductRequestHistory = (from lr in db.LRequests
                                          join lp in db.LProducts.Where(r => r.Id == ProductId)
                                          //.Where(s => s.SysCatId == LProduct.SysCatId)
                                          on lr.Id equals lp.RequestId
                                          select new
                                          {
                                              lr.Name,
                                              lr.AuthorizationNumber,
                                              lr.CreatedDateTime,
                                              lr.Status,
                                              lr.UpdatedDateTime,
                                              //lp.Version,
                                              lp.RequestId
                                          }).ToList();
            return Ok(LProductRequestHistory);
        }


        public async Task<IHttpActionResult> GetProductHistory(string SelecterType, string CompanyCode, string ProductId)
        {
            string ColumnListForRequest = "LRequests.UpdatedDateTime As [ApprovalDate],LRequests.WFType as [ApprovalType],LRequests.Name as [RequestName],";
            string ColumnsList = ColumnListForRequest;
            //LCompanySpecificColumnsController CompSpecificColumn = new LCompanySpecificColumnsController();
            var ColumnListForProducts = GetColumnListAsSingleRow(CompanyCode, "LProducts", SelecterType);
            if (!string.IsNullOrEmpty(ColumnListForProducts))
            {
                ColumnListForProducts = ColumnListForProducts.Replace("[Attribute", "LProducts.[Attribute");
                ColumnsList += ColumnListForProducts;
            }


            // ColumnsList = ColumnListForRequest + ColumnListForProducts + ColumnListForProductPobs;
            //ColumnsList = ColumnsList.TrimEnd(',',' ');
            string qry = "";
            //initially check whether ProductPob is associated with product or not
            qry = "select count(*) from LProductPobs where ProductId in(select Id from Lproducts where SourceProductId = (select SourceProductId from Lproducts where Id = {0}))";
            int count = db.Database.SqlQuery<int>(qry, ProductId).FirstOrDefault();
            if (count > 0)
            {
                var ColumnListForProductPobs = GetColumnListAsSingleRow(CompanyCode, "LProductPobs", SelecterType);
                if (!string.IsNullOrEmpty(ColumnListForProductPobs))
                {
                    ColumnListForProductPobs = ColumnListForProductPobs.Replace("[Attribute", "LProductPobs.[Attribute");
                    ColumnsList += ColumnListForProductPobs;
                }
                ColumnsList = ColumnsList.TrimEnd();
                if (ColumnsList.EndsWith(","))
                {
                    ColumnsList = ColumnsList.Substring(0, ColumnsList.Length - 1);
                }
                qry = "SELECT distinct " + ColumnsList + " ,LProducts.Version from  LProductPobs LProductPobs inner join LProducts LProducts on LProducts.Id = LProductPobs.ProductId left outer join LRequests LRequests on LProducts.RequestId = LRequests.Id "
                           + " where LProductPobs.ProductId in(select Id from Lproducts where SourceProductId = (select SourceProductId from Lproducts where Id = @ProductId)) order by LProducts.Version";
            }
            else
            {
                ColumnsList = ColumnsList.TrimEnd();
                if (ColumnsList.EndsWith(",") || ColumnsList.EndsWith(", "))
                {
                    ColumnsList = ColumnsList.Substring(0, ColumnsList.Length - 1);
                }
                qry = "SELECT distinct " + ColumnsList + " ,LProducts.Version from  LProducts LProducts left outer join LRequests LRequests on LProducts.RequestId = LRequests.Id "
                           + " where LProducts.Id in(select Id from Lproducts where SourceProductId = (select SourceProductId from Lproducts where Id = @ProductId)) order by LProducts.Version";
            }
            var tb = new DataTable();
            string ConnectionString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
            SqlConnection conn = new SqlConnection(ConnectionString);
            SqlCommand cmd = new SqlCommand(qry, conn);
            cmd.Parameters.AddWithValue("@ProductId", ProductId);
            conn.Open();
            SqlDataAdapter sda = new SqlDataAdapter(cmd);
            sda.Fill(tb);
            conn.Close();

            //  var xx = db.Database.SqlQuery<dynamic>(qry).ToList();
            return Ok(tb);
        }

        private string GetColumnListAsSingleRow(string CompanyCode, string TableName, string SelecterType)
        {
            string ColumnQuerySingleRow = "select stuff((select '[' + [ColumnName] + '] AS [' +  [Label] +'], ' FROM LCompanySpecificColumns WHERE TableName = {0} and SelecterType= {1} and DisplayOnForms = 1 Order by OrdinalPosition FOR XML PATH('') ),1,0,'')";
            var ColumnListSingleRow = db.Database.SqlQuery<string>(ColumnQuerySingleRow, TableName, SelecterType).FirstOrDefault();
            return (ColumnListSingleRow);
        }

        public IHttpActionResult GetProductCodesByOpcoSysCat(string CompanyCode, int SysCatId, int? Id, string UserName, string WorkFlow)
        {
            if (Id != null && Id != 0)
            {
                //List<string> ProductCodes = (from aa in db.LProducts.Where(r => r.CompanyCode == CompanyCode).Where(r => r.SysCatId == SysCatId).Where(r => r.Id != Id).ToList()
                //                             select aa.ProductCode).ToList();
                List<string> ProductCodes = db.Database.SqlQuery<string>("select ProductCode from LProducts where CompanyCode={0} and SysCatId={1} and Id not in ({2})", CompanyCode, SysCatId, Id).ToList();
                return Ok(ProductCodes);
            }
            else
            {
                //List<string> ProductCodes = (from aa in db.LProducts.Where(r => r.CompanyCode == CompanyCode).Where(r => r.SysCatId == SysCatId).ToList()
                //                             select aa.ProductCode.ToLower()).ToList();
                List<string> ProductCodes = db.Database.SqlQuery<string>("select ProductCode from LProducts where CompanyCode={0} and SysCatId={1}", CompanyCode, SysCatId).ToList();
                return Ok(ProductCodes);
            }
        }
        [HttpGet]
        public IHttpActionResult CheckProductDuplicacy(string CompanyCode, int SysCatId, string Id,string ProductCode,string BusinessCategory)
        {
            ObjectParameter IsDuplicate = new ObjectParameter("IsDuplicate", typeof(string));
            db.SpCheckProductIsDuplicate(CompanyCode, Id, SysCatId, ProductCode, BusinessCategory, IsDuplicate).FirstOrDefault();
            string ReturnValue = (string)IsDuplicate.Value;
            return Ok(ReturnValue);
        }
        [HttpGet]
        public IHttpActionResult GetPreviousVersionStartDate(int ProductId)
        {
            //CR1.5 - no version in Product anymore
            // var Product = db.LProducts.Where(a => a.Id == ProductId).FirstOrDefault();
            //int CurrentVersion = Product.Version;
            //int? SourcePId = Product.SourceProductId;
            //DateTime? PreviousVersionStartDate = null;
            //if (CurrentVersion > 1)
            //{
            //    PreviousVersionStartDate = db.LProducts.Where(a => a.Version == CurrentVersion - 1).Where(a => a.SourceProductId == SourcePId).Select(a => a.AttributeD01).FirstOrDefault();
            //}
            //return Ok(PreviousVersionStartDate);
            return Ok();
        }

        // GET: api/LProducts/5
        [ResponseType(typeof(LProduct))]
        public async Task<IHttpActionResult> GetLProduct(int id)
        {

            //this needs to be updated after Model update as SurveyId will be nullable<int>
            string sqlQuery = "Select * from LProducts where id = {0}";
            var LProduct = db.Database.SqlQuery<LProductViewModel>(sqlQuery, id).FirstOrDefault();
            
            if (LProduct == null)
            {
                throw new HttpResponseException(Request.CreateErrorResponse(HttpStatusCode.NotFound, string.Format(Globals.NotFoundErrorMessage, "PRODUCT")));
            }
            return Ok(LProduct);
        }

        [HttpGet]
        public IHttpActionResult GetProductCountAttachedToRequest(int RequestId,string CompanyCode,string UserName,string WorkFlow)
        {
            int ProductCount = db.Database.SqlQuery<int>("select Count(*) from LProducts where RequestId={0} and CompanyCode={1} ", RequestId, CompanyCode).FirstOrDefault();
            string SelecterType = "";
            if(ProductCount > 0)
            {
                SelecterType = db.Database.SqlQuery<string>("select SysCatCode as SelecterType from LProducts lp join RSysCat sc on lp.SysCatId = sc.Id where lp.RequestId={0} and lp.CompanyCode={1}",RequestId,CompanyCode).FirstOrDefault();
            }
            ProductForRequestDetailViewModel model = new ProductForRequestDetailViewModel { ProductCount = ProductCount, SelecterType = SelecterType };
            return Ok(model);
        }

        // GET: api/LProducts/5
        [ResponseType(typeof(LProduct))]
        public async Task<IHttpActionResult> GetByRequestId(int EntityId, string EntityType)
        {
            if (EntityType == "LRequests")
            {
                var LProduct = (from aa in db.LProducts.Where(p => p.RequestId == EntityId)
                                    //join bb in db.RProductSystems on aa.ProductSystemId equals bb.Id
                                    //join cc in db.RProductCategories  on aa.ProductCategoryId equals cc.Id
                                join sc in db.RSysCats on aa.SysCatId equals sc.Id
                                select new
                                {
                                    aa.Id,
                                    aa.CompanyCode,
                                    aa.RequestId,
                                    aa.ProductCode,
                                    aa.Name,
                                    Product = aa.Name + "-" + aa.ProductCode + " (" + sc.SysCat + ")",
                                    aa.SysCatId,
                                    aa.EffectiveEndDate,aa.EffectiveStartDate,
                                    SysCat = sc.SysCat,
                                    SelecterType = sc.SysCatCode,
                                    //aa.Version,
                                    aa.AttributeC01,
                                    aa.AttributeC02,
                                    aa.AttributeC03,
                                    aa.AttributeC04,
                                    aa.AttributeC05,
                                    aa.AttributeC06,
                                    aa.AttributeC07,
                                    aa.AttributeC08,
                                    aa.AttributeC09,
                                    aa.AttributeC10,
                                    aa.AttributeC11,
                                    aa.AttributeC12,
                                    aa.AttributeC13,
                                    aa.AttributeC14,
                                    aa.AttributeC15,
                                    aa.AttributeC16,
                                    aa.AttributeC17,
                                    aa.AttributeC18,
                                    aa.AttributeC19,
                                    aa.AttributeC20,
                                    aa.AttributeM01,
                                    aa.AttributeM02,
                                    aa.AttributeM03,
                                    aa.AttributeM04,
                                    aa.AttributeM05,
                                    aa.AttributeI01,
                                    aa.AttributeI02,
                                    aa.AttributeI03,
                                    aa.AttributeI04,
                                    aa.AttributeI05,
                                    aa.AttributeI06,
                                    aa.AttributeI07,
                                    aa.AttributeI08,
                                    aa.AttributeI09,
                                    aa.AttributeI10,
                                    aa.AttributeN01,
                                    aa.AttributeN02,
                                    aa.AttributeN03,
                                    aa.AttributeN04,
                                    aa.AttributeN05,
                                    aa.AttributeN06,
                                    aa.AttributeN07,
                                    aa.AttributeN08,
                                    aa.AttributeN09,
                                    aa.AttributeN10,
                                    aa.AttributeD01,
                                    aa.AttributeD02,
                                    aa.AttributeD03,
                                    aa.AttributeD04,
                                    aa.AttributeD05,
                                    aa.AttributeD06,
                                    aa.AttributeD07,
                                    aa.AttributeD08,
                                    aa.AttributeD09,
                                    aa.AttributeD10,
                                    aa.AttributeB01,
                                    aa.AttributeB02,
                                    aa.AttributeB03,
                                    aa.AttributeB04,
                                    aa.AttributeB05,
                                    aa.AttributeB06,
                                    aa.AttributeB07,
                                    aa.AttributeB08,
                                    aa.AttributeB09,
                                    aa.AttributeB10,
                                    aa.WFOrdinal,
                                    aa.WFStatus,
                                    aa.WFType,
                                    aa.WFComments,
                                    aa.WFRequesterId,
                                    aa.WFAnalystId,
                                    aa.WFManagerId,
                                    aa.WFCurrentOwnerId,
                                    aa.WFRequesterRoleId,
                                    aa.CreatedById,
                                    aa.UpdatedById,
                                    aa.Status,
                                    aa.CreatedDateTime,
                                    aa.UpdatedDateTime,
                                    aa.SurveyId,
                                    //aa.SourceProductId,
                                    aa.SspId

                                }).ToList();
                if (LProduct == null)
                {
                    throw new HttpResponseException(Request.CreateErrorResponse(HttpStatusCode.NotFound, string.Format(Globals.NotFoundErrorMessage, "PRODUCT")));
                }
                return Ok(LProduct);
            }
            else if (EntityType == "LProducts")
            {
                var LProduct = (from aa in db.LProducts.Where(p => p.Id == EntityId)
                                join sc in db.RSysCats on aa.SysCatId equals sc.Id
                                select new
                                {
                                    aa.Id,
                                    aa.CompanyCode,
                                    aa.RequestId,
                                    aa.ProductCode,
                                    aa.Name,
                                    Product = aa.Name + "-" + aa.ProductCode + " (" + sc.SysCat + ")",
                                    aa.SysCatId,
                                    aa.EffectiveEndDate,
                                    aa.EffectiveStartDate,
                                    SysCat = sc.SysCat,
                                    SelecterType = sc.SysCatCode,
                                    //aa.Version,
                                    aa.AttributeC01,
                                    aa.AttributeC02,
                                    aa.AttributeC03,
                                    aa.AttributeC04,
                                    aa.AttributeC05,
                                    aa.AttributeC06,
                                    aa.AttributeC07,
                                    aa.AttributeC08,
                                    aa.AttributeC09,
                                    aa.AttributeC10,
                                    aa.AttributeC11,
                                    aa.AttributeC12,
                                    aa.AttributeC13,
                                    aa.AttributeC14,
                                    aa.AttributeC15,
                                    aa.AttributeC16,
                                    aa.AttributeC17,
                                    aa.AttributeC18,
                                    aa.AttributeC19,
                                    aa.AttributeC20,
                                    aa.AttributeM01,
                                    aa.AttributeM02,
                                    aa.AttributeM03,
                                    aa.AttributeM04,
                                    aa.AttributeM05,
                                    aa.AttributeI01,
                                    aa.AttributeI02,
                                    aa.AttributeI03,
                                    aa.AttributeI04,
                                    aa.AttributeI05,
                                    aa.AttributeI06,
                                    aa.AttributeI07,
                                    aa.AttributeI08,
                                    aa.AttributeI09,
                                    aa.AttributeI10,
                                    aa.AttributeN01,
                                    aa.AttributeN02,
                                    aa.AttributeN03,
                                    aa.AttributeN04,
                                    aa.AttributeN05,
                                    aa.AttributeN06,
                                    aa.AttributeN07,
                                    aa.AttributeN08,
                                    aa.AttributeN09,
                                    aa.AttributeN10,
                                    aa.AttributeD01,
                                    aa.AttributeD02,
                                    aa.AttributeD03,
                                    aa.AttributeD04,
                                    aa.AttributeD05,
                                    aa.AttributeD06,
                                    aa.AttributeD07,
                                    aa.AttributeD08,
                                    aa.AttributeD09,
                                    aa.AttributeD10,
                                    aa.AttributeB01,
                                    aa.AttributeB02,
                                    aa.AttributeB03,
                                    aa.AttributeB04,
                                    aa.AttributeB05,
                                    aa.AttributeB06,
                                    aa.AttributeB07,
                                    aa.AttributeB08,
                                    aa.AttributeB09,
                                    aa.AttributeB10,
                                    aa.WFOrdinal,
                                    aa.WFStatus,
                                    aa.WFType,
                                    aa.WFComments,
                                    aa.WFRequesterId,
                                    aa.WFAnalystId,
                                    aa.WFManagerId,
                                    aa.WFCurrentOwnerId,
                                    aa.WFRequesterRoleId,
                                    aa.CreatedById,
                                    aa.UpdatedById,
                                    aa.Status,
                                    aa.CreatedDateTime,
                                    aa.UpdatedDateTime,
                                    aa.SurveyId,
                                    //aa.SourceProductId,
                                    aa.SspId
                                }).ToList();
                return Ok(LProduct);
            }
            return Ok();
        }

        public async Task<IHttpActionResult> GetLatestProcuctCreatedOnFlyForRequest(int RequestId)
        {
            //var sqlQuery = "select TOP(1) lp.Id, lp.SourceProductId,lp.CompanyCode,lp.ProductCode,lp.Name,sc.SysCat ,CASE when lp.ProductCode IS NOT NULL THEN lp.Name +'-'+lp.ProductCode + ' (' + SysCat + ')' ELSE lp.Name + '- (' + SysCat + ')'  END Product,lp.Version,lp.SysCatId from LProducts lp"
            //      + " join RSysCat sc on lp.SysCatId = sc.Id where lp.WFStatus in ('Completed','Parked') and lp.Version = (select max(lp1.Version) from LProducts lp1 where lp.SourceProductId = lp1.SourceProductId) and lp.RequestId = {0} and lp.WFOrdinal=0 and lp.WFStatus='Parked' Order by lp.Id desc";

            //var sqlQuery = "select TOP(1) lp.Id,lp.EffectiveEndDate,lp.EffectiveStartDate, lp.SourceProductId,lp.CompanyCode,lp.ProductCode,lp.Name,sc.SysCat,lp.Name +'|'+ ISNULL(lp.ProductCode,'') + ' (' + SysCat + ')' Product, "
            //            + " lp.SysCatId,sc.SysCatCode as SelecterType from LProducts lp join RSysCat sc on lp.SysCatId = sc.Id where lp.WFStatus in ('Completed', 'Parked') and lp.Version = (select max(lp1.Version) from LProducts lp1 where lp.SourceProductId = lp1.SourceProductId) and lp.RequestId = {0} and lp.WFOrdinal = 0 and lp.WFStatus = 'Parked' Order by lp.Id desc";
            var sqlQuery = "select TOP(1) lp.Id,lp.EffectiveEndDate,lp.EffectiveStartDate,lp.CompanyCode,lp.ProductCode,lp.Name," +
                "sc.SysCat,lp.Name +'|'+ ISNULL(lp.ProductCode,'') + ' (' + SysCat + ')' Product,  " +
                " lp.SysCatId,sc.SysCatCode as SelecterType from LProducts lp " +
                "join RSysCat sc on lp.SysCatId = sc.Id  where lp.WFStatus in ('Completed', 'Parked') " +
                "and lp.RequestId = {0} and lp.WFOrdinal = 0 and lp.WFStatus = 'Parked' Order by lp.Id desc";
            ////As the following query includes sub query, writing it direct SQL with placeholders instead of LINQ.
            var LProduct = await db.Database.SqlQuery<LProductViewModel>(sqlQuery, RequestId).FirstOrDefaultAsync();
            return Ok(LProduct);
        }
        public IHttpActionResult GetByCompanyCodeForChangeSurveyCount(string CompanyCode, int CurrentProductId)
        {
            var sqlQuery = "select count(*) from LProducts lp join RSysCat sc on lp.SysCatId = sc.Id where lp.CompanyCode = {0} and lp.Id not in ({1}) and lp.SurveyId IS NOT NULL ";
            int counts = db.Database.SqlQuery<int>(sqlQuery, CompanyCode,CurrentProductId).FirstOrDefault();
            return Ok(counts);
        }

        // [ResponseType(typeof(LProduct))]
        //this method will return list of products which has survey is attached to them
        public IHttpActionResult GetByCompanyCodeForChangeSurvey(string CompanyCode,int CurrentProductId, string sortdatafield, string sortorder, string FilterQuery, int PageNumber, int PageSize)
        {
            var Query = "Exec [SpGetProductsForImportSurvey] @CompanyCode,@CurrentProductId,@pagesize,@pagenum,@sortdatafield,@sortorder,@FilterQuery";
            SqlCommand cmd = new SqlCommand(Query);
            cmd.Parameters.AddWithValue("@CompanyCode", CompanyCode);
            cmd.Parameters.AddWithValue("@CurrentProductId", CurrentProductId);
            cmd.Parameters.AddWithValue("@pagesize", PageSize);
            cmd.Parameters.AddWithValue("@pagenum", PageNumber);
            cmd.Parameters.AddWithValue("@sortdatafield", string.IsNullOrEmpty(sortdatafield) ? (object)System.DBNull.Value : sortdatafield);
            cmd.Parameters.AddWithValue("@sortorder", string.IsNullOrEmpty(sortorder) ? (object)System.DBNull.Value : sortorder);
            cmd.Parameters.AddWithValue("@FilterQuery", string.IsNullOrEmpty(FilterQuery) ? (object)System.DBNull.Value : FilterQuery);
            var dt = Globals.GetDataTableUsingADO(cmd);
            return Ok(dt);


            /*
            //Run DB function to get list of Ids for Latest version
            var Workflow = db.RWorkFlows.Where(p => p.Name == "Products").FirstOrDefault();
            var Steps = db.WSteps.Where(p => p.CompanyCode == CompanyCode).Where(p => p.WorkFlowId == Workflow.Id).Where(p => p.IsReady).FirstOrDefault();
           // var ListOfIds = db.Database.SqlQuery<string>("select dbo.[FnGetLatestCompletedVersionList]({0},{1},{2})", Steps.Ordinal, "LProducts", CompanyCode).FirstOrDefault();
            var sqlQuery = "select lp.Id,lp.SourceProductId, lp.CompanyCode,lp.ProductCode,lp.Name,sc.SysCat ,CASE when lp.ProductCode IS NOT NULL THEN lp.Name +'|'+lp.ProductCode + ' (' + SysCat + ')' ELSE lp.Name + '| (' + SysCat + ')'  END Product,lp.Version,lp.SysCatId from LProducts lp"
                    + " join RSysCat sc on lp.SysCatId = sc.Id where lp.Version = (select max(lp1.Version) from LProducts lp1 where lp.SourceProductId = lp1.SourceProductId) and lp.CompanyCode = {0} and lp.Id not in ({1}) and lp.SurveyId IS NOT NULL Order by lp.Name";
            //As the following query includes sub query, writing it direct SQL with placeholders instead of LINQ.
            var LProduct = db.Database.SqlQuery<LProductViewModel>(sqlQuery, CompanyCode, CurrentProductId).ToList();
            
            if (LProduct == null)
            {
                throw new HttpResponseException(Request.CreateErrorResponse(HttpStatusCode.NotFound, string.Format(Globals.NotFoundErrorMessage, "PRODUCT")));
            }
            return Ok(LProduct);*/
        }
        public IHttpActionResult GetAllProductsCountsByCompanyCode(string CompanyCode)
        {
            var counts = db.Database.SqlQuery<int>("select count(*) from LProducts lp where lp.CompanyCode={0}", CompanyCode).FirstOrDefault();
            return Ok(counts);
        }

        public IHttpActionResult GetAllProductsByCompanyCode(string CompanyCode, string sortdatafield, string sortorder, string FilterQuery, int PageNumber, int PageSize)
        {
            //[SpGenerateProductsLibrary]
            var Query = "Exec SpGenerateProductsLibrary @CompanyCode,@pagesize,@pagenum,@sortdatafield,@sortorder,@FilterQuery";
            SqlCommand cmd = new SqlCommand(Query);
            cmd.Parameters.AddWithValue("@CompanyCode", CompanyCode);
            cmd.Parameters.AddWithValue("@pagesize", PageSize);
            cmd.Parameters.AddWithValue("@pagenum", PageNumber);
            cmd.Parameters.AddWithValue("@sortdatafield", string.IsNullOrEmpty(sortdatafield) ? (object)System.DBNull.Value : (object)sortdatafield);
            cmd.Parameters.AddWithValue("@sortorder", string.IsNullOrEmpty(sortorder) ? (object)System.DBNull.Value : (object)sortorder);
            cmd.Parameters.AddWithValue("@FilterQuery", string.IsNullOrEmpty(FilterQuery) ? (object)System.DBNull.Value : (object)FilterQuery);
            var dt = Globals.GetDataTableUsingADO(cmd);
            return Ok(dt);

           /* var xx = (from aa in db.LProducts
                      join sc in db.RSysCats on aa.SysCatId equals sc.Id
                      select new
                      {
                aa.Id,aa.CompanyCode,aa.RequestId,aa.ProductCode,aa.Name,
                Product = aa.Name + "-" + aa.ProductCode + " (" + sc.SysCat + ")",
                aa.SysCatId,SysCat = sc.SysCat,aa.Version,
                aa.WFOrdinal,aa.WFStatus,aa.WFType,aa.WFComments,aa.WFRequesterId,aa.WFAnalystId,aa.WFManagerId,aa.WFCurrentOwnerId,aa.WFRequesterRoleId,aa.CreatedById,aa.UpdatedById,
                aa.CreatedDateTime,aa.UpdatedDateTime,aa.LRequest.AuthorizationNumber,RequestName = aa.LRequest.Name,
                //Source = aa.WFOrdinal == 0 ? "On the fly" : "Product Workflow",
                Status = aa.WFStatus.Equals("Parked") ? "On the fly" : ((aa.WFStatus.Equals("Saved") || aa.WFStatus.Equals("InProgress"))? "InProgress" : aa.WFStatus )
                      }).OrderByDescending(aa => aa.CreatedDateTime);
            return Ok(xx);*/
        }
        public IHttpActionResult GetProductsListForRequestCount(string CompanyCode)
        {
            //var sqlQuery = "select  count(*) from  LProducts  lp  join RSysCat sc on lp.SysCatId = sc.Id where lp.WFStatus in ('Completed','Parked') and lp.Version = (select max(lp1.Version) from LProducts lp1  "
            //        +  "  where lp.SourceProductId = lp1.SourceProductId) and lp.CompanyCode = {0} ";
            var sqlQuery = " select  count(*) from  LProducts  lp  join RSysCat sc on lp.SysCatId = sc.Id where lp.WFStatus in ('Completed','Parked') and lp.CompanyCode = {0}";
            var counts = db.Database.SqlQuery<int>(sqlQuery, CompanyCode).FirstOrDefault();
            return Ok(counts);

        }

         //this method will return list of products with latest version whose status is either Completed or Parked.
        public IHttpActionResult GetProductsListForRequest(string CompanyCode, string sortdatafield, string sortorder, string FilterQuery, int PageNumber, int PageSize)
        {
            var Query = "Exec [SpGetProductsListForRequest] @CompanyCode,@pagesize,@pagenum,@sortdatafield,@sortorder,@FilterQuery";
            SqlCommand cmd = new SqlCommand(Query);
            cmd.Parameters.AddWithValue("@CompanyCode", CompanyCode);
            cmd.Parameters.AddWithValue("@pagesize", PageSize);
            cmd.Parameters.AddWithValue("@pagenum", PageNumber);
            cmd.Parameters.AddWithValue("@sortdatafield", string.IsNullOrEmpty(sortdatafield) ? (object)System.DBNull.Value : sortdatafield);
            cmd.Parameters.AddWithValue("@sortorder", string.IsNullOrEmpty(sortorder) ? (object)System.DBNull.Value : sortorder);
            cmd.Parameters.AddWithValue("@FilterQuery", string.IsNullOrEmpty(FilterQuery) ? (object)System.DBNull.Value : FilterQuery);
            var dt = Globals.GetDataTableUsingADO(cmd);
            return Ok(dt);
        }

        //on 15 Oct2018 - SG commented following method. It Seems that It is not being used anymore.
        /*// GET: api/LProducts/5
        [ResponseType(typeof(LProduct))]
        public IHttpActionResult GetByCompanyCode(string CompanyCode)
        {
            //Run DB function to get list of Ids for Latest version
            var Workflow = db.RWorkFlows.Where(p => p.Name == "Products").Where(p => p.CompanyCode == CompanyCode).FirstOrDefault();
            var Steps = db.WSteps.Where(p => p.CompanyCode == CompanyCode).Where(p => p.WorkFlowId==Workflow.Id).Where(p => p.IsReady).FirstOrDefault();
            var ListOfIds = db.Database.SqlQuery<string>("select dbo.[FnGetLatestCompletedVersionList]({0},{1},{2})", Steps.Ordinal, "LProducts",CompanyCode).FirstOrDefault();
            //SS changed WFStatus Condition
            var sqlQuery = "select lp.Id,lp.SourceProductId, lp.CompanyCode,lp.ProductCode,lp.Name,sc.SysCat ,CASE when lp.ProductCode IS NOT NULL THEN lp.Name +'|'+lp.ProductCode + ' (' + SysCat + ')' ELSE lp.Name + '| (' + SysCat + ')'  END Product,lp.Version,lp.SysCatId from LProducts lp"
                    + " join RSysCat sc on lp.SysCatId = sc.Id where lp.WFStatus in ('Completed','Parked') and lp.Version = (select max(lp1.Version) from LProducts lp1 where lp.SourceProductId = lp1.SourceProductId) and lp.CompanyCode = {0} and lp.Id in (SELECT CAST(Item AS INTEGER) FROM dbo.SplitString({1}, ',')) Order by lp.Name";
            //As the following query includes sub query, writing it direct SQL with placeholders instead of LINQ.
            var LProduct = db.Database.SqlQuery<LProductViewModel>(sqlQuery, CompanyCode,ListOfIds).ToList();

            if (LProduct == null)
            {
                throw new HttpResponseException(Request.CreateErrorResponse(HttpStatusCode.NotFound, string.Format(Globals.NotFoundErrorMessage, "PRODUCT")));
            }
            return Ok(LProduct);
        }*/

        [HttpPut]
        // [HttpGet]
        // PUT: api/LProducts/5
        [ResponseType(typeof(void))]
        public async Task<IHttpActionResult> UpdateForRequest(List<LProduct> LProduct, string UserName, string WorkFlow)
        {
            using (var transaction = db.Database.BeginTransaction())
            {

                try
                {
                    foreach (var Product in LProduct)
                    {
                        db.Entry(Product).State = EntityState.Modified;

                        await db.SaveChangesAsync();
                        var Action = db.WActions.Where(p => p.Name == "Edit").FirstOrDefault();

                        var WorkflowDetails = db.RWorkFlows.Where(p => p.Name == WorkFlow).Where(p => p.CompanyCode == Product.CompanyCode).FirstOrDefault();
                        //var StepId = db.Database.SqlQuery<int?>("select Id from WSteps where Ordinal={0} and CompanyCode={1} and WorkFlowId={2}", Product.WFOrdinal, Product.CompanyCode, WorkflowDetails.Id).FirstOrDefault();
                        //get stepId of the request
                        int reqId = (int)Product.RequestId;
                        int reqOrdinal = (int)db.LRequests.Where(a => a.Id == reqId).FirstOrDefault().WFOrdinal;
                        int StepId = db.WSteps.Where(p => p.WorkFlowId == WorkflowDetails.Id).Where(p => p.CompanyCode == Product.CompanyCode).Where(p => p.Ordinal == reqOrdinal).FirstOrDefault().Id;
                        db.SpLogAudit(WorkFlow, WorkFlow, "Audit", string.Empty, "Update",
                               "Update", Product.UpdatedById, Product.WFRequesterRoleId, DateTime.UtcNow, Product.WFStatus, Product.WFStatus,
                               "LProducts", Product.Id, String.IsNullOrEmpty(Product.Name) ? "blank" : Product.Name, WorkflowDetails.Id, Product.CompanyCode, Product.WFComments, StepId, Action.Label, null);
                        db.SaveChanges();
                    }
                }
                catch (DbEntityValidationException dbex)
                {
                    transaction.Rollback();
                    var errorMessage = Globals.GetEntityValidationErrorMessage(dbex);
                    throw new HttpResponseException(Request.CreateErrorResponse((HttpStatusCode)Globals.ExceptionType.Type2, errorMessage));//type 2 error
                }
                catch (Exception ex)
                {
                    transaction.Rollback();
                    if (ex.GetBaseException().GetType() == typeof(SqlException))//check for exception type
                    {
                        //Throw this as HttpResponse Exception to let user know about the mistakes they made, correct them and retry.
                        throw new HttpResponseException(Request.CreateErrorResponse((HttpStatusCode)Globals.ExceptionType.Type2, GetCustomizedErrorMessage(ex)));//type 2 error
                    }
                    else
                    {
                        throw ex;//This exception will be handled in FilterConfig's CustomHandler
                    }
                }
                transaction.Commit();
            }
            // return StatusCode(HttpStatusCode.NoContent);
            return Ok();
        }

        [HttpPut]
        // PUT: api/LProducts/5
        [ResponseType(typeof(void))]
        public async Task<IHttpActionResult> PutLProduct(int id,LProduct LProduct,  string UserName, string WorkFlow, string FileList, string SupportingDocumentsDescription, string FilePath, string OriginalFileNameList)
        { 
            /*if (!ModelState.IsValid)
            {
                throw new HttpResponseException(Request.CreateErrorResponse(HttpStatusCode.BadRequest, string.Format(Globals.BadRequestErrorMessage, "UPDATE", "PRODUCT")));
            }*/

            if (!LProductExists(id))
            {
                throw new HttpResponseException(Request.CreateErrorResponse(HttpStatusCode.NotFound, string.Format(Globals.NotFoundErrorMessage, "PRODUCT")));
            }

            if (id != LProduct.Id)
            {
                throw new HttpResponseException(Request.CreateErrorResponse(HttpStatusCode.BadRequest, string.Format(Globals.BadRequestErrorMessage, "UPDATE", "PRODUCT")));
            }
            using (var transaction = db.Database.BeginTransaction())
            {
                //getting Name from DB, depending on Name, get list of all the versions of the Product then Update their name/PC with new one
                try
                {
                    int? ExistingSurveyId = null;
                    var xx = db.LProducts.Find(id);
                    if (xx != null)
                    {
                        //int? SourceProductId = xx.SourceProductId;
                        int SysCat = xx.SysCatId;
                        ExistingSurveyId = xx.SurveyId;
                        //CR1.5 - no versioning
                        //var ProductList = db.LProducts.Where(aa => aa.SourceProductId == SourceProductId).Where(aa => aa.SysCatId == SysCat).ToList();

                        //foreach (var product in ProductList)
                        //{//updating Name & PC with new Name & PC (of all the existing versions) 
                        //    product.Name = LProduct.Name;
                        //    product.ProductCode = LProduct.ProductCode;
                        //    db.Entry(product).State = EntityState.Modified;
                        //    await db.SaveChangesAsync();
                        //    db.Entry(product).State = EntityState.Detached;
                        //    await db.SaveChangesAsync();
                        //}

                        // If survey id is updated, then 
                        if (ExistingSurveyId != LProduct.SurveyId)
                        {
                            //delete from LFSNextStepAction where ResponseId in(select Id from LFSResponses where ENtityId is productid and ENtityType = LProducts)
                            var NextSteps = db.Database.SqlQuery<LFSNextStepAction>("Select *  from LFSNextStepActions where ResponseId in(select Id from LFSResponses where EntityId={0} and EntityType={1}) ", LProduct.Id, "LProducts").ToList();
                            if (NextSteps != null && NextSteps.Count > 0)
                                foreach (var NSAction in NextSteps)
                                {
                                    db.Entry(NSAction).State = EntityState.Deleted;
                                    await db.SaveChangesAsync();
                                }
                            //delete all the responses for EntityId from LFSResponses (where ENtityId = is productid and ENtityType = LProducts)
                            var responses = db.Database.SqlQuery<LFSRespons>("SELECT * from LFSResponses where EntityId={0} and EntityType={1} ", LProduct.Id, "LProducts").ToList();
                            //db.LFSResponses.RemoveRange(responses);
                            foreach (var res in responses)
                            {
                                db.Entry(res).State = EntityState.Deleted;
                                await db.SaveChangesAsync();
                            }
                        }
                        db.Entry(xx).State = EntityState.Detached;
                        await db.SaveChangesAsync();
                    }
                    LProduct.SspId = xx.SspId;
                    db.Entry(LProduct).State = EntityState.Modified;
                    await db.SaveChangesAsync();
                    var Action = db.WActions.Where(p => p.Name == "Edit").FirstOrDefault();

                    //Comments settings
                    //string fixedComments = "";
                    //if (!string.IsNullOrEmpty(LProduct.AttributeC20))
                    //{

                    //    if (LProduct.AttributeC20.Equals("Edit"))
                    //    {
                    //        fixedComments = "Edited";
                    //    }
                    //}
                    //string AuditComments = fixedComments + " (Status " + LProduct.WFStatus + ") " + LProduct.WFComments;
                    //Comment format updated - 10Oct2018- Andre raised bug for duplicacy of information.
                    string AuditComments = LProduct.WFComments;
                    var WorkflowDetails = db.RWorkFlows.Where(p => p.Name == WorkFlow).Where(p => p.CompanyCode == LProduct.CompanyCode).FirstOrDefault();
                    var StepId = db.Database.SqlQuery<int?>("select Id from WSteps where Ordinal={0} and CompanyCode={1} and WorkFlowId={2}", LProduct.WFOrdinal, LProduct.CompanyCode, WorkflowDetails.Id).FirstOrDefault();
                    //when Product is created on fly, calculate its step
                    if (LProduct.RequestId != null && LProduct.WFStatus == "Parked")
                    {
                        //get stepId of the request
                        int reqId = (int)LProduct.RequestId;
                        var request = db.LRequests.Where(a => a.Id == reqId).FirstOrDefault();
                        int reqOrdinal = (int)request.WFOrdinal;
                        int wfId = db.RWorkFlows.Where(a => a.WFType == request.WFType).FirstOrDefault().Id;
                        StepId = db.WSteps.Where(p => p.WorkFlowId == wfId).Where(p => p.CompanyCode == LProduct.CompanyCode).Where(p => p.Ordinal == reqOrdinal).FirstOrDefault().Id;
                    }
                    db.SpLogAudit(WorkFlow, WorkFlow, "Audit", string.Empty, "Update",
                           "Update", LProduct.UpdatedById, LProduct.WFRequesterRoleId, DateTime.UtcNow, LProduct.WFStatus, LProduct.WFStatus,
                           "LProducts", LProduct.Id, String.IsNullOrEmpty(LProduct.Name) ? "blank" : LProduct.Name, WorkflowDetails.Id, LProduct.CompanyCode, AuditComments, StepId, Action.Label, null);
                    db.SaveChanges();

                    //add supporting documents
                    if (!string.IsNullOrEmpty(FileList))
                    {
                        var OriginalFileArray = OriginalFileNameList.Split(',').ToList();
                        var FileArray = FileList.Split(',').ToList();
                        List<string> DescriptionArray = null;
                        if (!string.IsNullOrEmpty(SupportingDocumentsDescription))
                        {
                            DescriptionArray = SupportingDocumentsDescription.Split(',').ToList();
                        }
                        for (var i = 0; i < FileArray.Count(); i++)
                        {
                            //Move File Over S3
                            var Source = FilePath + "/" + FileArray[i];
                            var Destination = "/" + LProduct.CompanyCode.ToLower() + "/" + ConfigurationManager.AppSettings["S3BucketSupportingDocumentFolder"];
                            var DestinationCompleteFilePath = Destination + "/" + FileArray[i];
                            var sucess = Globals.MoveFileinS3(Source, DestinationCompleteFilePath);
                            if (sucess)
                                FilePath = Destination;

                            var SupportingDocument = new LSupportingDocument
                            {
                                StepId = StepId,
                                FileName = FileArray[i],
                                OriginalFileName = OriginalFileArray[i],
                                FilePath = FilePath,
                                EntityId = LProduct.Id,
                                EntityType = "LProducts",
                                CreatedById = LProduct.UpdatedById, //for the sake of consistency , CreatedById and UpdatedById of Attachment should be the LoggedInUsedId
                                UpdatedById = LProduct.UpdatedById,
                                CreatedByRoleId = LProduct.WFRequesterRoleId.Value,
                                CreatedDateTime = DateTime.UtcNow,
                                UpdatedDateTime = DateTime.UtcNow,
                                //Description = "Uploaded " + OriginalFileArray[i] + " :" + "User Description: " + (!string.IsNullOrEmpty(SupportingDocumentsDescription) ? DescriptionArray[i] : null)
                                Description = (!string.IsNullOrEmpty(SupportingDocumentsDescription) ? DescriptionArray[i] : null)
                            };
                            db.LSupportingDocuments.Add(SupportingDocument);
                            db.SaveChanges();
                            /*(b) An entry is to be made in audit table when a file is attached. (RelyProcessName, VFProcessName = WFName, ControlCode = 'Audiit',
                             * Action = 'AddAttachment',ActionType = Create/Edit depending upon the mode (create/edit) in which the form is open, OldStatus,
                             * NewStatus should be same as current status of the entry, comments = 
                             * "Uploaded <FileName> :" + "User Description: " + <Description entered by user in FileUploadUtility>, SupportindDocumentId
                            = LSupportingDocument.Id, rest of the columns are obvious.*/
                            db.SpLogAudit(WorkFlow, WorkFlow, "Audit", string.Empty, "AddAttachment",
                           "Create", LProduct.UpdatedById, LProduct.WFRequesterRoleId, DateTime.UtcNow, LProduct.WFStatus, LProduct.WFStatus,
                           "LProducts", LProduct.Id, String.IsNullOrEmpty(LProduct.Name) ? "blank" : LProduct.Name, WorkflowDetails.Id, LProduct.CompanyCode, SupportingDocument.Description, StepId, Action.Label, SupportingDocument.Id);
                            db.SaveChanges();
                        }
                    }
                }
                catch (DbEntityValidationException dbex)
                {
                    transaction.Rollback();
                    var errorMessage = Globals.GetEntityValidationErrorMessage(dbex);
                    throw new HttpResponseException(Request.CreateErrorResponse((HttpStatusCode)Globals.ExceptionType.Type2, errorMessage));//type 2 error
                }
                catch (Exception ex)
                {
                    transaction.Rollback();
                    if (ex.GetBaseException().GetType() == typeof(SqlException))//check for exception type
                    {
                        //Throw this as HttpResponse Exception to let user know about the mistakes they made, correct them and retry.
                        throw new HttpResponseException(Request.CreateErrorResponse((HttpStatusCode)Globals.ExceptionType.Type2, GetCustomizedErrorMessage(ex)));//type 2 error
                    }
                    else
                    {
                        throw ex;//This exception will be handled in FilterConfig's CustomHandler
                    }
                }
                transaction.Commit();
            }
            // return StatusCode(HttpStatusCode.NoContent);
           
            return Ok();
        }

        [HttpPut]
        // PUT: api/LProducts/5
        [ResponseType(typeof(void))]
        public async Task<IHttpActionResult> DetachProductFromRequest(int id)
        {
            if (!ModelState.IsValid)
            {
                throw new HttpResponseException(Request.CreateErrorResponse(HttpStatusCode.BadRequest, string.Format(Globals.BadRequestErrorMessage, "UPDATE", "PRODUCT")));
            }

            if (!LProductExists(id))
            {
                throw new HttpResponseException(Request.CreateErrorResponse(HttpStatusCode.NotFound, string.Format(Globals.NotFoundErrorMessage, "PRODUCT")));
            }
            //detaching product from request - deleting the particular version of product so as to make the product usuable again.
            //when deleting the Product (that were created on fly), it was nullifying RequestId only from Product, no change in Ordinal and WFStatus. thus making the product non-usuable anywhere.
            var LProduct = db.LProducts.Find(id);
            string EntityType = "LProducts";
            using (var transaction = db.Database.BeginTransaction())
            {
                try
                {
                    // delete supportingdocuments
                    var DocList = db.LSupportingDocuments.Where(p => p.EntityId == id).Where(p => p.EntityType == EntityType).ToList();
                    //delete Audit entries if exist for Supporting document
                    foreach (var doc in DocList) {
                      var auditdata =  db.LAudits.Where(p => p.SupportingDocumentId == doc.Id).Where(p => p.EntityId == id).Where(p => p.EntityType == EntityType).ToList();
                        db.LAudits.RemoveRange(auditdata);
                        await db.SaveChangesAsync();
                    }
                    db.LSupportingDocuments.RemoveRange(DocList);
                    await db.SaveChangesAsync();

                    // delete mentityportfolio
                    var PortfoliList = db.MEntityPortfolios.Where(p => p.EntityId == id).Where(p => p.EntityType == EntityType).ToList();
                    db.MEntityPortfolios.RemoveRange(PortfoliList);
                    await db.SaveChangesAsync();

                    // delete ProductPobs
                    var PobList = db.LProductPobs.Where(p => p.ProductId == id).ToList();
                    db.LProductPobs.RemoveRange(PobList);
                    await db.SaveChangesAsync();

                    //delete product
                    //LProduct.RequestId = null;
                    db.LProducts.Remove(LProduct);
                    //db.Entry(LProduct).State = EntityState.Modified;
                    await db.SaveChangesAsync();
                }
                catch (DbEntityValidationException dbex)
                {
                    transaction.Rollback();
                    var errorMessage = Globals.GetEntityValidationErrorMessage(dbex);
                    throw new HttpResponseException(Request.CreateErrorResponse((HttpStatusCode)Globals.ExceptionType.Type2, errorMessage));//type 2 error
                }
                catch (Exception ex)
                {
                    transaction.Rollback();
                    if (ex.GetBaseException().GetType() == typeof(SqlException))//check for exception type
                    {
                        //Throw this as HttpResponse Exception to let user know about the mistakes they made, correct them and retry.
                        throw new HttpResponseException(Request.CreateErrorResponse((HttpStatusCode)Globals.ExceptionType.Type2, GetCustomizedErrorMessage(ex)));//type 2 error
                    }
                    else
                    {
                        throw ex;//This exception will be handled in FilterConfig's CustomHandler
                    }
                }
                transaction.Commit();
            }
            // return StatusCode(HttpStatusCode.NoContent);
            return Ok();
        }
        
        [HttpPost]
        // [HttpGet]
        // POST: api/LProducts
        [ResponseType(typeof(LProduct))]
        public async Task<IHttpActionResult> PostLProduct(LProduct LProduct, string UserName, string WorkFlow, string FileList, string SupportingDocumentsDescription, string FilePath, string OriginalFileNameList)
        {
            //LProduct LProduct = new LProduct();
            //LProduct.CreatedById = 1; LProduct.UpdatedById = 1; LProduct.CreatedDateTime = DateTime.Now; LProduct.UpdatedDateTime = DateTime.Now;
            //LProduct.Name = "P_2018_1_3"; LProduct.SysCatId = 3; LProduct.Version = 1; LProduct.CompanyCode = "DE"; LProduct.Status = "New";
            //LProduct.IsAccMemoBuilt = false; LProduct.IsMgmtSummaryBuilt = false;LProduct.ProductCode = "P_2018_1_3";LProduct.WFStatus = "Saved";LProduct.WFOrdinal = 1;
            //LProduct.AttributeC20 = "Create";
            using (var transaction = db.Database.BeginTransaction())
            {
                try
                {
                    
                    int? ExistingSurveyId = null;
                    var Action = db.WActions.Where(p => p.Name == "Create").FirstOrDefault();
                    var WorkflowDetails = db.RWorkFlows.Where(p => p.Name == WorkFlow).Where(p => p.CompanyCode == LProduct.CompanyCode).FirstOrDefault();
                    //getting Name from DB, depending on Name, get list of all the versions of the Product then Update their name/PC with new one
                    //var xx = (from aa in db.LProducts.Where(aa => aa.Id == LProduct.Id) select new { aa.Name, aa.SysCatId,aa.SurveyId /*,aa.SourceProductId */}).FirstOrDefault();
                    //List<LProduct> ProductList = null;
                    //if (xx != null)
                   // {
                        //string ProductName = xx.Name;
                        //int SysCat = xx.SysCatId;
                        //ExistingSurveyId = xx.SurveyId;
                        //No version in Cr1.5
                        //ProductList = db.LProducts.Where(aa => aa.SourceProductId == xx.SourceProductId).Where(aa => aa.SysCatId == SysCat).ToList();

                        //foreach (var product in ProductList)
                        //{//updating Name & PC with new Name & PC (of all the existing versions) 
                        //    product.Name = LProduct.Name;
                        //    product.ProductCode = LProduct.ProductCode;

                            
                        //    db.Entry(product).State = EntityState.Modified;
                        //    await db.SaveChangesAsync();
                        //    db.Entry(product).State = EntityState.Detached;
                        //}
                    //}
                    //SG Commenting Sequence code, no more required. SSPDimension table is created
                    ////getting sequence value
                    //var Sequence_qry = db.Database.SqlQuery<Int32>("SELECT NEXT VALUE FOR dbo.SQ_SspId");
                    //var Task = Sequence_qry.SingleAsync();
                    //int sequenceValue = Task.Result;
                    //LProduct.SspId = sequenceValue;
                    LProduct.Id = 0;
                    db.LProducts.Add(LProduct);
                    await db.SaveChangesAsync();
                    //after product is created successfully, update its SourceProductId with the Id value.

                    //Set End date for product of version=1, for greater than 1 version, there is trigger(TrCalculateEndDateForProduct)
                    LProduct.AttributeD10 = DateTime.ParseExact("31/12/2099 13:00:00", "dd/MM/yyyy HH:mm:ss", CultureInfo.InvariantCulture);
                    //CR1.5 - field removed
                    //LProduct.SourceProductId = LProduct.Id;
                    //db.Entry(LProduct).State = EntityState.Modified;
                    //await db.SaveChangesAsync();
                    //string fixedComments = "";
                    //if (!string.IsNullOrEmpty(LProduct.AttributeC20))
                    //{
                    //    if (LProduct.AttributeC20.Equals("Change"))
                    //    {
                    //        fixedComments = "Opened for Changes";
                    //    }
                    //    else if (LProduct.AttributeC20.Equals("Create"))
                    //    {
                    //        fixedComments = "Created the Product";
                    //    }
                    //}
                    //string AuditComments = fixedComments + " (Status " + LProduct.WFStatus + ") " + LProduct.WFComments;
                    //Comment format updated - 10Oct2018- Andre raised bug for duplicacy of information.
                    string AuditComments = LProduct.WFComments;
                    var StepId = db.Database.SqlQuery<int?>("select Id from WSteps where Ordinal={0} and CompanyCode={1} and WorkFlowId={2}", LProduct.WFOrdinal, LProduct.CompanyCode, WorkflowDetails.Id).FirstOrDefault();

                    //when Product is created on fly, calculate its step
                    if (LProduct.RequestId != null && LProduct.WFStatus == "Parked")
                    { 
                        //get stepId of the request
                        int reqId = (int)LProduct.RequestId;
                        var request = db.LRequests.Where(a => a.Id == reqId).FirstOrDefault();
                        int reqOrdinal = (int)request.WFOrdinal;
                        int wfId = db.RWorkFlows.Where(a => a.WFType == request.WFType).FirstOrDefault().Id;
                        StepId = db.WSteps.Where(p => p.WorkFlowId == wfId).Where(p => p.CompanyCode == LProduct.CompanyCode).Where(p => p.Ordinal == reqOrdinal).FirstOrDefault().Id;
                    } 

                    db.SpLogAudit(WorkFlow, WorkFlow, "Audit", string.Empty, "Create",
                           "Create", LProduct.UpdatedById, LProduct.WFRequesterRoleId, DateTime.UtcNow, LProduct.WFStatus, LProduct.WFStatus,
                           "LProducts", LProduct.Id,String.IsNullOrEmpty(LProduct.Name)? "blank":LProduct.Name, WorkflowDetails.Id, LProduct.CompanyCode, AuditComments, StepId, Action.Label, null);
                    db.SaveChanges();

                    //add supporting documents
                    if (!string.IsNullOrEmpty(FileList))
                    {
                        var OriginalFileArray = OriginalFileNameList.Split(',').ToList();
                        var FileArray = FileList.Split(',').ToList();
                        List<string> DescriptionArray = null;
                        if (!string.IsNullOrEmpty(SupportingDocumentsDescription))
                        {
                            DescriptionArray = SupportingDocumentsDescription.Split(',').ToList();
                        }
                        for (var i = 0; i < FileArray.Count(); i++)
                        {//Move File Over S3
                            var Source = FilePath + "/" + FileArray[i];
                            var Destination = "/" + LProduct.CompanyCode.ToLower() + "/" + ConfigurationManager.AppSettings["S3BucketSupportingDocumentFolder"];
                            var DestinationCompleteFilePath = Destination + "/" + FileArray[i];
                            var sucess = Globals.MoveFileinS3(Source, DestinationCompleteFilePath);
                            if (sucess)
                                FilePath = Destination;

                            var SupportingDocument = new LSupportingDocument
                            {
                                StepId = StepId,
                                FileName = FileArray[i],
                                OriginalFileName = OriginalFileArray[i],
                                FilePath = FilePath,
                                EntityId = LProduct.Id,
                                EntityType = "LProducts",
                                CreatedById = LProduct.UpdatedById, //for the sake of consistency , CreatedById and UpdatedById of Attachment should be the LoggedInUsedId
                                UpdatedById = LProduct.UpdatedById,
                                CreatedByRoleId = LProduct.WFRequesterRoleId.Value,
                                CreatedDateTime = DateTime.UtcNow,
                                UpdatedDateTime = DateTime.UtcNow,
                                // Description = "Uploaded " + OriginalFileArray[i] + " :" + "User Description: " + (!string.IsNullOrEmpty(SupportingDocumentsDescription) ? DescriptionArray[i] : null)
                                Description = (!string.IsNullOrEmpty(SupportingDocumentsDescription) ? DescriptionArray[i] : null)
                            };
                            db.LSupportingDocuments.Add(SupportingDocument);
                            db.SaveChanges();
                            /*(b) An entry is to be made in audit table when a file is attached. (RelyProcessName, VFProcessName = WFName, ControlCode = 'Audiit',
                             * Action = 'AddAttachment',ActionType = Create/Edit depending upon the mode (create/edit) in which the form is open, OldStatus,
                             * NewStatus should be same as current status of the entry, comments = 
                             * "Uploaded <FileName> :" + "User Description: " + <Description entered by user in FileUploadUtility>, SupportindDocumentId
                            = LSupportingDocument.Id, rest of the columns are obvious.*/
                            db.SpLogAudit(WorkFlow, WorkFlow, "Audit", string.Empty, "AddAttachment",
                           "Create", LProduct.UpdatedById, LProduct.WFRequesterRoleId, DateTime.UtcNow, LProduct.WFStatus, LProduct.WFStatus,
                           "LProducts", LProduct.Id, String.IsNullOrEmpty(LProduct.Name) ? "blank" : LProduct.Name, WorkflowDetails.Id, LProduct.CompanyCode, SupportingDocument.Description, StepId, Action.Label, SupportingDocument.Id);
                            db.SaveChanges();
                        }
                    }
                    MEntityPortfolio MEP = new MEntityPortfolio();
                    MEP.EntityId = LProduct.Id;
                    MEP.EntityType = "LProducts";
                    int PortfolioId = db.LPortfolios.Where(m => m.CompanyCode == LProduct.CompanyCode).FirstOrDefault().Id;
                    MEP.PortfolioId = PortfolioId;
                    db.MEntityPortfolios.Add(MEP);
                    db.SaveChanges();
                }
                catch (DbEntityValidationException dbex)
                {
                    transaction.Rollback();
                    var errorMessage = Globals.GetEntityValidationErrorMessage(dbex);
                    throw new HttpResponseException(Request.CreateErrorResponse((HttpStatusCode)Globals.ExceptionType.Type2, errorMessage));//type 2 error
                }
                catch (Exception ex)
                {
                    transaction.Rollback();
                    if (ex.GetBaseException().GetType() == typeof(SqlException))//check for exception type
                    {
                        //Throw this as HttpResponse Exception to let user know about the mistakes they made, correct them and retry.
                        throw new HttpResponseException(Request.CreateErrorResponse((HttpStatusCode)Globals.ExceptionType.Type2, GetCustomizedErrorMessage(ex)));//type 2 error
                    }
                    else
                    {
                        throw ex;//This exception will be handled in FilterConfig's CustomHandler
                    }
                }
                transaction.Commit();
            }
            return Ok(LProduct.Id);
        }

        // DELETE: api/LProducts/5
        [ResponseType(typeof(LProduct))]
        public async Task<IHttpActionResult> DeleteLProduct(int id)
        {
            LProduct LProduct = await db.LProducts.FindAsync(id);
            if (LProduct == null)
            {
                throw new HttpResponseException(Request.CreateErrorResponse(HttpStatusCode.NotFound, string.Format(Globals.NotFoundErrorMessage, "PRODUCT")));
            }

            try
            {
                db.LProducts.Remove(LProduct);
                await db.SaveChangesAsync();

            }
            catch (Exception ex)
            {
                if (ex.GetBaseException().GetType() == typeof(SqlException))//check for exception type
                {
                    //Throw this as HttpResponse Exception to let user know about the mistakes they made, correct them and retry. 
                    throw new HttpResponseException(Request.CreateErrorResponse((HttpStatusCode)Globals.ExceptionType.Type2, GetCustomizedErrorMessage(ex)));//type 2 error
                }
                else
                {
                    //Question for Shivani - why not systematic error handling here?
                    throw ex;
                }
            }
            return Ok(LProduct);
        }

        [HttpGet]
        //This Function will check the existence of ProductCode in the database
        public IHttpActionResult CheckExistenceOfProductCode(string CompanyCode, string ProductCode)
        {
            var qry = "select count(*) from LProducts where ProductCode={0} and CompanyCode={1}";
            var count = db.Database.SqlQuery<int>(qry, ProductCode, CompanyCode).FirstOrDefault();
            return Ok(count);
        }

        private bool LProductExists(int id)
        {
            return db.LProducts.Count(e => e.Id == id) > 0;
        }

        private string GetCustomizedErrorMessage(Exception ex)
        {
            //Convert the exception to SqlException to get the error message returned by database.
            var SqEx = ex.GetBaseException() as SqlException;
            //Depending upon the constraint failed return appropriate error message
            if (SqEx.Message.IndexOf("FK_LProducts_LProductPobs_ProductId", StringComparison.OrdinalIgnoreCase) >= 0)
                return (string.Format(Globals.CanNotUpdateDeleteErrorMessage, "PRODUCT POB", "PRODUCT"));
            //else if (SqEx.Message.IndexOf("FK_LProducts_LProductContractDurations_ProductId", StringComparison.OrdinalIgnoreCase) >= 0)
            //    return (string.Format(Globals.CanNotUpdateDeleteErrorMessage, "PRODUCT", "CONTRACT DURATIONS"));
            //else if (SqEx.Message.IndexOf("FK_LProducts_MLProductLPob_ProductId", StringComparison.OrdinalIgnoreCase) >= 0)
            //    return (string.Format(Globals.CanNotUpdateDeleteErrorMessage, "PRODUCT", "PRODUCT POB"));UQ_LProducts_CompanyCode_ProductName_SysCatId_Version
            //else if (SqEx.Message.IndexOf("UQ_LProducts_CompanyCode_ProductName_SysCatId_Version", StringComparison.OrdinalIgnoreCase) >= 0)
            //    return (string.Format(Globals.CannotInsertDuplicateErrorMessage, "PRODUCTS")); 
            else if (SqEx.Message.IndexOf("UQ_LProducts_CompanyCode_ProductName_SysCatId_Version", StringComparison.OrdinalIgnoreCase) >= 0)
                return (string.Format(Globals.CannotInsertDuplicateErrorMessage, "PRODUCTS"));
            else
            {
                //Something else failed return original error message as retrieved from database
                //Add complete Url in description
                var UserName = "";//System.Web.HttpContext.Current.Session["UserName"] as string;
                string UrlString = Convert.ToString(Request.RequestUri.AbsolutePath);
                var ErrorDesc = "";
                var Desc = Request.GetQueryNameValuePairs().ToDictionary(x => x.Key, x => x.Value);
                if (Desc.Count() > 0)
                    ErrorDesc = string.Join(",", Desc);
                string[] s = Request.RequestUri.AbsolutePath.Split('/');//This array will provide controller name at 2nd and action name at 3rd index position
                                                                        //db.SpLogError("RELY-API", s[2], s[3], SqEx.Message, UserName, "Type2", ErrorDesc, "resolution", "L2Admin", "field", 0, "New");
                                                                        //return Globals.SomethingElseFailedInDBErrorMessage;

                ObjectParameter Result = new ObjectParameter("Result", typeof(int)); //return parameter is declared
                db.SpLogError("RELY-API", s[2], s[3], SqEx.Message, UserName, "Type2", ErrorDesc, "resolution", "L2Admin", "field", 0, "New", Result).FirstOrDefault();
                int errorid = (int)Result.Value; //getting value of output parameter
                //return Globals.SomethingElseFailedInDBErrorMessage;
                return (string.Format(Globals.SomethingElseFailedInDBErrorMessage, errorid));
            }
        }

    }
}
