using RELY_API.Models;
using RELY_API.Utilities;
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Validation;
using System.Data.SqlClient;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Threading.Tasks;
using System.Web.Http;
using System.Web.Http.Description;

namespace RELY_API.Controllers
{
    [CustomExceptionFilter]
    public class LFSResponsesController : ApiController
    {
        private RELYDevDbEntities db = new RELYDevDbEntities();

        // GET: api/GetLFSResponses? Id
        //Method to Get Data in Grid

        public IHttpActionResult GetLFSResponsesById(int Id, string UserName, string WorkFlow)
        {
            var xx = (from aa in db.LFSResponses.Where(p => p.Id == Id)
                      select new
                      {
                          aa.Id,
                          aa.EntityType,
                          aa.EntityId,
                          aa.QuestionCode,
                          aa.IsReponseAutoGenerated,
                          aa.Response,
                          aa.ConclusionText,
                          aa.Comments,
                          aa.CreatedById,
                          aa.CreatedDateTime,
                          aa.UpdatedById,
                          aa.UpdatedDateTime
                      }).OrderBy(p => p.Id);
            return Ok(xx);
        }

        // GET: api/GetLFSResponses? SectionItemId
        //Method to Get Data in Grid

        //commenting after model update as SectionItemId column is removed now
        /*  public IHttpActionResult GetLFSResponsesBySectionItemId(int SectionItemId, string UserName, string WorkFlow)
          {
              var xx = (from aa in db.LFSResponses.Where(p => p.SectionItemId == SectionItemId)
                        select new
                        {
                            aa.Id,
                            aa.SectionItemId,
                            aa.RequestId,
                            aa.ProductId,
                            aa.IsReponseAutoGenerated,
                            aa.Response,
                            aa.ConclusionText,
                            aa.Comments,
                            aa.CreatedById,
                            aa.CreatedDateTime,
                            aa.UpdatedById,
                            aa.UpdatedDateTime
                        }).First();
              return Ok(xx);
          }
          */
        // GET: api/GetLFSResponses? RequestId
        //Method to Get Data in Grid

        public IHttpActionResult GetLFSResponsesByEntityId(int EntityId, string UserName, string WorkFlow)
        {
            //31Dec2018 - Shivani - SuRVEY bUG - LfsResponse will hold SourceProductId instead of Actual Product Id.
            //Get SOurceProductId for the provided EntityId 
            //int SourceProductId = (int)db.LProducts.Where(a => a.Id == EntityId).Select(a => a.SourceProductId).FirstOrDefault();
            //CR1.5 -  is removed
            //int SourceProductId = (int)db.LProducts.Where(a => a.Id == EntityId).Select(a => a.SourceProductId).FirstOrDefault();
            //EntityId = SourceProductId;

            var xx = (from aa in db.LFSResponses.Where(p => p.EntityId == EntityId)
                      select new
                      {
                          aa.Id,
                          aa.QuestionCode,
                          aa.EntityId,
                          aa.EntityType,
                          aa.IsReponseAutoGenerated,
                          aa.Response,
                          aa.ConclusionText,
                          aa.Comments,
                          aa.CreatedById,
                          aa.CreatedDateTime,
                          aa.UpdatedById,
                          aa.UpdatedDateTime
                      }).First();
            return Ok(xx);
        }

        // POST: api/LFSResponses
        //Method to Post Data from app to db
       //[HttpGet]
        [ResponseType(typeof(LFSRespons))]
       public async Task<IHttpActionResult> PostLFSResponses(LFSRespons LFSRespons,string CompanyCode,string UserName, string WorkFlow)
       {
            // LFSRespons LFSRespons = new LFSRespons { EntityId = 198, EntityType = "LProducts", Response = "No", QuestionCode = "MK_COC_7b",CreatedById=1,UpdatedById=1,CreatedDateTime=DateTime.Now,UpdatedDateTime=DateTime.Now };
            //31Dec2018 - Shivani - SuRVEY bUG - LfsResponse will hold SourceProductId instead of Actual Product Id.
            //Get SOurceProductId for the provided EntityId 
            //CR1.5 - SourceProductId is removed
            //int SourceProductId = (int)db.LProducts.Where(a => a.Id == LFSRespons.EntityId).Select(a => a.SourceProductId).FirstOrDefault();
            //LFSRespons.EntityId = SourceProductId;
            using (var transaction = db.Database.BeginTransaction())
            {
                try
                {
                    var qry = "Select count(*)  From LFSResponses Where EntityId={0} And EntityType = 'LProducts' And QuestionCode={1}";
                    var count = db.Database.SqlQuery<int>(qry, LFSRespons.EntityId, LFSRespons.QuestionCode).FirstOrDefault();
                    if (count == 0)
                    {
                        db.LFSResponses.Add(LFSRespons);
                        await db.SaveChangesAsync();
                        //find out NextSteps for Question,Answer,CompanyCode
                        var NextSteps = db.LFSNextSteps.Where(a => a.QuestionCode == LFSRespons.QuestionCode).Where(a => a.AnswerOption.Trim() == LFSRespons.Response.Trim()).Where(a => a.CompanyCode == CompanyCode).ToList();
                        foreach (var NS in NextSteps)
                        {
                            // Insert Into LFSNextStepsActions(Next Steps form LFSNextSteps where CompanyCode, QuestionCode, AnswerOption match)-- Note there could be multiple next steps
                            LFSNextStepAction NextStepAction = new LFSNextStepAction
                            {
                                ResponseId = LFSRespons.Id,
                                NextStepId = NS.Id,
                                IsDone = false,
                                ActionTaken = null,
                                CreatedById = LFSRespons.CreatedById,
                                CreatedDateTime = DateTime.Now,
                                UpdatedById = LFSRespons.UpdatedById,
                                UpdatedDateTime = DateTime.Now
                            };
                            db.LFSNextStepActions.Add(NextStepAction);
                            await db.SaveChangesAsync();
                        }

                    }
                    else//responded already
                    {
                        var result = db.LFSResponses.Where(p => p.QuestionCode == LFSRespons.QuestionCode).Where(p => p.EntityId == LFSRespons.EntityId).Where(p => p.EntityType == "LProducts").FirstOrDefault();
                        string existingResponse = result.Response;
                        //Check if the existing Answer is same as provided answer
                        if (existingResponse.Trim() != LFSRespons.Response.Trim())
                        {
                            //Remove existing NextSteps and update Responses
                            //Delete from LFSNextStepActions where ReponseId = (select id from LFSReposnses where EntityId, ENtityType, QuestionCode match )

                            //Trigger is also fired on update/delete for LFSResponse to take care of nested questions/items
                            var NextStepActionsOld = db.LFSNextStepActions.Where(p => p.ResponseId == result.Id).ToList();

                            //var NextStepActionsList = db.Database.SqlQuery<LFSNextStepAction>("Select *  from LFSNextStepActions where ResponseId in(select Id from LFSResponses where EntityId={0} and EntityType={1} and QuestionCode={2}) ", LFSRespons.EntityId, "LProducts", LFSRespons.QuestionCode).ToList();
                            db.LFSNextStepActions.RemoveRange(NextStepActionsOld);
                            //foreach (var NSAction in NextStepActionsList)
                            //{
                            //    db.Entry(NSAction).State = EntityState.Deleted;
                            //    await db.SaveChangesAsync();
                            //}
                            await db.SaveChangesAsync();

                            //Update from LFSResponses where EntityId, EntityType, QuestionCode match
                            result.Response = LFSRespons.Response;
                            result.UpdatedById = LFSRespons.UpdatedById;
                            result.UpdatedDateTime = LFSRespons.UpdatedDateTime;
                            db.Entry(result).State = EntityState.Modified;//update existing one
                            await db.SaveChangesAsync();

                            //find out NextSteps for Question,Answer,CompanyCode
                            var NextSteps = db.LFSNextSteps.Where(a => a.QuestionCode == LFSRespons.QuestionCode).Where(a => a.AnswerOption.Trim() == LFSRespons.Response.Trim()).Where(a => a.CompanyCode == CompanyCode).ToList();
                            foreach(var NS in NextSteps)
                            {
                                // Insert Into LFSNextStepsActions(Next Steps form LFSNextSteps where CompanyCode, QuestionCode, AnswerOption match)-- Note there could be multiple next steps
                                LFSNextStepAction NextStepAction = new LFSNextStepAction
                                {
                                    ResponseId = result.Id,
                                    NextStepId = NS.Id,
                                    IsDone = false,
                                    ActionTaken = null,
                                    CreatedById = LFSRespons.CreatedById,
                                    CreatedDateTime = DateTime.Now,
                                    UpdatedById = LFSRespons.UpdatedById,
                                    UpdatedDateTime = DateTime.Now
                                };
                                db.LFSNextStepActions.Add(NextStepAction);
                                await db.SaveChangesAsync();
                            }
                            
                            

                        }
                    }

                }
                catch (DbEntityValidationException dbex)
                {
                    transaction.Rollback();
                    var errorMessage = Globals.GetEntityValidationErrorMessage(dbex);
                    throw new HttpResponseException(Request.CreateErrorResponse((HttpStatusCode)Globals.ExceptionType.Type2, errorMessage));//type 2 error
                }
                catch (Exception ex)
                {
                    transaction.Rollback();
                    if (ex.GetBaseException().GetType() == typeof(SqlException))//check for exception type
                    {
                        //Throw this as HttpResponse Exception to let user know about the mistakes they made, correct them and retry.
                        throw new HttpResponseException(Request.CreateErrorResponse((HttpStatusCode)Globals.ExceptionType.Type2, GetCustomizedErrorMessage(ex)));//type 2 error
                    }
                    else
                    {
                        throw ex;//This exception will be handled in FilterConfig's CustomHandler
                    }

                }
                transaction.Commit();
            }
            return Ok();

        }

        // PUT: api/LFSResponses?Id
        //Method to update Requested Data by User in db
        [ResponseType(typeof(void))]
        public async Task<IHttpActionResult> PutLFSResponses(int Id, LFSRespons LFSRespons, string UserName, string WorkFlow)
        {
            if (!ModelState.IsValid)
            {
                throw new HttpResponseException(Request.CreateErrorResponse(HttpStatusCode.BadRequest, string.Format(Globals.BadRequestErrorMessage, "UPDATE", "RESPONS")));
            }

            if (!LFSResponsExists(Id))
            {
                throw new HttpResponseException(Request.CreateErrorResponse(HttpStatusCode.NotFound, string.Format(Globals.NotFoundErrorMessage, "RESPONS")));
            }

            try
            {
                db.Entry(LFSRespons).State = EntityState.Modified;
                await db.SaveChangesAsync();
            }
            catch (DbEntityValidationException dbex)
            {
                var errorMessage = Globals.GetEntityValidationErrorMessage(dbex);
                throw new HttpResponseException(Request.CreateErrorResponse((HttpStatusCode)Globals.ExceptionType.Type2, errorMessage));//type 2 error
            }
            catch (Exception ex)
            {

                if (ex.GetBaseException().GetType() == typeof(SqlException))//check for exception type
                {
                    //Throw this as HttpResponse Exception to let user know about the mistakes they made, correct them and retry.
                    throw new HttpResponseException(Request.CreateErrorResponse((HttpStatusCode)Globals.ExceptionType.Type2, GetCustomizedErrorMessage(ex)));//type 2 error
                }
                else
                {
                    throw ex;//This exception will be handled in FilterConfig's CustomHandler
                }
            }

            return Ok(LFSRespons);
        }

        // Delete: api/LFSResponses?Id
        [ResponseType(typeof(LFSRespons))]

        public async Task<IHttpActionResult> DeleteLFSResponses(int Id, string UserName, string WorkFlow)
        {
            LFSRespons LFSRespons = await db.LFSResponses.FindAsync(Id);
            if (LFSRespons == null)
            {
                throw new HttpResponseException(Request.CreateErrorResponse(HttpStatusCode.NotFound, string.Format(Globals.NotFoundErrorMessage, "Respons")));
            }

            try
            {
                db.LFSResponses.Remove(LFSRespons);
                await db.SaveChangesAsync();
            }
            catch (Exception ex)
            {
                if (ex.GetBaseException().GetType() == typeof(SqlException))//check for exception type
                {
                    //Throw this as HttpResponse Exception to let user know about the mistakes they made, correct them and retry. 
                    throw new HttpResponseException(Request.CreateErrorResponse((HttpStatusCode)Globals.ExceptionType.Type2, GetCustomizedErrorMessage(ex)));//type 2 error
                }
                else
                {
                    throw ex;
                }
            }
            return Ok(LFSRespons);
        }

        private bool LFSResponsExists(int Id)
        {
            return db.LFSResponses.Count(e => e.Id == Id) > 0;
        }

        private string GetCustomizedErrorMessage(Exception ex)
        {
            //Convert the exception to SqlException to get the error message returned by database.
            var SqEx = ex.GetBaseException() as SqlException;
            //Depending upon the constraint failed return appropriate error message
            if (SqEx.Message.IndexOf("FK_LFSResponses_LNextStepActions_ResponseId", StringComparison.OrdinalIgnoreCase) >= 0)
                return (string.Format(Globals.CanNotUpdateDeleteErrorMessage, "RESPONSE", "NEXT STEP ACTIONS"));
            else if
                (SqEx.Message.IndexOf("UQ_LFSResponses_EntityId_EntityType_QuestionCode", StringComparison.OrdinalIgnoreCase) >= 0)
                return (string.Format(Globals.CannotInsertDuplicateErrorMessage, "RESPONSE"));
            else
            {
                //Something else failed return original error message as retrieved from database
                //Add complete Url in description
                var UserName = "";//System.Web.HttpContext.Current.Session["UserName"] as string;
                string UrlString = Convert.ToString(Request.RequestUri.AbsolutePath);
                var ErrorDesc = "";
                var Desc = Request.GetQueryNameValuePairs().ToDictionary(x => x.Key, x => x.Value);
                if (Desc.Count() > 0)
                    ErrorDesc = string.Join(",", Desc);
                string[] s = Request.RequestUri.AbsolutePath.Split('/');//This array will provide controller name at 2nd and action name at 3 rd index position
                //db.SpLogError("RELY-API", s[2], s[3], SqEx.Message, UserName, "Type2", ErrorDesc, "resolution", "L2Admin", "field", 0, "New");
                //return Globals.SomethingElseFailedInDBErrorMessage;

             ObjectParameter Result = new ObjectParameter("Result", typeof(int)); //return parameter is declared
                db.SpLogError("RELY-API", s[2], s[3], SqEx.Message, UserName, "Type2", ErrorDesc, "resolution", "L2Admin", "field", 0, "New", Result).FirstOrDefault();
                int errorid = (int)Result.Value; //getting value of output parameter
                //return Globals.SomethingElseFailedInDBErrorMessage;
                return (string.Format(Globals.SomethingElseFailedInDBErrorMessage, errorid));
            }
        }
    }

}

