//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RELY_API.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class RELYDevDbEntities : DbContext
    {
        public RELYDevDbEntities()
            : base("name=RELYDevDbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<FlexTable> FlexTables { get; set; }
        public virtual DbSet<GAuthorizableObject> GAuthorizableObjects { get; set; }
        public virtual DbSet<GCompany> GCompanies { get; set; }
        public virtual DbSet<GCopaDimension> GCopaDimensions { get; set; }
        public virtual DbSet<GEmailConfiguration> GEmailConfigurations { get; set; }
        public virtual DbSet<GErrorLog> GErrorLogs { get; set; }
        public virtual DbSet<GGlobalPob> GGlobalPobs { get; set; }
        public virtual DbSet<GKeyValue> GKeyValues { get; set; }
        public virtual DbSet<GMenu> GMenus { get; set; }
        public virtual DbSet<GSecurityQuestion> GSecurityQuestions { get; set; }
        public virtual DbSet<LAccountingScenario> LAccountingScenarios { get; set; }
        public virtual DbSet<LASLifecycleEvent> LASLifecycleEvents { get; set; }
        public virtual DbSet<LAudit> LAudits { get; set; }
        public virtual DbSet<LAuditEntry> LAuditEntries { get; set; }
        public virtual DbSet<LCompanySpecificColumn> LCompanySpecificColumns { get; set; }
        public virtual DbSet<LDropDown> LDropDowns { get; set; }
        public virtual DbSet<LDropDownValue> LDropDownValues { get; set; }
        public virtual DbSet<LEmailBucket> LEmailBuckets { get; set; }
        public virtual DbSet<LEmailTemplate> LEmailTemplates { get; set; }
        public virtual DbSet<LFinancialSurvey> LFinancialSurveys { get; set; }
        public virtual DbSet<LFSAnswerBank> LFSAnswerBanks { get; set; }
        public virtual DbSet<LFSChapter> LFSChapters { get; set; }
        public virtual DbSet<LFSItemType> LFSItemTypes { get; set; }
        public virtual DbSet<LFSManualAccScenario> LFSManualAccScenarios { get; set; }
        public virtual DbSet<LFSNextStepAction> LFSNextStepActions { get; set; }
        public virtual DbSet<LFSNextStep> LFSNextSteps { get; set; }
        public virtual DbSet<LFSQuestionBank> LFSQuestionBanks { get; set; }
        public virtual DbSet<LFSRespons> LFSResponses { get; set; }
        public virtual DbSet<LFSSectionItem> LFSSectionItems { get; set; }
        public virtual DbSet<LFSSection> LFSSections { get; set; }
        public virtual DbSet<LFSSurveyLevel> LFSSurveyLevels { get; set; }
        public virtual DbSet<LFSTableConfig> LFSTableConfigs { get; set; }
        public virtual DbSet<LFSTable> LFSTables { get; set; }
        public virtual DbSet<LLocalPob> LLocalPobs { get; set; }
        public virtual DbSet<LNotification> LNotifications { get; set; }
        public virtual DbSet<LOutputFormat> LOutputFormats { get; set; }
        public virtual DbSet<LPasswordHistory> LPasswordHistories { get; set; }
        public virtual DbSet<LPasswordPolicy> LPasswordPolicies { get; set; }
        public virtual DbSet<LPortfolio> LPortfolios { get; set; }
        public virtual DbSet<LProductPob> LProductPobs { get; set; }
        public virtual DbSet<LProduct> LProducts { get; set; }
        public virtual DbSet<LReconBatch> LReconBatches { get; set; }
        public virtual DbSet<LReconBucket> LReconBuckets { get; set; }
        public virtual DbSet<LReconColumnMapping> LReconColumnMappings { get; set; }
        public virtual DbSet<LReconFileFormat> LReconFileFormats { get; set; }
        public virtual DbSet<LReferenceData> LReferenceDatas { get; set; }
        public virtual DbSet<LReference> LReferences { get; set; }
        public virtual DbSet<LReferenceType> LReferenceTypes { get; set; }
        public virtual DbSet<LRequest> LRequests { get; set; }
        public virtual DbSet<LRole> LRoles { get; set; }
        public virtual DbSet<LScenarioDemand> LScenarioDemands { get; set; }
        public virtual DbSet<LSMSBucket> LSMSBuckets { get; set; }
        public virtual DbSet<LSupportingDocument> LSupportingDocuments { get; set; }
        public virtual DbSet<LUserActivityLog> LUserActivityLogs { get; set; }
        public virtual DbSet<LUser> LUsers { get; set; }
        public virtual DbSet<MEntityPortfolio> MEntityPortfolios { get; set; }
        public virtual DbSet<MLFSQuestionBankLFSSurveyLevel> MLFSQuestionBankLFSSurveyLevels { get; set; }
        public virtual DbSet<MLocalGlobalUsecaseMapping> MLocalGlobalUsecaseMappings { get; set; }
        public virtual DbSet<MLUsersGSecurityQuestion> MLUsersGSecurityQuestions { get; set; }
        public virtual DbSet<MMenuRole> MMenuRoles { get; set; }
        public virtual DbSet<MMenusAuthorizableObject> MMenusAuthorizableObjects { get; set; }
        public virtual DbSet<MPobCopaMapping> MPobCopaMappings { get; set; }
        public virtual DbSet<MStepParticipantActionValidation> MStepParticipantActionValidations { get; set; }
        public virtual DbSet<MUserRole> MUserRoles { get; set; }
        public virtual DbSet<RLocalPobType> RLocalPobTypes { get; set; }
        public virtual DbSet<RProductCategory> RProductCategories { get; set; }
        public virtual DbSet<RProductSystem> RProductSystems { get; set; }
        public virtual DbSet<RRequestSystem> RRequestSystems { get; set; }
        public virtual DbSet<RSysCat> RSysCats { get; set; }
        public virtual DbSet<RUseCaseIndicator> RUseCaseIndicators { get; set; }
        public virtual DbSet<RWorkFlow> RWorkFlows { get; set; }
        public virtual DbSet<SSPDimension> SSPDimensions { get; set; }
        public virtual DbSet<TReconDataValidation> TReconDataValidations { get; set; }
        public virtual DbSet<TRefDataValidation> TRefDataValidations { get; set; }
        public virtual DbSet<WAction> WActions { get; set; }
        public virtual DbSet<WActionValidation> WActionValidations { get; set; }
        public virtual DbSet<WStepGridColumn> WStepGridColumns { get; set; }
        public virtual DbSet<WStepParticipantAction> WStepParticipantActions { get; set; }
        public virtual DbSet<WStepParticipant> WStepParticipants { get; set; }
        public virtual DbSet<WStep> WSteps { get; set; }
        public virtual DbSet<Debug> Debugs { get; set; }
        public virtual DbSet<LFSAccountingMemo> LFSAccountingMemos { get; set; }
        public virtual DbSet<LFSAccountingScenarioMatrix> LFSAccountingScenarioMatrices { get; set; }
        public virtual DbSet<LFSRequestLevelAccountingMemo> LFSRequestLevelAccountingMemoes { get; set; }
        public virtual DbSet<RequestSimulation> RequestSimulations { get; set; }
        public virtual DbSet<UseCaseIndicator> UseCaseIndicators { get; set; }
        public virtual DbSet<XBatch> XBatches { get; set; }
        public virtual DbSet<XBatchFile> XBatchFiles { get; set; }
        public virtual DbSet<XRequestUpload> XRequestUploads { get; set; }
    
        [DbFunction("RELYDevDbEntities", "FnGetWFColumnValues")]
        public virtual IQueryable<FnGetWFColumnValues_Result> FnGetWFColumnValues(Nullable<int> loggedInUserId, Nullable<int> loggedInRoleId, Nullable<int> wFId, string action, string companyCode)
        {
            var loggedInUserIdParameter = loggedInUserId.HasValue ?
                new ObjectParameter("LoggedInUserId", loggedInUserId) :
                new ObjectParameter("LoggedInUserId", typeof(int));
    
            var loggedInRoleIdParameter = loggedInRoleId.HasValue ?
                new ObjectParameter("LoggedInRoleId", loggedInRoleId) :
                new ObjectParameter("LoggedInRoleId", typeof(int));
    
            var wFIdParameter = wFId.HasValue ?
                new ObjectParameter("WFId", wFId) :
                new ObjectParameter("WFId", typeof(int));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FnGetWFColumnValues_Result>("[RELYDevDbEntities].[FnGetWFColumnValues](@LoggedInUserId, @LoggedInRoleId, @WFId, @Action, @CompanyCode)", loggedInUserIdParameter, loggedInRoleIdParameter, wFIdParameter, actionParameter, companyCodeParameter);
        }
    
        [DbFunction("RELYDevDbEntities", "SplitString")]
        public virtual IQueryable<SplitString_Result> SplitString(string input, string character)
        {
            var inputParameter = input != null ?
                new ObjectParameter("Input", input) :
                new ObjectParameter("Input", typeof(string));
    
            var characterParameter = character != null ?
                new ObjectParameter("Character", character) :
                new ObjectParameter("Character", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SplitString_Result>("[RELYDevDbEntities].[SplitString](@Input, @Character)", inputParameter, characterParameter);
        }
    
        public virtual ObjectResult<string> SpCheckProductIsDuplicate(string companyCode, string id, Nullable<int> sysCatId, string productCode, string businessCategory, ObjectParameter isDuplicate)
        {
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var idParameter = id != null ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(string));
    
            var sysCatIdParameter = sysCatId.HasValue ?
                new ObjectParameter("SysCatId", sysCatId) :
                new ObjectParameter("SysCatId", typeof(int));
    
            var productCodeParameter = productCode != null ?
                new ObjectParameter("ProductCode", productCode) :
                new ObjectParameter("ProductCode", typeof(string));
    
            var businessCategoryParameter = businessCategory != null ?
                new ObjectParameter("BusinessCategory", businessCategory) :
                new ObjectParameter("BusinessCategory", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SpCheckProductIsDuplicate", companyCodeParameter, idParameter, sysCatIdParameter, productCodeParameter, businessCategoryParameter, isDuplicate);
        }
    
        public virtual int SPCloneLPob(Nullable<int> lPobId, Nullable<int> loggedInUserId, Nullable<int> loggedInUserRoleId, string companyCode, string source, ObjectParameter clonedPobId)
        {
            var lPobIdParameter = lPobId.HasValue ?
                new ObjectParameter("LPobId", lPobId) :
                new ObjectParameter("LPobId", typeof(int));
    
            var loggedInUserIdParameter = loggedInUserId.HasValue ?
                new ObjectParameter("LoggedInUserId", loggedInUserId) :
                new ObjectParameter("LoggedInUserId", typeof(int));
    
            var loggedInUserRoleIdParameter = loggedInUserRoleId.HasValue ?
                new ObjectParameter("LoggedInUserRoleId", loggedInUserRoleId) :
                new ObjectParameter("LoggedInUserRoleId", typeof(int));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var sourceParameter = source != null ?
                new ObjectParameter("Source", source) :
                new ObjectParameter("Source", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPCloneLPob", lPobIdParameter, loggedInUserIdParameter, loggedInUserRoleIdParameter, companyCodeParameter, sourceParameter, clonedPobId);
        }
    
        public virtual int SPCloneProduct(Nullable<int> productId, Nullable<int> loggedInUserId, Nullable<int> loggedInUserRoleId, string companyCode, string source, string requestId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var loggedInUserIdParameter = loggedInUserId.HasValue ?
                new ObjectParameter("LoggedInUserId", loggedInUserId) :
                new ObjectParameter("LoggedInUserId", typeof(int));
    
            var loggedInUserRoleIdParameter = loggedInUserRoleId.HasValue ?
                new ObjectParameter("LoggedInUserRoleId", loggedInUserRoleId) :
                new ObjectParameter("LoggedInUserRoleId", typeof(int));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var sourceParameter = source != null ?
                new ObjectParameter("Source", source) :
                new ObjectParameter("Source", typeof(string));
    
            var requestIdParameter = requestId != null ?
                new ObjectParameter("RequestId", requestId) :
                new ObjectParameter("RequestId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPCloneProduct", productIdParameter, loggedInUserIdParameter, loggedInUserRoleIdParameter, companyCodeParameter, sourceParameter, requestIdParameter);
        }
    
        public virtual int SPCloneRequest(Nullable<int> requestId, Nullable<int> loggedInUserId, Nullable<int> loggedInUserRoleId, string companyCode, string source)
        {
            var requestIdParameter = requestId.HasValue ?
                new ObjectParameter("RequestId", requestId) :
                new ObjectParameter("RequestId", typeof(int));
    
            var loggedInUserIdParameter = loggedInUserId.HasValue ?
                new ObjectParameter("LoggedInUserId", loggedInUserId) :
                new ObjectParameter("LoggedInUserId", typeof(int));
    
            var loggedInUserRoleIdParameter = loggedInUserRoleId.HasValue ?
                new ObjectParameter("LoggedInUserRoleId", loggedInUserRoleId) :
                new ObjectParameter("LoggedInUserRoleId", typeof(int));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var sourceParameter = source != null ?
                new ObjectParameter("Source", source) :
                new ObjectParameter("Source", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPCloneRequest", requestIdParameter, loggedInUserIdParameter, loggedInUserRoleIdParameter, companyCodeParameter, sourceParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SPCloneSurvey(Nullable<int> targetEntityId, Nullable<int> surveyId, Nullable<int> sourceProductId, Nullable<int> loggedInUserId, string companyCode)
        {
            var targetEntityIdParameter = targetEntityId.HasValue ?
                new ObjectParameter("TargetEntityId", targetEntityId) :
                new ObjectParameter("TargetEntityId", typeof(int));
    
            var surveyIdParameter = surveyId.HasValue ?
                new ObjectParameter("SurveyId", surveyId) :
                new ObjectParameter("SurveyId", typeof(int));
    
            var sourceProductIdParameter = sourceProductId.HasValue ?
                new ObjectParameter("SourceProductId", sourceProductId) :
                new ObjectParameter("SourceProductId", typeof(int));
    
            var loggedInUserIdParameter = loggedInUserId.HasValue ?
                new ObjectParameter("LoggedInUserId", loggedInUserId) :
                new ObjectParameter("LoggedInUserId", typeof(int));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SPCloneSurvey", targetEntityIdParameter, surveyIdParameter, sourceProductIdParameter, loggedInUserIdParameter, companyCodeParameter);
        }
    
        public virtual int SpConsolidatedAccountingMemo(Nullable<int> requestId, Nullable<int> userId, Nullable<bool> isConsolidatedAccountingMemo)
        {
            var requestIdParameter = requestId.HasValue ?
                new ObjectParameter("RequestId", requestId) :
                new ObjectParameter("RequestId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var isConsolidatedAccountingMemoParameter = isConsolidatedAccountingMemo.HasValue ?
                new ObjectParameter("IsConsolidatedAccountingMemo", isConsolidatedAccountingMemo) :
                new ObjectParameter("IsConsolidatedAccountingMemo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpConsolidatedAccountingMemo", requestIdParameter, userIdParameter, isConsolidatedAccountingMemoParameter);
        }
    
        public virtual ObjectResult<string> SpCreateCompany(string companyCode, string comapnyName, string logoPath, string punchLine, string domainAddress, Nullable<int> minLength, Nullable<int> minUpperCase, Nullable<int> minLowerCase, Nullable<int> minNumbers, Nullable<int> minSpecialChars, Nullable<int> minAgeDays, Nullable<int> maxAgeDays, Nullable<int> reminderDays, Nullable<int> preventReuse, Nullable<int> lockoutFailedAttempts, Nullable<int> lockoutMinutes, ObjectParameter result)
        {
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var comapnyNameParameter = comapnyName != null ?
                new ObjectParameter("ComapnyName", comapnyName) :
                new ObjectParameter("ComapnyName", typeof(string));
    
            var logoPathParameter = logoPath != null ?
                new ObjectParameter("LogoPath", logoPath) :
                new ObjectParameter("LogoPath", typeof(string));
    
            var punchLineParameter = punchLine != null ?
                new ObjectParameter("PunchLine", punchLine) :
                new ObjectParameter("PunchLine", typeof(string));
    
            var domainAddressParameter = domainAddress != null ?
                new ObjectParameter("DomainAddress", domainAddress) :
                new ObjectParameter("DomainAddress", typeof(string));
    
            var minLengthParameter = minLength.HasValue ?
                new ObjectParameter("MinLength", minLength) :
                new ObjectParameter("MinLength", typeof(int));
    
            var minUpperCaseParameter = minUpperCase.HasValue ?
                new ObjectParameter("MinUpperCase", minUpperCase) :
                new ObjectParameter("MinUpperCase", typeof(int));
    
            var minLowerCaseParameter = minLowerCase.HasValue ?
                new ObjectParameter("MinLowerCase", minLowerCase) :
                new ObjectParameter("MinLowerCase", typeof(int));
    
            var minNumbersParameter = minNumbers.HasValue ?
                new ObjectParameter("MinNumbers", minNumbers) :
                new ObjectParameter("MinNumbers", typeof(int));
    
            var minSpecialCharsParameter = minSpecialChars.HasValue ?
                new ObjectParameter("MinSpecialChars", minSpecialChars) :
                new ObjectParameter("MinSpecialChars", typeof(int));
    
            var minAgeDaysParameter = minAgeDays.HasValue ?
                new ObjectParameter("MinAgeDays", minAgeDays) :
                new ObjectParameter("MinAgeDays", typeof(int));
    
            var maxAgeDaysParameter = maxAgeDays.HasValue ?
                new ObjectParameter("MaxAgeDays", maxAgeDays) :
                new ObjectParameter("MaxAgeDays", typeof(int));
    
            var reminderDaysParameter = reminderDays.HasValue ?
                new ObjectParameter("ReminderDays", reminderDays) :
                new ObjectParameter("ReminderDays", typeof(int));
    
            var preventReuseParameter = preventReuse.HasValue ?
                new ObjectParameter("PreventReuse", preventReuse) :
                new ObjectParameter("PreventReuse", typeof(int));
    
            var lockoutFailedAttemptsParameter = lockoutFailedAttempts.HasValue ?
                new ObjectParameter("LockoutFailedAttempts", lockoutFailedAttempts) :
                new ObjectParameter("LockoutFailedAttempts", typeof(int));
    
            var lockoutMinutesParameter = lockoutMinutes.HasValue ?
                new ObjectParameter("LockoutMinutes", lockoutMinutes) :
                new ObjectParameter("LockoutMinutes", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SpCreateCompany", companyCodeParameter, comapnyNameParameter, logoPathParameter, punchLineParameter, domainAddressParameter, minLengthParameter, minUpperCaseParameter, minLowerCaseParameter, minNumbersParameter, minSpecialCharsParameter, minAgeDaysParameter, maxAgeDaysParameter, reminderDaysParameter, preventReuseParameter, lockoutFailedAttemptsParameter, lockoutMinutesParameter, result);
        }
    
        public virtual int SpDeleteCompany(string companyCode)
        {
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpDeleteCompany", companyCodeParameter);
        }
    
        public virtual ObjectResult<SpDownloadAccountingMemo_Result> SpDownloadAccountingMemo(string entityType, Nullable<int> entityId, Nullable<int> surveyId, Nullable<int> userId)
        {
            var entityTypeParameter = entityType != null ?
                new ObjectParameter("EntityType", entityType) :
                new ObjectParameter("EntityType", typeof(string));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(int));
    
            var surveyIdParameter = surveyId.HasValue ?
                new ObjectParameter("SurveyId", surveyId) :
                new ObjectParameter("SurveyId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpDownloadAccountingMemo_Result>("SpDownloadAccountingMemo", entityTypeParameter, entityIdParameter, surveyIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<SpDownloadAccountingScenarioMatrix_Result> SpDownloadAccountingScenarioMatrix(Nullable<int> entityId, string entityType)
        {
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(int));
    
            var entityTypeParameter = entityType != null ?
                new ObjectParameter("EntityType", entityType) :
                new ObjectParameter("EntityType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpDownloadAccountingScenarioMatrix_Result>("SpDownloadAccountingScenarioMatrix", entityIdParameter, entityTypeParameter);
        }
    
        public virtual int SpDownloadGenericGridData(string workflow, string userName, Nullable<int> stepId, Nullable<int> loggedInUserId, Nullable<int> loggedInRoleId, string companyCode)
        {
            var workflowParameter = workflow != null ?
                new ObjectParameter("Workflow", workflow) :
                new ObjectParameter("Workflow", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var stepIdParameter = stepId.HasValue ?
                new ObjectParameter("StepId", stepId) :
                new ObjectParameter("StepId", typeof(int));
    
            var loggedInUserIdParameter = loggedInUserId.HasValue ?
                new ObjectParameter("LoggedInUserId", loggedInUserId) :
                new ObjectParameter("LoggedInUserId", typeof(int));
    
            var loggedInRoleIdParameter = loggedInRoleId.HasValue ?
                new ObjectParameter("LoggedInRoleId", loggedInRoleId) :
                new ObjectParameter("LoggedInRoleId", typeof(int));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpDownloadGenericGridData", workflowParameter, userNameParameter, stepIdParameter, loggedInUserIdParameter, loggedInRoleIdParameter, companyCodeParameter);
        }
    
        public virtual int SpDownloadReferenceDataGrid(string tableName, string selecterType, Nullable<int> referenceId)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var selecterTypeParameter = selecterType != null ?
                new ObjectParameter("SelecterType", selecterType) :
                new ObjectParameter("SelecterType", typeof(string));
    
            var referenceIdParameter = referenceId.HasValue ?
                new ObjectParameter("ReferenceId", referenceId) :
                new ObjectParameter("ReferenceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpDownloadReferenceDataGrid", tableNameParameter, selecterTypeParameter, referenceIdParameter);
        }
    
        public virtual ObjectResult<SpDownloadRelyData_Result> SpDownloadRelyData(string companyCode, string tableName)
        {
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpDownloadRelyData_Result>("SpDownloadRelyData", companyCodeParameter, tableNameParameter);
        }
    
        public virtual int spEmailBucketChart()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spEmailBucketChart");
        }
    
        public virtual int SpGenerateAccountingMemo(Nullable<int> surveyId, Nullable<int> entityId, string entityType, Nullable<int> userId)
        {
            var surveyIdParameter = surveyId.HasValue ?
                new ObjectParameter("SurveyId", surveyId) :
                new ObjectParameter("SurveyId", typeof(int));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(int));
    
            var entityTypeParameter = entityType != null ?
                new ObjectParameter("EntityType", entityType) :
                new ObjectParameter("EntityType", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGenerateAccountingMemo", surveyIdParameter, entityIdParameter, entityTypeParameter, userIdParameter);
        }
    
        public virtual int SpGenerateAccountingScenarioMatrix(Nullable<int> entityId, string entityType, string companyCode, string tabName)
        {
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(int));
    
            var entityTypeParameter = entityType != null ?
                new ObjectParameter("EntityType", entityType) :
                new ObjectParameter("EntityType", typeof(string));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var tabNameParameter = tabName != null ?
                new ObjectParameter("TabName", tabName) :
                new ObjectParameter("TabName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGenerateAccountingScenarioMatrix", entityIdParameter, entityTypeParameter, companyCodeParameter, tabNameParameter);
        }
    
        public virtual int SpGenerateDashBoardToDo(Nullable<int> roleId, Nullable<int> userId)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGenerateDashBoardToDo", roleIdParameter, userIdParameter);
        }
    
        public virtual int SpGenerateLocalPOBLibrary(string companyCode, Nullable<int> pageSize, Nullable<int> pageNumber, string sortdatafield, string sortorder, string filterQuery)
        {
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var sortdatafieldParameter = sortdatafield != null ?
                new ObjectParameter("sortdatafield", sortdatafield) :
                new ObjectParameter("sortdatafield", typeof(string));
    
            var sortorderParameter = sortorder != null ?
                new ObjectParameter("sortorder", sortorder) :
                new ObjectParameter("sortorder", typeof(string));
    
            var filterQueryParameter = filterQuery != null ?
                new ObjectParameter("FilterQuery", filterQuery) :
                new ObjectParameter("FilterQuery", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGenerateLocalPOBLibrary", companyCodeParameter, pageSizeParameter, pageNumberParameter, sortdatafieldParameter, sortorderParameter, filterQueryParameter);
        }
    
        public virtual int SpGenerateMissingProductsReport(string companyCode)
        {
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGenerateMissingProductsReport", companyCodeParameter);
        }
    
        public virtual int SpGenerateProductHistoryGrid(Nullable<int> productId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGenerateProductHistoryGrid", productIdParameter);
        }
    
        public virtual int SpGenerateProductsLibrary(string companyCode, Nullable<int> pageSize, Nullable<int> pageNumber, string sortdatafield, string sortorder, string filterQuery)
        {
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var sortdatafieldParameter = sortdatafield != null ?
                new ObjectParameter("sortdatafield", sortdatafield) :
                new ObjectParameter("sortdatafield", typeof(string));
    
            var sortorderParameter = sortorder != null ?
                new ObjectParameter("sortorder", sortorder) :
                new ObjectParameter("sortorder", typeof(string));
    
            var filterQueryParameter = filterQuery != null ?
                new ObjectParameter("FilterQuery", filterQuery) :
                new ObjectParameter("FilterQuery", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGenerateProductsLibrary", companyCodeParameter, pageSizeParameter, pageNumberParameter, sortdatafieldParameter, sortorderParameter, filterQueryParameter);
        }
    
        public virtual int SpGenerateReferenceDataGrid(Nullable<int> referenceId, Nullable<int> pageSize, Nullable<int> pageNumber, string sortdatafield, string sortorder, string filterQuery)
        {
            var referenceIdParameter = referenceId.HasValue ?
                new ObjectParameter("ReferenceId", referenceId) :
                new ObjectParameter("ReferenceId", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var sortdatafieldParameter = sortdatafield != null ?
                new ObjectParameter("sortdatafield", sortdatafield) :
                new ObjectParameter("sortdatafield", typeof(string));
    
            var sortorderParameter = sortorder != null ?
                new ObjectParameter("sortorder", sortorder) :
                new ObjectParameter("sortorder", typeof(string));
    
            var filterQueryParameter = filterQuery != null ?
                new ObjectParameter("FilterQuery", filterQuery) :
                new ObjectParameter("FilterQuery", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGenerateReferenceDataGrid", referenceIdParameter, pageSizeParameter, pageNumberParameter, sortdatafieldParameter, sortorderParameter, filterQueryParameter);
        }
    
        public virtual ObjectResult<SpGenerateSectionData_Result> SpGenerateSectionData(Nullable<int> surveyId, Nullable<int> entityId, string entityType, string companyCode, string chapterCode, string sectionCode)
        {
            var surveyIdParameter = surveyId.HasValue ?
                new ObjectParameter("SurveyId", surveyId) :
                new ObjectParameter("SurveyId", typeof(int));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(int));
    
            var entityTypeParameter = entityType != null ?
                new ObjectParameter("EntityType", entityType) :
                new ObjectParameter("EntityType", typeof(string));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var chapterCodeParameter = chapterCode != null ?
                new ObjectParameter("ChapterCode", chapterCode) :
                new ObjectParameter("ChapterCode", typeof(string));
    
            var sectionCodeParameter = sectionCode != null ?
                new ObjectParameter("SectionCode", sectionCode) :
                new ObjectParameter("SectionCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGenerateSectionData_Result>("SpGenerateSectionData", surveyIdParameter, entityIdParameter, entityTypeParameter, companyCodeParameter, chapterCodeParameter, sectionCodeParameter);
        }
    
        public virtual ObjectResult<SpGenerateSurveySummary_Result> SpGenerateSurveySummary(Nullable<int> surveyId, Nullable<int> entityId, string entityType)
        {
            var surveyIdParameter = surveyId.HasValue ?
                new ObjectParameter("SurveyId", surveyId) :
                new ObjectParameter("SurveyId", typeof(int));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(int));
    
            var entityTypeParameter = entityType != null ?
                new ObjectParameter("EntityType", entityType) :
                new ObjectParameter("EntityType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGenerateSurveySummary_Result>("SpGenerateSurveySummary", surveyIdParameter, entityIdParameter, entityTypeParameter);
        }
    
        public virtual int spGetCompletedItems(Nullable<int> pageSize, Nullable<int> pageNumber, string sortdatafield, string sortorder, string filterQuery)
        {
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var sortdatafieldParameter = sortdatafield != null ?
                new ObjectParameter("sortdatafield", sortdatafield) :
                new ObjectParameter("sortdatafield", typeof(string));
    
            var sortorderParameter = sortorder != null ?
                new ObjectParameter("sortorder", sortorder) :
                new ObjectParameter("sortorder", typeof(string));
    
            var filterQueryParameter = filterQuery != null ?
                new ObjectParameter("FilterQuery", filterQuery) :
                new ObjectParameter("FilterQuery", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetCompletedItems", pageSizeParameter, pageNumberParameter, sortdatafieldParameter, sortorderParameter, filterQueryParameter);
        }
    
        public virtual int spGetCompletedItemsCounts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetCompletedItemsCounts");
        }
    
        public virtual int spGetEmailBucketCountsForSummaryTab()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetEmailBucketCountsForSummaryTab");
        }
    
        public virtual ObjectResult<spGetEmailBucketDetailCounts_Result> spGetEmailBucketDetailCounts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetEmailBucketDetailCounts_Result>("spGetEmailBucketDetailCounts");
        }
    
        public virtual int spGetEmailBucketDetailData(Nullable<int> pageSize, Nullable<int> pageNumber, string sortdatafield, string sortorder, string filterQuery)
        {
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var sortdatafieldParameter = sortdatafield != null ?
                new ObjectParameter("sortdatafield", sortdatafield) :
                new ObjectParameter("sortdatafield", typeof(string));
    
            var sortorderParameter = sortorder != null ?
                new ObjectParameter("sortorder", sortorder) :
                new ObjectParameter("sortorder", typeof(string));
    
            var filterQueryParameter = filterQuery != null ?
                new ObjectParameter("FilterQuery", filterQuery) :
                new ObjectParameter("FilterQuery", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetEmailBucketDetailData", pageSizeParameter, pageNumberParameter, sortdatafieldParameter, sortorderParameter, filterQueryParameter);
        }
    
        public virtual int spGetEmailBucketForSummaryTab(Nullable<int> pageSize, Nullable<int> pageNumber, string sortdatafield, string sortorder, string filterQuery)
        {
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var sortdatafieldParameter = sortdatafield != null ?
                new ObjectParameter("sortdatafield", sortdatafield) :
                new ObjectParameter("sortdatafield", typeof(string));
    
            var sortorderParameter = sortorder != null ?
                new ObjectParameter("sortorder", sortorder) :
                new ObjectParameter("sortorder", typeof(string));
    
            var filterQueryParameter = filterQuery != null ?
                new ObjectParameter("FilterQuery", filterQuery) :
                new ObjectParameter("FilterQuery", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetEmailBucketForSummaryTab", pageSizeParameter, pageNumberParameter, sortdatafieldParameter, sortorderParameter, filterQueryParameter);
        }
    
        public virtual ObjectResult<spGetErrorLogCount_Result> spGetErrorLogCount()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetErrorLogCount_Result>("spGetErrorLogCount");
        }
    
        public virtual ObjectResult<spGetExceptionChartData_Result> spGetExceptionChartData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetExceptionChartData_Result>("spGetExceptionChartData");
        }
    
        public virtual ObjectResult<spGetExceptionSummaryCounts_Result> spGetExceptionSummaryCounts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetExceptionSummaryCounts_Result>("spGetExceptionSummaryCounts");
        }
    
        public virtual int spGetExceptionSummaryData(Nullable<int> pageSize, Nullable<int> pageNumber, string sortdatafield, string sortorder, string filterQuery)
        {
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var sortdatafieldParameter = sortdatafield != null ?
                new ObjectParameter("sortdatafield", sortdatafield) :
                new ObjectParameter("sortdatafield", typeof(string));
    
            var sortorderParameter = sortorder != null ?
                new ObjectParameter("sortorder", sortorder) :
                new ObjectParameter("sortorder", typeof(string));
    
            var filterQueryParameter = filterQuery != null ?
                new ObjectParameter("FilterQuery", filterQuery) :
                new ObjectParameter("FilterQuery", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetExceptionSummaryData", pageSizeParameter, pageNumberParameter, sortdatafieldParameter, sortorderParameter, filterQueryParameter);
        }
    
        public virtual int SpGetExistingSSPs(string companyCode, Nullable<int> pageSize, Nullable<int> pageNumber, string sortdatafield, string sortorder, string filterQuery)
        {
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var sortdatafieldParameter = sortdatafield != null ?
                new ObjectParameter("sortdatafield", sortdatafield) :
                new ObjectParameter("sortdatafield", typeof(string));
    
            var sortorderParameter = sortorder != null ?
                new ObjectParameter("sortorder", sortorder) :
                new ObjectParameter("sortorder", typeof(string));
    
            var filterQueryParameter = filterQuery != null ?
                new ObjectParameter("FilterQuery", filterQuery) :
                new ObjectParameter("FilterQuery", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGetExistingSSPs", companyCodeParameter, pageSizeParameter, pageNumberParameter, sortdatafieldParameter, sortorderParameter, filterQueryParameter);
        }
    
        public virtual int SpGetGenericGridCounts(string workFlowName, Nullable<int> stepOrdinal, string companyCode, Nullable<int> loggedInUserId)
        {
            var workFlowNameParameter = workFlowName != null ?
                new ObjectParameter("WorkFlowName", workFlowName) :
                new ObjectParameter("WorkFlowName", typeof(string));
    
            var stepOrdinalParameter = stepOrdinal.HasValue ?
                new ObjectParameter("StepOrdinal", stepOrdinal) :
                new ObjectParameter("StepOrdinal", typeof(int));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var loggedInUserIdParameter = loggedInUserId.HasValue ?
                new ObjectParameter("LoggedInUserId", loggedInUserId) :
                new ObjectParameter("LoggedInUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGetGenericGridCounts", workFlowNameParameter, stepOrdinalParameter, companyCodeParameter, loggedInUserIdParameter);
        }
    
        public virtual int spGetGErrorlogGridData(Nullable<int> pageSize, Nullable<int> pageNumber, string sortdatafield, string sortorder, string filterQuery)
        {
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var sortdatafieldParameter = sortdatafield != null ?
                new ObjectParameter("sortdatafield", sortdatafield) :
                new ObjectParameter("sortdatafield", typeof(string));
    
            var sortorderParameter = sortorder != null ?
                new ObjectParameter("sortorder", sortorder) :
                new ObjectParameter("sortorder", typeof(string));
    
            var filterQueryParameter = filterQuery != null ?
                new ObjectParameter("FilterQuery", filterQuery) :
                new ObjectParameter("FilterQuery", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetGErrorlogGridData", pageSizeParameter, pageNumberParameter, sortdatafieldParameter, sortorderParameter, filterQueryParameter);
        }
    
        public virtual int spGetGKeyValueForConfiguration(Nullable<int> pageSize, Nullable<int> pageNumber, string sortdatafield, string sortorder, string filterQuery)
        {
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var sortdatafieldParameter = sortdatafield != null ?
                new ObjectParameter("sortdatafield", sortdatafield) :
                new ObjectParameter("sortdatafield", typeof(string));
    
            var sortorderParameter = sortorder != null ?
                new ObjectParameter("sortorder", sortorder) :
                new ObjectParameter("sortorder", typeof(string));
    
            var filterQueryParameter = filterQuery != null ?
                new ObjectParameter("FilterQuery", filterQuery) :
                new ObjectParameter("FilterQuery", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetGKeyValueForConfiguration", pageSizeParameter, pageNumberParameter, sortdatafieldParameter, sortorderParameter, filterQueryParameter);
        }
    
        public virtual ObjectResult<string> spGetHelpUrl(Nullable<int> menuId, Nullable<int> roleId, ObjectParameter pageUrl)
        {
            var menuIdParameter = menuId.HasValue ?
                new ObjectParameter("MenuId", menuId) :
                new ObjectParameter("MenuId", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spGetHelpUrl", menuIdParameter, roleIdParameter, pageUrl);
        }
    
        public virtual ObjectResult<string> SPGetIdentifier(string baseTableName, Nullable<int> transactionId, ObjectParameter identifier)
        {
            var baseTableNameParameter = baseTableName != null ?
                new ObjectParameter("BaseTableName", baseTableName) :
                new ObjectParameter("BaseTableName", typeof(string));
    
            var transactionIdParameter = transactionId.HasValue ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SPGetIdentifier", baseTableNameParameter, transactionIdParameter, identifier);
        }
    
        public virtual int SpGetInvalidRecordsTReconData(Nullable<int> sysCatId, Nullable<int> fileFormatId, string companyCode, Nullable<int> pageSize, Nullable<int> pageNumber, string sortdatafield, string sortorder, string filterQuery)
        {
            var sysCatIdParameter = sysCatId.HasValue ?
                new ObjectParameter("SysCatId", sysCatId) :
                new ObjectParameter("SysCatId", typeof(int));
    
            var fileFormatIdParameter = fileFormatId.HasValue ?
                new ObjectParameter("FileFormatId", fileFormatId) :
                new ObjectParameter("FileFormatId", typeof(int));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var sortdatafieldParameter = sortdatafield != null ?
                new ObjectParameter("sortdatafield", sortdatafield) :
                new ObjectParameter("sortdatafield", typeof(string));
    
            var sortorderParameter = sortorder != null ?
                new ObjectParameter("sortorder", sortorder) :
                new ObjectParameter("sortorder", typeof(string));
    
            var filterQueryParameter = filterQuery != null ?
                new ObjectParameter("FilterQuery", filterQuery) :
                new ObjectParameter("FilterQuery", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGetInvalidRecordsTReconData", sysCatIdParameter, fileFormatIdParameter, companyCodeParameter, pageSizeParameter, pageNumberParameter, sortdatafieldParameter, sortorderParameter, filterQueryParameter);
        }
    
        public virtual int SpGetInvalidRecordsTRefData(Nullable<int> loggedInUserId, Nullable<int> pageSize, Nullable<int> pageNumber, string sortdatafield, string sortorder, string filterQuery)
        {
            var loggedInUserIdParameter = loggedInUserId.HasValue ?
                new ObjectParameter("LoggedInUserId", loggedInUserId) :
                new ObjectParameter("LoggedInUserId", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var sortdatafieldParameter = sortdatafield != null ?
                new ObjectParameter("sortdatafield", sortdatafield) :
                new ObjectParameter("sortdatafield", typeof(string));
    
            var sortorderParameter = sortorder != null ?
                new ObjectParameter("sortorder", sortorder) :
                new ObjectParameter("sortorder", typeof(string));
    
            var filterQueryParameter = filterQuery != null ?
                new ObjectParameter("FilterQuery", filterQuery) :
                new ObjectParameter("FilterQuery", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGetInvalidRecordsTRefData", loggedInUserIdParameter, pageSizeParameter, pageNumberParameter, sortdatafieldParameter, sortorderParameter, filterQueryParameter);
        }
    
        public virtual ObjectResult<SPGetLNotification_Result> SPGetLNotification(string companyCode)
        {
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetLNotification_Result>("SPGetLNotification", companyCodeParameter);
        }
    
        public virtual int SpGetLocalPobCompletedList(string companyCode, Nullable<int> pageSize, Nullable<int> pageNumber, string sortdatafield, string sortorder, string filterQuery, Nullable<int> underlyingProductId)
        {
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var sortdatafieldParameter = sortdatafield != null ?
                new ObjectParameter("sortdatafield", sortdatafield) :
                new ObjectParameter("sortdatafield", typeof(string));
    
            var sortorderParameter = sortorder != null ?
                new ObjectParameter("sortorder", sortorder) :
                new ObjectParameter("sortorder", typeof(string));
    
            var filterQueryParameter = filterQuery != null ?
                new ObjectParameter("FilterQuery", filterQuery) :
                new ObjectParameter("FilterQuery", typeof(string));
    
            var underlyingProductIdParameter = underlyingProductId.HasValue ?
                new ObjectParameter("UnderlyingProductId", underlyingProductId) :
                new ObjectParameter("UnderlyingProductId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGetLocalPobCompletedList", companyCodeParameter, pageSizeParameter, pageNumberParameter, sortdatafieldParameter, sortorderParameter, filterQueryParameter, underlyingProductIdParameter);
        }
    
        public virtual int SpGetMenuRoleMapping(string companyCode)
        {
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGetMenuRoleMapping", companyCodeParameter);
        }
    
        public virtual int spGetNewItems(Nullable<int> pageSize, Nullable<int> pageNumber, string sortdatafield, string sortorder, string filterQuery, Nullable<int> intervalid)
        {
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var sortdatafieldParameter = sortdatafield != null ?
                new ObjectParameter("sortdatafield", sortdatafield) :
                new ObjectParameter("sortdatafield", typeof(string));
    
            var sortorderParameter = sortorder != null ?
                new ObjectParameter("sortorder", sortorder) :
                new ObjectParameter("sortorder", typeof(string));
    
            var filterQueryParameter = filterQuery != null ?
                new ObjectParameter("FilterQuery", filterQuery) :
                new ObjectParameter("FilterQuery", typeof(string));
    
            var intervalidParameter = intervalid.HasValue ?
                new ObjectParameter("Intervalid", intervalid) :
                new ObjectParameter("Intervalid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetNewItems", pageSizeParameter, pageNumberParameter, sortdatafieldParameter, sortorderParameter, filterQueryParameter, intervalidParameter);
        }
    
        public virtual int spGetNewItemsCounts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetNewItemsCounts");
        }
    
        public virtual int SpGetObjectRoleMapping()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGetObjectRoleMapping");
        }
    
        public virtual int SpGetProductsForImportSurvey(string companyCode, Nullable<int> sourceProductId, Nullable<int> pageSize, Nullable<int> pageNumber, string sortdatafield, string sortorder, string filterQuery)
        {
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var sourceProductIdParameter = sourceProductId.HasValue ?
                new ObjectParameter("SourceProductId", sourceProductId) :
                new ObjectParameter("SourceProductId", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var sortdatafieldParameter = sortdatafield != null ?
                new ObjectParameter("sortdatafield", sortdatafield) :
                new ObjectParameter("sortdatafield", typeof(string));
    
            var sortorderParameter = sortorder != null ?
                new ObjectParameter("sortorder", sortorder) :
                new ObjectParameter("sortorder", typeof(string));
    
            var filterQueryParameter = filterQuery != null ?
                new ObjectParameter("FilterQuery", filterQuery) :
                new ObjectParameter("FilterQuery", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGetProductsForImportSurvey", companyCodeParameter, sourceProductIdParameter, pageSizeParameter, pageNumberParameter, sortdatafieldParameter, sortorderParameter, filterQueryParameter);
        }
    
        public virtual int SpGetProductsListForRequest(string companyCode, Nullable<int> pageSize, Nullable<int> pageNumber, string sortdatafield, string sortorder, string filterQuery)
        {
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var sortdatafieldParameter = sortdatafield != null ?
                new ObjectParameter("sortdatafield", sortdatafield) :
                new ObjectParameter("sortdatafield", typeof(string));
    
            var sortorderParameter = sortorder != null ?
                new ObjectParameter("sortorder", sortorder) :
                new ObjectParameter("sortorder", typeof(string));
    
            var filterQueryParameter = filterQuery != null ?
                new ObjectParameter("FilterQuery", filterQuery) :
                new ObjectParameter("FilterQuery", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGetProductsListForRequest", companyCodeParameter, pageSizeParameter, pageNumberParameter, sortdatafieldParameter, sortorderParameter, filterQueryParameter);
        }
    
        public virtual int SpGetReconDataforProduct(string productCode, Nullable<int> sysCatId, string companyCode)
        {
            var productCodeParameter = productCode != null ?
                new ObjectParameter("ProductCode", productCode) :
                new ObjectParameter("ProductCode", typeof(string));
    
            var sysCatIdParameter = sysCatId.HasValue ?
                new ObjectParameter("SysCatId", sysCatId) :
                new ObjectParameter("SysCatId", typeof(int));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGetReconDataforProduct", productCodeParameter, sysCatIdParameter, companyCodeParameter);
        }
    
        public virtual int SpGetReferencedata(string selecterType, string companyCode)
        {
            var selecterTypeParameter = selecterType != null ?
                new ObjectParameter("SelecterType", selecterType) :
                new ObjectParameter("SelecterType", typeof(string));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGetReferencedata", selecterTypeParameter, companyCodeParameter);
        }
    
        public virtual int SpGetS15GridData(string companyCode)
        {
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGetS15GridData", companyCodeParameter);
        }
    
        public virtual ObjectResult<SpGetSSPDetails_Result> SpGetSSPDetails(string entityType, Nullable<int> entityId, string companyCode)
        {
            var entityTypeParameter = entityType != null ?
                new ObjectParameter("EntityType", entityType) :
                new ObjectParameter("EntityType", typeof(string));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(int));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSSPDetails_Result>("SpGetSSPDetails", entityTypeParameter, entityIdParameter, companyCodeParameter);
        }
    
        public virtual int SpGetSSPId()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGetSSPId");
        }
    
        public virtual int SpGetSurveyTableLeftGrid(string companyCode, string tableCode, Nullable<int> entityId, string entityType)
        {
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var tableCodeParameter = tableCode != null ?
                new ObjectParameter("TableCode", tableCode) :
                new ObjectParameter("TableCode", typeof(string));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(int));
    
            var entityTypeParameter = entityType != null ?
                new ObjectParameter("EntityType", entityType) :
                new ObjectParameter("EntityType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGetSurveyTableLeftGrid", companyCodeParameter, tableCodeParameter, entityIdParameter, entityTypeParameter);
        }
    
        public virtual int SpGetTableNameForColumnMapping(string companyCode)
        {
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpGetTableNameForColumnMapping", companyCodeParameter);
        }
    
        public virtual int spGetUserActivityLog(Nullable<int> pageSize, Nullable<int> pageNumber, string sortdatafield, string sortorder, string filterQuery, string emailId)
        {
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var sortdatafieldParameter = sortdatafield != null ?
                new ObjectParameter("sortdatafield", sortdatafield) :
                new ObjectParameter("sortdatafield", typeof(string));
    
            var sortorderParameter = sortorder != null ?
                new ObjectParameter("sortorder", sortorder) :
                new ObjectParameter("sortorder", typeof(string));
    
            var filterQueryParameter = filterQuery != null ?
                new ObjectParameter("FilterQuery", filterQuery) :
                new ObjectParameter("FilterQuery", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetUserActivityLog", pageSizeParameter, pageNumberParameter, sortdatafieldParameter, sortorderParameter, filterQueryParameter, emailIdParameter);
        }
    
        public virtual ObjectResult<spGetUserActivityLogCounts_Result> spGetUserActivityLogCounts(string emailId)
        {
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetUserActivityLogCounts_Result>("spGetUserActivityLogCounts", emailIdParameter);
        }
    
        public virtual int SpInsertBulkData(string path)
        {
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpInsertBulkData", pathParameter);
        }
    
        public virtual ObjectResult<string> SpInsertDeleteWFStep(string companyCode, Nullable<int> workFlowId, Nullable<int> insertOrdinal, Nullable<int> deleteOrdinal, string operationMode, Nullable<int> isReady, string name, string label, Nullable<int> dNotNotify, string banner, string description, ObjectParameter result)
        {
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var workFlowIdParameter = workFlowId.HasValue ?
                new ObjectParameter("WorkFlowId", workFlowId) :
                new ObjectParameter("WorkFlowId", typeof(int));
    
            var insertOrdinalParameter = insertOrdinal.HasValue ?
                new ObjectParameter("InsertOrdinal", insertOrdinal) :
                new ObjectParameter("InsertOrdinal", typeof(int));
    
            var deleteOrdinalParameter = deleteOrdinal.HasValue ?
                new ObjectParameter("DeleteOrdinal", deleteOrdinal) :
                new ObjectParameter("DeleteOrdinal", typeof(int));
    
            var operationModeParameter = operationMode != null ?
                new ObjectParameter("OperationMode", operationMode) :
                new ObjectParameter("OperationMode", typeof(string));
    
            var isReadyParameter = isReady.HasValue ?
                new ObjectParameter("IsReady", isReady) :
                new ObjectParameter("IsReady", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var labelParameter = label != null ?
                new ObjectParameter("Label", label) :
                new ObjectParameter("Label", typeof(string));
    
            var dNotNotifyParameter = dNotNotify.HasValue ?
                new ObjectParameter("dNotNotify", dNotNotify) :
                new ObjectParameter("dNotNotify", typeof(int));
    
            var bannerParameter = banner != null ?
                new ObjectParameter("Banner", banner) :
                new ObjectParameter("Banner", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SpInsertDeleteWFStep", companyCodeParameter, workFlowIdParameter, insertOrdinalParameter, deleteOrdinalParameter, operationModeParameter, isReadyParameter, nameParameter, labelParameter, dNotNotifyParameter, bannerParameter, descriptionParameter, result);
        }
    
        public virtual int SpLogAudit(string relyProcessName, string vFProcessName, string controlCode, string controlDecription, string action, string actionType, Nullable<int> actionedById, Nullable<int> actionedByRoleId, Nullable<System.DateTime> actionDateTime, string oldStatus, string newStatus, string entityTyppe, Nullable<int> entityId, string entityName, Nullable<int> workFlowId, string companyCode, string comments, Nullable<int> stepId, string actionLabel, Nullable<int> supportingDocumentId)
        {
            var relyProcessNameParameter = relyProcessName != null ?
                new ObjectParameter("RelyProcessName", relyProcessName) :
                new ObjectParameter("RelyProcessName", typeof(string));
    
            var vFProcessNameParameter = vFProcessName != null ?
                new ObjectParameter("VFProcessName", vFProcessName) :
                new ObjectParameter("VFProcessName", typeof(string));
    
            var controlCodeParameter = controlCode != null ?
                new ObjectParameter("ControlCode", controlCode) :
                new ObjectParameter("ControlCode", typeof(string));
    
            var controlDecriptionParameter = controlDecription != null ?
                new ObjectParameter("ControlDecription", controlDecription) :
                new ObjectParameter("ControlDecription", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var actionTypeParameter = actionType != null ?
                new ObjectParameter("ActionType", actionType) :
                new ObjectParameter("ActionType", typeof(string));
    
            var actionedByIdParameter = actionedById.HasValue ?
                new ObjectParameter("ActionedById", actionedById) :
                new ObjectParameter("ActionedById", typeof(int));
    
            var actionedByRoleIdParameter = actionedByRoleId.HasValue ?
                new ObjectParameter("ActionedByRoleId", actionedByRoleId) :
                new ObjectParameter("ActionedByRoleId", typeof(int));
    
            var actionDateTimeParameter = actionDateTime.HasValue ?
                new ObjectParameter("ActionDateTime", actionDateTime) :
                new ObjectParameter("ActionDateTime", typeof(System.DateTime));
    
            var oldStatusParameter = oldStatus != null ?
                new ObjectParameter("OldStatus", oldStatus) :
                new ObjectParameter("OldStatus", typeof(string));
    
            var newStatusParameter = newStatus != null ?
                new ObjectParameter("NewStatus", newStatus) :
                new ObjectParameter("NewStatus", typeof(string));
    
            var entityTyppeParameter = entityTyppe != null ?
                new ObjectParameter("EntityTyppe", entityTyppe) :
                new ObjectParameter("EntityTyppe", typeof(string));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(int));
    
            var entityNameParameter = entityName != null ?
                new ObjectParameter("EntityName", entityName) :
                new ObjectParameter("EntityName", typeof(string));
    
            var workFlowIdParameter = workFlowId.HasValue ?
                new ObjectParameter("WorkFlowId", workFlowId) :
                new ObjectParameter("WorkFlowId", typeof(int));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var stepIdParameter = stepId.HasValue ?
                new ObjectParameter("StepId", stepId) :
                new ObjectParameter("StepId", typeof(int));
    
            var actionLabelParameter = actionLabel != null ?
                new ObjectParameter("ActionLabel", actionLabel) :
                new ObjectParameter("ActionLabel", typeof(string));
    
            var supportingDocumentIdParameter = supportingDocumentId.HasValue ?
                new ObjectParameter("SupportingDocumentId", supportingDocumentId) :
                new ObjectParameter("SupportingDocumentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpLogAudit", relyProcessNameParameter, vFProcessNameParameter, controlCodeParameter, controlDecriptionParameter, actionParameter, actionTypeParameter, actionedByIdParameter, actionedByRoleIdParameter, actionDateTimeParameter, oldStatusParameter, newStatusParameter, entityTyppeParameter, entityIdParameter, entityNameParameter, workFlowIdParameter, companyCodeParameter, commentsParameter, stepIdParameter, actionLabelParameter, supportingDocumentIdParameter);
        }
    
        public virtual int SpLogEmail(string recipientList, string cCList, string bCCList, string replyToList, string subject, string body, Nullable<bool> isHTML, string emailType, string priority, string attachmentList, string status, string comments, Nullable<int> createdById, Nullable<int> updatedById, string senderAccountName)
        {
            var recipientListParameter = recipientList != null ?
                new ObjectParameter("RecipientList", recipientList) :
                new ObjectParameter("RecipientList", typeof(string));
    
            var cCListParameter = cCList != null ?
                new ObjectParameter("CCList", cCList) :
                new ObjectParameter("CCList", typeof(string));
    
            var bCCListParameter = bCCList != null ?
                new ObjectParameter("BCCList", bCCList) :
                new ObjectParameter("BCCList", typeof(string));
    
            var replyToListParameter = replyToList != null ?
                new ObjectParameter("ReplyToList", replyToList) :
                new ObjectParameter("ReplyToList", typeof(string));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            var bodyParameter = body != null ?
                new ObjectParameter("Body", body) :
                new ObjectParameter("Body", typeof(string));
    
            var isHTMLParameter = isHTML.HasValue ?
                new ObjectParameter("IsHTML", isHTML) :
                new ObjectParameter("IsHTML", typeof(bool));
    
            var emailTypeParameter = emailType != null ?
                new ObjectParameter("EmailType", emailType) :
                new ObjectParameter("EmailType", typeof(string));
    
            var priorityParameter = priority != null ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(string));
    
            var attachmentListParameter = attachmentList != null ?
                new ObjectParameter("AttachmentList", attachmentList) :
                new ObjectParameter("AttachmentList", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var createdByIdParameter = createdById.HasValue ?
                new ObjectParameter("CreatedById", createdById) :
                new ObjectParameter("CreatedById", typeof(int));
    
            var updatedByIdParameter = updatedById.HasValue ?
                new ObjectParameter("UpdatedById", updatedById) :
                new ObjectParameter("UpdatedById", typeof(int));
    
            var senderAccountNameParameter = senderAccountName != null ?
                new ObjectParameter("SenderAccountName", senderAccountName) :
                new ObjectParameter("SenderAccountName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpLogEmail", recipientListParameter, cCListParameter, bCCListParameter, replyToListParameter, subjectParameter, bodyParameter, isHTMLParameter, emailTypeParameter, priorityParameter, attachmentListParameter, statusParameter, commentsParameter, createdByIdParameter, updatedByIdParameter, senderAccountNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SpLogError(string sourceProject, string controller, string method, string stackTrace, string userName, string errorType, string errorDescription, string resolution, string errorOwner, string fieldName, Nullable<int> batchNumber, string status, ObjectParameter result)
        {
            var sourceProjectParameter = sourceProject != null ?
                new ObjectParameter("SourceProject", sourceProject) :
                new ObjectParameter("SourceProject", typeof(string));
    
            var controllerParameter = controller != null ?
                new ObjectParameter("Controller", controller) :
                new ObjectParameter("Controller", typeof(string));
    
            var methodParameter = method != null ?
                new ObjectParameter("Method", method) :
                new ObjectParameter("Method", typeof(string));
    
            var stackTraceParameter = stackTrace != null ?
                new ObjectParameter("StackTrace", stackTrace) :
                new ObjectParameter("StackTrace", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var errorTypeParameter = errorType != null ?
                new ObjectParameter("ErrorType", errorType) :
                new ObjectParameter("ErrorType", typeof(string));
    
            var errorDescriptionParameter = errorDescription != null ?
                new ObjectParameter("ErrorDescription", errorDescription) :
                new ObjectParameter("ErrorDescription", typeof(string));
    
            var resolutionParameter = resolution != null ?
                new ObjectParameter("Resolution", resolution) :
                new ObjectParameter("Resolution", typeof(string));
    
            var errorOwnerParameter = errorOwner != null ?
                new ObjectParameter("ErrorOwner", errorOwner) :
                new ObjectParameter("ErrorOwner", typeof(string));
    
            var fieldNameParameter = fieldName != null ?
                new ObjectParameter("FieldName", fieldName) :
                new ObjectParameter("FieldName", typeof(string));
    
            var batchNumberParameter = batchNumber.HasValue ?
                new ObjectParameter("BatchNumber", batchNumber) :
                new ObjectParameter("BatchNumber", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SpLogError", sourceProjectParameter, controllerParameter, methodParameter, stackTraceParameter, userNameParameter, errorTypeParameter, errorDescriptionParameter, resolutionParameter, errorOwnerParameter, fieldNameParameter, batchNumberParameter, statusParameter, result);
        }
    
        public virtual ObjectResult<Nullable<int>> SpLogErrorTest(string sourceProject, string controller, string method, string stackTrace, string userName, string errorType, string errorDescription, string resolution, string errorOwner, string fieldName, Nullable<int> batchNumber, string status, ObjectParameter result)
        {
            var sourceProjectParameter = sourceProject != null ?
                new ObjectParameter("SourceProject", sourceProject) :
                new ObjectParameter("SourceProject", typeof(string));
    
            var controllerParameter = controller != null ?
                new ObjectParameter("Controller", controller) :
                new ObjectParameter("Controller", typeof(string));
    
            var methodParameter = method != null ?
                new ObjectParameter("Method", method) :
                new ObjectParameter("Method", typeof(string));
    
            var stackTraceParameter = stackTrace != null ?
                new ObjectParameter("StackTrace", stackTrace) :
                new ObjectParameter("StackTrace", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var errorTypeParameter = errorType != null ?
                new ObjectParameter("ErrorType", errorType) :
                new ObjectParameter("ErrorType", typeof(string));
    
            var errorDescriptionParameter = errorDescription != null ?
                new ObjectParameter("ErrorDescription", errorDescription) :
                new ObjectParameter("ErrorDescription", typeof(string));
    
            var resolutionParameter = resolution != null ?
                new ObjectParameter("Resolution", resolution) :
                new ObjectParameter("Resolution", typeof(string));
    
            var errorOwnerParameter = errorOwner != null ?
                new ObjectParameter("ErrorOwner", errorOwner) :
                new ObjectParameter("ErrorOwner", typeof(string));
    
            var fieldNameParameter = fieldName != null ?
                new ObjectParameter("FieldName", fieldName) :
                new ObjectParameter("FieldName", typeof(string));
    
            var batchNumberParameter = batchNumber.HasValue ?
                new ObjectParameter("BatchNumber", batchNumber) :
                new ObjectParameter("BatchNumber", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SpLogErrorTest", sourceProjectParameter, controllerParameter, methodParameter, stackTraceParameter, userNameParameter, errorTypeParameter, errorDescriptionParameter, resolutionParameter, errorOwnerParameter, fieldNameParameter, batchNumberParameter, statusParameter, result);
        }
    
        public virtual ObjectResult<SpOneTimeDataMigration_Result> SpOneTimeDataMigration(string companyCode, string targetTableName, string selecterType, string overwriteOrAppend)
        {
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var targetTableNameParameter = targetTableName != null ?
                new ObjectParameter("TargetTableName", targetTableName) :
                new ObjectParameter("TargetTableName", typeof(string));
    
            var selecterTypeParameter = selecterType != null ?
                new ObjectParameter("SelecterType", selecterType) :
                new ObjectParameter("SelecterType", typeof(string));
    
            var overwriteOrAppendParameter = overwriteOrAppend != null ?
                new ObjectParameter("OverwriteOrAppend", overwriteOrAppend) :
                new ObjectParameter("OverwriteOrAppend", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpOneTimeDataMigration_Result>("SpOneTimeDataMigration", companyCodeParameter, targetTableNameParameter, selecterTypeParameter, overwriteOrAppendParameter);
        }
    
        public virtual int SpOneTimeDataMigration_Old(string companyCode, string targetTableName, string selecterType, string overwriteOrAppend)
        {
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var targetTableNameParameter = targetTableName != null ?
                new ObjectParameter("TargetTableName", targetTableName) :
                new ObjectParameter("TargetTableName", typeof(string));
    
            var selecterTypeParameter = selecterType != null ?
                new ObjectParameter("SelecterType", selecterType) :
                new ObjectParameter("SelecterType", typeof(string));
    
            var overwriteOrAppendParameter = overwriteOrAppend != null ?
                new ObjectParameter("OverwriteOrAppend", overwriteOrAppend) :
                new ObjectParameter("OverwriteOrAppend", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpOneTimeDataMigration_Old", companyCodeParameter, targetTableNameParameter, selecterTypeParameter, overwriteOrAppendParameter);
        }
    
        public virtual int SpPopulateEndDate(string companyCode, string tableName)
        {
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpPopulateEndDate", companyCodeParameter, tableNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SpProcessMenuItems(string menuLabel, Nullable<int> menuId, Nullable<int> parentMenuId, string companyCode, string newMenuName, string newMenuURL)
        {
            var menuLabelParameter = menuLabel != null ?
                new ObjectParameter("MenuLabel", menuLabel) :
                new ObjectParameter("MenuLabel", typeof(string));
    
            var menuIdParameter = menuId.HasValue ?
                new ObjectParameter("MenuId", menuId) :
                new ObjectParameter("MenuId", typeof(int));
    
            var parentMenuIdParameter = parentMenuId.HasValue ?
                new ObjectParameter("ParentMenuId", parentMenuId) :
                new ObjectParameter("ParentMenuId", typeof(int));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var newMenuNameParameter = newMenuName != null ?
                new ObjectParameter("NewMenuName", newMenuName) :
                new ObjectParameter("NewMenuName", typeof(string));
    
            var newMenuURLParameter = newMenuURL != null ?
                new ObjectParameter("NewMenuURL", newMenuURL) :
                new ObjectParameter("NewMenuURL", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SpProcessMenuItems", menuLabelParameter, menuIdParameter, parentMenuIdParameter, companyCodeParameter, newMenuNameParameter, newMenuURLParameter);
        }
    
        public virtual int SpReportOfProduct(string companyCode, string filterType, string filterValue)
        {
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var filterTypeParameter = filterType != null ?
                new ObjectParameter("FilterType", filterType) :
                new ObjectParameter("FilterType", typeof(string));
    
            var filterValueParameter = filterValue != null ?
                new ObjectParameter("FilterValue", filterValue) :
                new ObjectParameter("FilterValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpReportOfProduct", companyCodeParameter, filterTypeParameter, filterValueParameter);
        }
    
        public virtual ObjectResult<SpRPTAccountingScenarioList_Result> SpRPTAccountingScenarioList(string companyCode)
        {
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRPTAccountingScenarioList_Result>("SpRPTAccountingScenarioList", companyCodeParameter);
        }
    
        public virtual ObjectResult<SpRPTAccountingScenarios_Result> SpRPTAccountingScenarios(string companyCode, string startDate, string endDate)
        {
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRPTAccountingScenarios_Result>("SpRPTAccountingScenarios", companyCodeParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<SpRPTLifeCycleEvent_Result> SpRPTLifeCycleEvent()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRPTLifeCycleEvent_Result>("SpRPTLifeCycleEvent");
        }
    
        public virtual ObjectResult<SPRPTRequestDetails_Result> SPRPTRequestDetails(string companyCode, Nullable<int> requestId)
        {
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var requestIdParameter = requestId.HasValue ?
                new ObjectParameter("RequestId", requestId) :
                new ObjectParameter("RequestId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPRPTRequestDetails_Result>("SPRPTRequestDetails", companyCodeParameter, requestIdParameter);
        }
    
        public virtual ObjectResult<SPRPTRequestPerStatus_Result> SPRPTRequestPerStatus(string companyCode, string wFType)
        {
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var wFTypeParameter = wFType != null ?
                new ObjectParameter("WFType", wFType) :
                new ObjectParameter("WFType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPRPTRequestPerStatus_Result>("SPRPTRequestPerStatus", companyCodeParameter, wFTypeParameter);
        }
    
        public virtual ObjectResult<SPRPTRequestsInProgress_Result> SPRPTRequestsInProgress(string companyCode, Nullable<int> interval, Nullable<int> numberofBuckets)
        {
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var intervalParameter = interval.HasValue ?
                new ObjectParameter("Interval", interval) :
                new ObjectParameter("Interval", typeof(int));
    
            var numberofBucketsParameter = numberofBuckets.HasValue ?
                new ObjectParameter("NumberofBuckets", numberofBuckets) :
                new ObjectParameter("NumberofBuckets", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPRPTRequestsInProgress_Result>("SPRPTRequestsInProgress", companyCodeParameter, intervalParameter, numberofBucketsParameter);
        }
    
        public virtual ObjectResult<SPRPTRequestsPerDateInterval_Result> SPRPTRequestsPerDateInterval(string companyCode)
        {
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPRPTRequestsPerDateInterval_Result>("SPRPTRequestsPerDateInterval", companyCodeParameter);
        }
    
        public virtual ObjectResult<SpRPTScenarioDemand_Result> SpRPTScenarioDemand(string companyCode, Nullable<int> interval, Nullable<int> numberofBuckets)
        {
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var intervalParameter = interval.HasValue ?
                new ObjectParameter("Interval", interval) :
                new ObjectParameter("Interval", typeof(int));
    
            var numberofBucketsParameter = numberofBuckets.HasValue ?
                new ObjectParameter("NumberofBuckets", numberofBuckets) :
                new ObjectParameter("NumberofBuckets", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRPTScenarioDemand_Result>("SpRPTScenarioDemand", companyCodeParameter, intervalParameter, numberofBucketsParameter);
        }
    
        public virtual ObjectResult<SpS15Extracts_Result> SpS15Extracts(string extractList, string companyCode)
        {
            var extractListParameter = extractList != null ?
                new ObjectParameter("ExtractList", extractList) :
                new ObjectParameter("ExtractList", typeof(string));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpS15Extracts_Result>("SpS15Extracts", extractListParameter, companyCodeParameter);
        }
    
        public virtual ObjectResult<SpS15Extracts_Copy_Result> SpS15Extracts_Copy(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string extractName, string companyCode)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var extractNameParameter = extractName != null ?
                new ObjectParameter("ExtractName", extractName) :
                new ObjectParameter("ExtractName", typeof(string));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpS15Extracts_Copy_Result>("SpS15Extracts_Copy", startDateParameter, endDateParameter, extractNameParameter, companyCodeParameter);
        }
    
        public virtual int SpSaveReconData(Nullable<int> sysCatId, string companyCode)
        {
            var sysCatIdParameter = sysCatId.HasValue ?
                new ObjectParameter("SysCatId", sysCatId) :
                new ObjectParameter("SysCatId", typeof(int));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpSaveReconData", sysCatIdParameter, companyCodeParameter);
        }
    
        public virtual int SpSaveRefData(Nullable<int> referenceId, Nullable<int> loggedInUserId)
        {
            var referenceIdParameter = referenceId.HasValue ?
                new ObjectParameter("ReferenceId", referenceId) :
                new ObjectParameter("ReferenceId", typeof(int));
    
            var loggedInUserIdParameter = loggedInUserId.HasValue ?
                new ObjectParameter("LoggedInUserId", loggedInUserId) :
                new ObjectParameter("LoggedInUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpSaveRefData", referenceIdParameter, loggedInUserIdParameter);
        }
    
        public virtual int SpSendNotification(Nullable<int> transactionId, Nullable<int> currentOrdinal, Nullable<int> workFlowId, Nullable<bool> isReminder, Nullable<int> transactionAge, string companyCode, Nullable<int> oldWFOrdinal)
        {
            var transactionIdParameter = transactionId.HasValue ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(int));
    
            var currentOrdinalParameter = currentOrdinal.HasValue ?
                new ObjectParameter("CurrentOrdinal", currentOrdinal) :
                new ObjectParameter("CurrentOrdinal", typeof(int));
    
            var workFlowIdParameter = workFlowId.HasValue ?
                new ObjectParameter("WorkFlowId", workFlowId) :
                new ObjectParameter("WorkFlowId", typeof(int));
    
            var isReminderParameter = isReminder.HasValue ?
                new ObjectParameter("IsReminder", isReminder) :
                new ObjectParameter("IsReminder", typeof(bool));
    
            var transactionAgeParameter = transactionAge.HasValue ?
                new ObjectParameter("TransactionAge", transactionAge) :
                new ObjectParameter("TransactionAge", typeof(int));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var oldWFOrdinalParameter = oldWFOrdinal.HasValue ?
                new ObjectParameter("OldWFOrdinal", oldWFOrdinal) :
                new ObjectParameter("OldWFOrdinal", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpSendNotification", transactionIdParameter, currentOrdinalParameter, workFlowIdParameter, isReminderParameter, transactionAgeParameter, companyCodeParameter, oldWFOrdinalParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SpSwapStepOrdinals(string companyCode, Nullable<int> workFlowId, Nullable<int> ordinal1, Nullable<int> ordinal2, ObjectParameter result)
        {
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var workFlowIdParameter = workFlowId.HasValue ?
                new ObjectParameter("WorkFlowId", workFlowId) :
                new ObjectParameter("WorkFlowId", typeof(int));
    
            var ordinal1Parameter = ordinal1.HasValue ?
                new ObjectParameter("Ordinal1", ordinal1) :
                new ObjectParameter("Ordinal1", typeof(int));
    
            var ordinal2Parameter = ordinal2.HasValue ?
                new ObjectParameter("Ordinal2", ordinal2) :
                new ObjectParameter("Ordinal2", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SpSwapStepOrdinals", companyCodeParameter, workFlowIdParameter, ordinal1Parameter, ordinal2Parameter, result);
        }
    
        public virtual int SPUpdateActionStatus(string action, string workFlowName, string transactionId, string companyCode, string loggedInUserId, string comments, string currentRoleId, string projectEnviournment, string assigneeUserId)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var workFlowNameParameter = workFlowName != null ?
                new ObjectParameter("WorkFlowName", workFlowName) :
                new ObjectParameter("WorkFlowName", typeof(string));
    
            var transactionIdParameter = transactionId != null ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(string));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var loggedInUserIdParameter = loggedInUserId != null ?
                new ObjectParameter("LoggedInUserId", loggedInUserId) :
                new ObjectParameter("LoggedInUserId", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var currentRoleIdParameter = currentRoleId != null ?
                new ObjectParameter("CurrentRoleId", currentRoleId) :
                new ObjectParameter("CurrentRoleId", typeof(string));
    
            var projectEnviournmentParameter = projectEnviournment != null ?
                new ObjectParameter("ProjectEnviournment", projectEnviournment) :
                new ObjectParameter("ProjectEnviournment", typeof(string));
    
            var assigneeUserIdParameter = assigneeUserId != null ?
                new ObjectParameter("AssigneeUserId", assigneeUserId) :
                new ObjectParameter("AssigneeUserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPUpdateActionStatus", actionParameter, workFlowNameParameter, transactionIdParameter, companyCodeParameter, loggedInUserIdParameter, commentsParameter, currentRoleIdParameter, projectEnviournmentParameter, assigneeUserIdParameter);
        }
    
        public virtual int SpUpdateMenuRoleMapping()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUpdateMenuRoleMapping");
        }
    
        public virtual int SpValidateParticipantAction(Nullable<int> stepParticipantActionId, Nullable<int> entityId, string companyCode, ObjectParameter validationMessage)
        {
            var stepParticipantActionIdParameter = stepParticipantActionId.HasValue ?
                new ObjectParameter("StepParticipantActionId", stepParticipantActionId) :
                new ObjectParameter("StepParticipantActionId", typeof(int));
    
            var entityIdParameter = entityId.HasValue ?
                new ObjectParameter("EntityId", entityId) :
                new ObjectParameter("EntityId", typeof(int));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpValidateParticipantAction", stepParticipantActionIdParameter, entityIdParameter, companyCodeParameter, validationMessage);
        }
    
        public virtual ObjectResult<Nullable<int>> SpValidateTReconData(Nullable<int> sysCatId, string companyCode, ObjectParameter errorRowCount)
        {
            var sysCatIdParameter = sysCatId.HasValue ?
                new ObjectParameter("SysCatId", sysCatId) :
                new ObjectParameter("SysCatId", typeof(int));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SpValidateTReconData", sysCatIdParameter, companyCodeParameter, errorRowCount);
        }
    
        public virtual ObjectResult<Nullable<int>> SpValidateTRefData(string selecterType, Nullable<int> loggedInUserId, ObjectParameter errorRowCount)
        {
            var selecterTypeParameter = selecterType != null ?
                new ObjectParameter("SelecterType", selecterType) :
                new ObjectParameter("SelecterType", typeof(string));
    
            var loggedInUserIdParameter = loggedInUserId.HasValue ?
                new ObjectParameter("LoggedInUserId", loggedInUserId) :
                new ObjectParameter("LoggedInUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SpValidateTRefData", selecterTypeParameter, loggedInUserIdParameter, errorRowCount);
        }
    
        public virtual int SpManageSSPDimension(Nullable<int> sSPId, Nullable<decimal> sSPAmount, Nullable<System.DateTime> effectiveStartdate, Nullable<System.DateTime> effectiveEndDate, string companyCode, Nullable<int> createdById, string operation, string sourceEntityType, Nullable<int> sourceEntityId)
        {
            var sSPIdParameter = sSPId.HasValue ?
                new ObjectParameter("SSPId", sSPId) :
                new ObjectParameter("SSPId", typeof(int));
    
            var sSPAmountParameter = sSPAmount.HasValue ?
                new ObjectParameter("SSPAmount", sSPAmount) :
                new ObjectParameter("SSPAmount", typeof(decimal));
    
            var effectiveStartdateParameter = effectiveStartdate.HasValue ?
                new ObjectParameter("EffectiveStartdate", effectiveStartdate) :
                new ObjectParameter("EffectiveStartdate", typeof(System.DateTime));
    
            var effectiveEndDateParameter = effectiveEndDate.HasValue ?
                new ObjectParameter("EffectiveEndDate", effectiveEndDate) :
                new ObjectParameter("EffectiveEndDate", typeof(System.DateTime));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var createdByIdParameter = createdById.HasValue ?
                new ObjectParameter("CreatedById", createdById) :
                new ObjectParameter("CreatedById", typeof(int));
    
            var operationParameter = operation != null ?
                new ObjectParameter("Operation", operation) :
                new ObjectParameter("Operation", typeof(string));
    
            var sourceEntityTypeParameter = sourceEntityType != null ?
                new ObjectParameter("SourceEntityType", sourceEntityType) :
                new ObjectParameter("SourceEntityType", typeof(string));
    
            var sourceEntityIdParameter = sourceEntityId.HasValue ?
                new ObjectParameter("SourceEntityId", sourceEntityId) :
                new ObjectParameter("SourceEntityId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpManageSSPDimension", sSPIdParameter, sSPAmountParameter, effectiveStartdateParameter, effectiveEndDateParameter, companyCodeParameter, createdByIdParameter, operationParameter, sourceEntityTypeParameter, sourceEntityIdParameter);
        }
    }
}
